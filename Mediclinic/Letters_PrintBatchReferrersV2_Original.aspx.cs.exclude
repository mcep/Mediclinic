using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Configuration;
using System.Text.RegularExpressions;
using System.Collections;
using System.IO;
using System.Web.UI.HtmlControls;

public partial class Letters_PrintBatchReferrersV2_Original : System.Web.UI.Page
{

    // -- http://localhost:7608/Mediclinic/PrintBatchLetters.aspx?org=1550

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {

            HideErrorMessage();

            if (!IsPostBack)
            {
                PagePermissions.EnforcePermissions_RequireAny(Session, Response, true, true, true, true, true, false);
                Session.Remove("data_selected");
                Session.Remove("sortExpression_Selected");
                Session.Remove("sortExpression_Offering");

                PopulateLettersList();

                SetUrlFields();
            }

        }
        catch (CustomMessageException ex)
        {
            if (IsPostBack) SetErrorMessage(ex.Message);
            else HideTableAndSetErrorMessage(ex.Message);
        }
        catch (Exception ex)
        {
            if (IsPostBack) SetErrorMessage("", ex.ToString());
            else HideTableAndSetErrorMessage("", ex.ToString());
        }
    }

    #region SetUrlFields

    protected void SetUrlFields()
    {
        try
        {
            string letter_id = Request.QueryString["letter"];
            if (letter_id != null && letter_id != "-1")
            {
                if (!Regex.IsMatch(letter_id, @"^\d+$"))
                    throw new CustomMessageException();

                Letter letter = LetterDB.GetByID(Convert.ToInt32(letter_id));
                if (letter == null)
                    throw new CustomMessageException();

                foreach (ListItem item in lstLetters.Items)
                    if (item.Value == letter.LetterID.ToString())
                        item.Selected = true;
            }
        }
        catch (CustomMessageException)
        {
            SetErrorMessage();
        }
    }

    #endregion

    #region btnUpdateReferrers_Click, btnUpdateReferrersFromClinic_Click, btnAddAllReferrers_Click, AddAllReferrers, PopulateLettersList, LetterExists

    protected void btnUpdateReferrers_Click(object sender, EventArgs e)
    {
        UpdateOrgsFromJavascriptChanges();
    }

    protected void btnAddAllReferrers_Click(object sender, EventArgs e)
    {
        AddAllReferrers();
    }
    protected void AddAllReferrers()
    {
        // get selected id's
        ArrayList selectedIDs = new ArrayList();
        foreach (ListItem item in lstReferrers.Items)
            if (item.Selected)
                selectedIDs.Add(item.Value);

        lstReferrers.Items.Clear();
        string items = string.Empty;
        DataTable referrers = RegisterReferrerDB.GetDataTable();
        for (int i = 0; i < referrers.Rows.Count; i++)
        {
            // fill listbox
            RegisterReferrer curRegReferrer = RegisterReferrerDB.LoadAll(referrers.Rows[i]);

            string text = curRegReferrer.Referrer.Person.FullnameWithoutMiddlename + " [" + curRegReferrer.Organisation.Name + "]";
            lstReferrers.Items.Add(new ListItem(text, curRegReferrer.RegisterReferrerID.ToString()));

            // add to hidden list
            items += (items.Length == 0 ? "" : ",") + curRegReferrer.RegisterReferrerID.ToString();
        }
        hiddenReferrerIDsList.Value = items;
    }


    protected void UpdateOrgsFromJavascriptChanges()
    {
        string referrerIDs = hiddenReferrerIDsList.Value;  // comma seperated
        Hashtable referrerIDsHash = new Hashtable();
        if (referrerIDs.Length > 0)
            foreach (string referrerID in referrerIDs.Split(','))
                referrerIDsHash[Convert.ToInt32(referrerID)] = 1;

        lstReferrers.Items.Clear();
        bool incAgedCare = Convert.ToInt32(Session["SiteTypeID"]) == 2;
        bool incClinics  = Convert.ToInt32(Session["SiteTypeID"]) == 1;
        DataTable referrers = RegisterReferrerDB.GetDataTable();
        for (int i = 0; i < referrers.Rows.Count; i++)
        {
            RegisterReferrer curRegReferrer = RegisterReferrerDB.LoadAll(referrers.Rows[i]);
            if (referrerIDsHash[curRegReferrer.RegisterReferrerID] != null)
            {
                string text = curRegReferrer.Referrer.Person.FullnameWithoutMiddlename + " [" + curRegReferrer.Organisation.Name + "]";
                lstReferrers.Items.Add(new ListItem(text, curRegReferrer.RegisterReferrerID.ToString()));
            }
        }
    }


    protected void btnUpdateReferrersFromClinic_Click(object sender, EventArgs e)
    {
        int orgID = Convert.ToInt32(hiddenUpdateReferrersFromClinic_OrgID.Value);
        Organisation org = OrganisationDB.GetByID(orgID);

        if (org != null)
        {
            string referrerIDs = hiddenReferrerIDsList.Value;  // comma seperated
            Hashtable referrerIDsHash = new Hashtable();
            if (referrerIDs.Length > 0)
                foreach (string referrerID in referrerIDs.Split(','))
                    referrerIDsHash[Convert.ToInt32(referrerID)] = 1;


            // add all new ones (not including those already in there)
            RegisterReferrer[] refs = RegisterReferrerDB.GetAllActiveRegRefByPatientsOfInternalOrg(orgID);
            for (int i = 0; i < refs.Length; i++)
            {
                if (referrerIDsHash[refs[i].RegisterReferrerID] == null)
                {
                    hiddenReferrerIDsList.Value += (hiddenReferrerIDsList.Value.Length == 0 ? "" : ",") + refs[i].RegisterReferrerID; // add to hiddenfield list of id's
                    referrerIDsHash[refs[i].RegisterReferrerID] = 1;  // add to hash
                }
            }


            // clear and re-set all (in alphabetical order
            lstReferrers.Items.Clear();
            bool incAgedCare = Convert.ToInt32(Session["SiteTypeID"]) == 2;
            bool incClinics  = Convert.ToInt32(Session["SiteTypeID"]) == 1;
            DataTable referrers = RegisterReferrerDB.GetDataTable();
            for (int i = 0; i < referrers.Rows.Count; i++)
            {
                RegisterReferrer curRegReferrer = RegisterReferrerDB.LoadAll(referrers.Rows[i]);
                if (referrerIDsHash[curRegReferrer.RegisterReferrerID] != null)
                {
                    string text = curRegReferrer.Referrer.Person.FullnameWithoutMiddlename + " [" + curRegReferrer.Organisation.Name + "]";
                    lstReferrers.Items.Add(new ListItem(text, curRegReferrer.RegisterReferrerID.ToString()));
                }
            }
        }

        hiddenUpdateReferrersFromClinic_OrgID.Value = string.Empty;
    }

    
    protected void ddlLetterTypes_SelectedIndexChanged(object sender, EventArgs e)
    {
        PopulateLettersList();
    }

    protected void PopulateLettersList()
    {
        DataTable letters = LetterDB.GetDataTable_ByOrg(0, Convert.ToInt32(Session["SiteID"]));

        // remove ones that dont exists
        for (int i = letters.Rows.Count - 1; i >= 0; i--)
        {
            Letter letter = LetterDB.LoadAll(letters.Rows[i]);
            if (!letter.FileExists(Convert.ToInt32(Session["SiteID"])))
                letters.Rows.RemoveAt(i);
        }

        lstLetters.DataSource     = letters;
        lstLetters.DataTextField  = "letter_docname";
        lstLetters.DataValueField = "letter_letter_id";
        lstLetters.DataBind();
    }

    protected bool LetterExists(int letterID)
    {
        Letter letter = LetterDB.GetByID(letterID);
        bool useDefaultDocs = letter.Organisation == null ? true : !LetterDB.OrgHasdocs(letter.Organisation.OrganisationID);

        string dir = Letter.GetLettersDirectory();
        return (File.Exists(dir + (useDefaultDocs ? "" : letter.Organisation.OrganisationID + @"\") + letter.Docname));
    }


    #endregion

    #region PrintLetter

    protected void btnPrint_Click(object sender, EventArgs e)
    {
        try
        {
            // TODO: Send Letter By Email
            int letterPrintHistorySendMethodID = 1; // send by mail


            // make sure at least one referrer selected
            if (lstReferrers.GetSelectedIndices().Length == 0)
                throw new CustomMessageException("Please select at least one referrer.");

            // make sure at least one letter selected
            if (lstLetters.GetSelectedIndices().Length == 0)
                throw new CustomMessageException("Please select a letter.");


            // get letter and make sure it exists
            Letter letter = LetterDB.GetByID(Convert.ToInt32(lstLetters.SelectedValue));
            string sourchTemplatePath = letter.GetFullPath(Convert.ToInt32(Session["SiteID"]));
            if (!File.Exists(sourchTemplatePath))
                throw new CustomMessageException("File doesn't exist.");

            // get temp directory
            string tmpLettersDirectory = Letter.GetTempLettersDirectory();
            if (!Directory.Exists(tmpLettersDirectory))
                throw new CustomMessageException("Temp letters directory doesn't exist");

            // delete old tmp files
            FileHelper.DeleteOldFiles(tmpLettersDirectory, new TimeSpan(1, 0, 0));



            // create individual merged docs and put into list of docsToMerge - only if there is an org-patient relationship
            ArrayList docsToMerge = new ArrayList();

            Site site = SiteDB.GetByID(Convert.ToInt32(Session["SiteID"]));
            foreach (ListItem referrerItem in lstReferrers.Items)
            {
                if (!referrerItem.Selected)
                    continue;

                // create doc
                string tmpSingleFileName = Letter.CreateMergedDocument(
                    letter.LetterID,
                    chkKeepInHistory.Checked && Convert.ToBoolean(System.Configuration.ConfigurationManager.AppSettings["StoreLettersHistoryInDB"]),
                    chkKeepInHistory.Checked && Convert.ToBoolean(System.Configuration.ConfigurationManager.AppSettings["StoreLettersHistoryInFlatFile"]),
                    letterPrintHistorySendMethodID,
                    Letter.GetLettersHistoryDirectory(0),
                    letter.Docname.Replace(".dot", ".doc"),
                    site,
                     0, // org id
                    -1, // booking id
                    -1, // patient id
                    Convert.ToInt32(referrerItem.Value),
                    Convert.ToInt32(Session["StaffID"]),
                    -1, //healthcardactionid
                    sourchTemplatePath,
                    tmpLettersDirectory + letter.Docname.Replace(".dot", ".doc"),
                    true);

                // record name of merged doc
                docsToMerge.Add(tmpSingleFileName);
            }



            // merge all tmp files
            string tmpFinalFileName = Letter.MergeMultipleDocuments(
                ((string[])docsToMerge.ToArray(typeof(string))),
                tmpLettersDirectory + letter.Docname.Replace(".dot", ".doc"));

            // delete all single tmp files
            foreach(string file in docsToMerge)
                File.Delete(file);

            // download the document
            byte[] fileContents = File.ReadAllBytes(tmpFinalFileName);
            System.IO.File.Delete(tmpFinalFileName);

            // Nothing gets past the "DownloadDocument" method because it outputs the file 
            // which is writing a response to the client browser and calls Response.End()
            // So make sure any other code that functions goes before this
            Letter.DownloadDocument(Response, fileContents, letter.Docname.Replace(".dot", ".doc"));
        }
        catch (CustomMessageException cmEx)
        {
            SetErrorMessage(cmEx.Message);
            return;
        }
    

    }

    #endregion


    #region SetErrorMessage, HideErrorMessage

    private void HideTableAndSetErrorMessage(string errMsg = "", string details = "")
    {
        SetErrorMessage(errMsg, details);
    }
    private void SetErrorMessage(string errMsg = "", string details = "")
    {
        if (errMsg.Contains(Environment.NewLine))
            errMsg = errMsg.Replace(Environment.NewLine, "<br />");

        // double escape so shows up literally on webpage for 'alert' message
        string detailsToDisplay = (details.Length == 0 ? "" : " <a href=\"#\" onclick=\"alert('" + details.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("'", "\\'").Replace("\"", "\\'") + "'); return false;\">Details</a>");

        lblErrorMessage.Visible = true;
        if (errMsg != null && errMsg.Length > 0)
            lblErrorMessage.Text = errMsg + detailsToDisplay + "<br />";
        else
            lblErrorMessage.Text = "An error has occurred. Plase contact the system administrator. " + detailsToDisplay + "<br />";
    }
    private void HideErrorMessage()
    {
        lblErrorMessage.Visible = false;
        lblErrorMessage.Text = "";
    }

    #endregion

}