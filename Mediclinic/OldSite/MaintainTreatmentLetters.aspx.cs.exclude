using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Configuration;
using System.Text.RegularExpressions;

public partial class MaintainTreatmentLetters : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {

            if (!IsPostBack)
                Utilities.SetNoCache(Response);
            HideErrorMessage();

            if (!IsPostBack)
            {
                Session.Remove("treatment_template_letters_sortexpression");
                Session.Remove("treatment_template_letters_data");

                FillGrid();
            }

            if (!Utilities.IsDev())
                this.Label1.Visible = false;

            this.GrdTreatmentTemplateLetters.EnableViewState = true;

        }
        catch (CustomMessageException ex)
        {
            if (IsPostBack) SetErrorMessage(ex.Message);
            else HideTableAndSetErrorMessage(ex.Message);
        }
        catch (Exception ex)
        {
            if (IsPostBack) SetErrorMessage("", ex.ToString());
            else HideTableAndSetErrorMessage("", ex.ToString());
        }
    }

    #region GrdTreatmentTemplateLetters

    private bool hideFotter = false;

    protected void FillGrid()
    {
        DataTable dt = LetterTreatmentTemplateDB.GetDataTable(Convert.ToInt32(Session["SiteID"]));
        Session["treatment_template_letters_data"] = dt;

        if (dt.Rows.Count > 0)
        {

            if (IsPostBack && Session["treatment_template_letters_sortexpression"] != null && Session["treatment_template_letters_sortexpression"].ToString().Length > 0)
            {
                DataView dataView = new DataView(dt);
                dataView.Sort = Session["treatment_template_letters_sortexpression"].ToString();
                GrdTreatmentTemplateLetters.DataSource = dataView;
            }
            else
            {
                GrdTreatmentTemplateLetters.DataSource = dt;
            }


            try
            {
                GrdTreatmentTemplateLetters.DataBind();
            }
            catch (Exception ex)
            {
                Label1.Text = ex.ToString();
            }
        }
        else
        {
            dt.Rows.Add(dt.NewRow());
            GrdTreatmentTemplateLetters.DataSource = dt;
            GrdTreatmentTemplateLetters.DataBind();

            int TotalColumns = GrdTreatmentTemplateLetters.Rows[0].Cells.Count;
            GrdTreatmentTemplateLetters.Rows[0].Cells.Clear();
            GrdTreatmentTemplateLetters.Rows[0].Cells.Add(new TableCell());
            GrdTreatmentTemplateLetters.Rows[0].Cells[0].ColumnSpan = TotalColumns;
            GrdTreatmentTemplateLetters.Rows[0].Cells[0].Text = "No Record Found";
        }

        GrdTreatmentTemplateLetters.FooterRow.Visible = !hideFotter;
    }
    protected void GrdTreatmentTemplateLetters_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (!Utilities.IsDev() && e.Row.RowType != DataControlRowType.Pager)
            e.Row.Cells[0].CssClass = "hiddencol";
    }
    protected void GrdTreatmentTemplateLetters_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        DataTable fields = DBBase.GetGenericDataTable_WithWhereOrderClause("Field", "field_id <> 0 AND has_offerings = 1", "descr", "field_id", "descr");
        DataTable letters = LetterDB.GetDataTable_ByOrg(0, Convert.ToInt32(Session["SiteID"]));

        DataTable dt = Session["treatment_template_letters_data"] as DataTable;

        bool tblEmpty = (dt.Rows.Count == 1 && dt.Rows[0][0] == DBNull.Value);

        // remove offering flds that are used
        if (!tblEmpty)
        {
            foreach (DataRow row in dt.Rows)
            {
                for (int i = 0; i < fields.Rows.Count; i++)
                    if (Convert.ToInt32(fields.Rows[i]["field_id"]) == Convert.ToInt32(row["lettertreatmenttemplate_field_id"]))
                        fields.Rows.RemoveAt(i);
            }
        }


        if (!tblEmpty && e.Row.RowType == DataControlRowType.DataRow)
        {
            bool hasData = dt.Rows[0][0].ToString() != string.Empty;
            Label lblId = (Label)e.Row.FindControl("lblId");
            DataRow[] foundRows = dt.Select("lettertreatmenttemplate_letter_treatment_template_id=" + lblId.Text);
            DataRow thisRow = foundRows[0];

            DropDownList ddlField = (DropDownList)e.Row.FindControl("ddlField");
            if (ddlField != null)
            {
                ddlField.DataSource = fields;
                ddlField.DataTextField = "descr";
                ddlField.DataValueField = "field_id";
                ddlField.DataBind();
                ddlField.SelectedValue = thisRow["lettertreatmenttemplate_field_id"].ToString();
            }

            DropDownList ddlFirstLetter = (DropDownList)e.Row.FindControl("ddlFirstLetter");
            if (ddlFirstLetter != null)
            {
                ddlFirstLetter.DataSource = letters;
                ddlFirstLetter.DataTextField = "letter_docname";
                ddlFirstLetter.DataValueField = "letter_letter_id";
                ddlFirstLetter.DataBind();
                ddlFirstLetter.SelectedValue = thisRow["lettertreatmenttemplate_first_letter_id"].ToString();
            }

            DropDownList ddlTreatmentNoteLetter = (DropDownList)e.Row.FindControl("ddlTreatmentNoteLetter");
            if (ddlTreatmentNoteLetter != null)
            {
                ddlTreatmentNoteLetter.DataSource = letters;
                ddlTreatmentNoteLetter.DataTextField = "letter_docname";
                ddlTreatmentNoteLetter.DataValueField = "letter_letter_id";
                ddlTreatmentNoteLetter.DataBind();
                ddlTreatmentNoteLetter.SelectedValue = thisRow["lettertreatmenttemplate_treatment_notes_letter_id"].ToString();
            }

            DropDownList ddlLastLetter = (DropDownList)e.Row.FindControl("ddlLastLetter");
            if (ddlLastLetter != null)
            {
                ddlLastLetter.DataSource = letters;
                ddlLastLetter.DataTextField = "letter_docname";
                ddlLastLetter.DataValueField = "letter_letter_id";
                ddlLastLetter.DataBind();
                ddlLastLetter.SelectedValue = thisRow["lettertreatmenttemplate_last_letter_id"].ToString();
            }

            DropDownList ddlLastLetterWhenReplacingEPC = (DropDownList)e.Row.FindControl("ddlLastLetterWhenReplacingEPC");
            if (ddlLastLetterWhenReplacingEPC != null)
            {
                ddlLastLetterWhenReplacingEPC.DataSource = letters;
                ddlLastLetterWhenReplacingEPC.DataTextField = "letter_docname";
                ddlLastLetterWhenReplacingEPC.DataValueField = "letter_letter_id";
                ddlLastLetterWhenReplacingEPC.DataBind();
                ddlLastLetterWhenReplacingEPC.SelectedValue = thisRow["lettertreatmenttemplate_last_letter_when_replacing_epc_id"].ToString();
            }


            Utilities.AddConfirmationBox(e);
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
                Utilities.SetEditRowBackColour(e, System.Drawing.Color.LightGoldenrodYellow);
        }
        if (e.Row.RowType == DataControlRowType.Footer)
        {


            if (fields.Rows.Count == 0)
            {
                if (GrdTreatmentTemplateLetters.FooterRow != null)
                    GrdTreatmentTemplateLetters.FooterRow.Visible = false;
                hideFotter = true;
            }
            else
            {
                DropDownList ddlField = (DropDownList)e.Row.FindControl("ddlNewField");
                ddlField.DataSource = fields;
                ddlField.DataTextField = "descr";
                ddlField.DataValueField = "field_id";
                ddlField.DataBind();

                DropDownList ddlFirstLetter = (DropDownList)e.Row.FindControl("ddlNewFirstLetter");
                ddlFirstLetter.DataSource = letters;
                ddlFirstLetter.DataTextField = "letter_docname";
                ddlFirstLetter.DataValueField = "letter_letter_id";
                ddlFirstLetter.DataBind();

                DropDownList ddlTreatmentNoteLetter = (DropDownList)e.Row.FindControl("ddlNewTreatmentNoteLetter");
                ddlTreatmentNoteLetter.DataSource = letters;
                ddlTreatmentNoteLetter.DataTextField = "letter_docname";
                ddlTreatmentNoteLetter.DataValueField = "letter_letter_id";
                ddlTreatmentNoteLetter.DataBind();

                DropDownList ddlLastLetter = (DropDownList)e.Row.FindControl("ddlNewLastLetter");
                ddlLastLetter.DataSource = letters;
                ddlLastLetter.DataTextField = "letter_docname";
                ddlLastLetter.DataValueField = "letter_letter_id";
                ddlLastLetter.DataBind();

                DropDownList ddlLastLetterWhenReplacingEPC = (DropDownList)e.Row.FindControl("ddlNewLastLetterWhenReplacingEPC");
                ddlLastLetterWhenReplacingEPC.DataSource = letters;
                ddlLastLetterWhenReplacingEPC.DataTextField = "letter_docname";
                ddlLastLetterWhenReplacingEPC.DataValueField = "letter_letter_id";
                ddlLastLetterWhenReplacingEPC.DataBind();
            }
        }
    }
    protected void GrdTreatmentTemplateLetters_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        GrdTreatmentTemplateLetters.EditIndex = -1;
        FillGrid();
    }
    protected void GrdTreatmentTemplateLetters_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        Label        lblId                         = (Label)GrdTreatmentTemplateLetters.Rows[e.RowIndex].FindControl("lblId");
        DropDownList ddlField                      = (DropDownList)GrdTreatmentTemplateLetters.Rows[e.RowIndex].FindControl("ddlField");
        DropDownList ddlFirstLetter                = (DropDownList)GrdTreatmentTemplateLetters.Rows[e.RowIndex].FindControl("ddlFirstLetter");
        DropDownList ddlLastLetter                 = (DropDownList)GrdTreatmentTemplateLetters.Rows[e.RowIndex].FindControl("ddlLastLetter");
        DropDownList ddlLastLetterWhenReplacingEPC = (DropDownList)GrdTreatmentTemplateLetters.Rows[e.RowIndex].FindControl("ddlLastLetterWhenReplacingEPC");
        DropDownList ddlTreatmentNoteLetter        = (DropDownList)GrdTreatmentTemplateLetters.Rows[e.RowIndex].FindControl("ddlTreatmentNoteLetter");

        DataTable dt = Session["treatment_template_letters_data"] as DataTable;
        DataRow[] foundRows = dt.Select("lettertreatmenttemplate_letter_treatment_template_id=" + lblId.Text);
        DataRow thisRow = foundRows[0];

        LetterTreatmentTemplateDB.Update(
            Convert.ToInt32(lblId.Text),
            Convert.ToInt32(thisRow["lettertreatmenttemplate_field_id"]),
            Convert.ToInt32(ddlFirstLetter.SelectedValue),
            Convert.ToInt32(ddlLastLetter.SelectedValue),
            Convert.ToInt32(ddlLastLetterWhenReplacingEPC.SelectedValue),
            Convert.ToInt32(ddlTreatmentNoteLetter.SelectedValue));

        GrdTreatmentTemplateLetters.EditIndex = -1;
        FillGrid();
    }
    protected void GrdTreatmentTemplateLetters_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        Label lblId = (Label)GrdTreatmentTemplateLetters.Rows[e.RowIndex].FindControl("lblId");
        int letter_treatment_template_id = Convert.ToInt32(lblId.Text);

        try
        {
            LetterTreatmentTemplateDB.Delete(letter_treatment_template_id);
        }
        catch (ForeignKeyConstraintException fkcEx)
        {
            if (Utilities.IsDev())
                SetErrorMessage("Can not delete because other records depend on this : " + fkcEx.Message);
            else
                SetErrorMessage("Can not delete because other records depend on this");
        }

        FillGrid();
    }
    protected void GrdTreatmentTemplateLetters_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName.Equals("Insert"))
        {
            DropDownList ddlField                      = (DropDownList)GrdTreatmentTemplateLetters.FooterRow.FindControl("ddlNewField");
            DropDownList ddlFirstLetter                = (DropDownList)GrdTreatmentTemplateLetters.FooterRow.FindControl("ddlNewFirstLetter");
            DropDownList ddlLastLetter                 = (DropDownList)GrdTreatmentTemplateLetters.FooterRow.FindControl("ddlNewLastLetter");
            DropDownList ddlLastLetterWhenReplacingEPC = (DropDownList)GrdTreatmentTemplateLetters.FooterRow.FindControl("ddlNewLastLetterWhenReplacingEPC");
            DropDownList ddlTreatmentNoteLetter        = (DropDownList)GrdTreatmentTemplateLetters.FooterRow.FindControl("ddlNewTreatmentNoteLetter");

            LetterTreatmentTemplateDB.Insert(
                    Convert.ToInt32(ddlField.SelectedValue),
                    Convert.ToInt32(ddlFirstLetter.SelectedValue),
                    Convert.ToInt32(ddlLastLetter.SelectedValue),
                    Convert.ToInt32(ddlLastLetterWhenReplacingEPC.SelectedValue),
                    Convert.ToInt32(ddlTreatmentNoteLetter.SelectedValue),
                    Convert.ToInt32(Session["SiteID"]));

            FillGrid();
        }
    }
    protected void GrdTreatmentTemplateLetters_RowEditing(object sender, GridViewEditEventArgs e)
    {
        GrdTreatmentTemplateLetters.EditIndex = e.NewEditIndex;
        FillGrid();
    }
    protected void GridView_Sorting(object sender, GridViewSortEventArgs e)
    {
        // dont allow sorting if in edit mode
        if (GrdTreatmentTemplateLetters.EditIndex >= 0)
            return;

        DataTable dataTable = Session["treatment_template_letters_data"] as DataTable;

        if (dataTable != null)
        {
            if (Session["treatment_template_letters_sortexpression"] == null)
                Session["treatment_template_letters_sortexpression"] = "";

            DataView dataView = new DataView(dataTable);
            string[] sortData = Session["treatment_template_letters_sortexpression"].ToString().Trim().Split(' ');
            string newSortExpr = (e.SortExpression == sortData[0] && sortData[1] == "ASC") ? "DESC" : "ASC";
            dataView.Sort = e.SortExpression + " " + newSortExpr;
            Session["treatment_template_letters_sortexpression"] = e.SortExpression + " " + newSortExpr;

            GrdTreatmentTemplateLetters.DataSource = dataView;
            GrdTreatmentTemplateLetters.DataBind();
        }

        GrdTreatmentTemplateLetters.FooterRow.Visible = !hideFotter;
    }

    #endregion

    #region SetErrorMessage, HideErrorMessag

    private void HideTableAndSetErrorMessage(string errMsg = "", string details = "")
    {
        SetErrorMessage(errMsg, details);
    }
    private void SetErrorMessage(string errMsg = "", string details = "")
    {
        if (errMsg.Contains(Environment.NewLine))
            errMsg = errMsg.Replace(Environment.NewLine, "<br />");

        // double escape so shows up literally on webpage for 'alert' message
        string detailsToDisplay = (details.Length == 0 ? "" : " <a href=\"#\" onclick=\"alert('" + details.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("'", "\\'").Replace("\"", "\\'") + "'); return false;\">Details</a>");

        lblErrorMessage.Visible = true;
        if (errMsg != null && errMsg.Length > 0)
            lblErrorMessage.Text = errMsg + detailsToDisplay + "<br />";
        else
            lblErrorMessage.Text = "An error has occurred. Plase contact the system administrator. " + detailsToDisplay + "<br />";
    }
    private void HideErrorMessage()
    {
        lblErrorMessage.Visible = false;
        lblErrorMessage.Text = "";
    }

    #endregion

}
