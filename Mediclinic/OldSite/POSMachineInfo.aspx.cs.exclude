using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Configuration;
using System.Text.RegularExpressions;

public partial class POSMachineInfo : System.Web.UI.Page
{

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            if (!IsPostBack)
                Utilities.SetNoCache(Response);
            HideErrorMessage();

            bool showPageHeader = Request.QueryString["show_header"] == null || Request.QueryString["show_header"] == "1";
            if (!showPageHeader)
                Utilities.UpdatePageHeader(Page.Master, true, true);
            btnClose.Visible = !showPageHeader;

            if (!IsPostBack)
            {
                PagePermissions.EnforcePermissions_RequireAny(Session, Response, true, true, true, false, false, false);
                Session.Remove("org_posmachines_sortexpression");
                Session.Remove("org_posmachines_data");
                Session.Remove("site_posmachines_sortexpression");
                Session.Remove("site_posmachines_data");
                FillOrgPOSMachineGrid();
                FillSitePOSMachineGrid();
            }

            this.GrdOrgPOSMachine.EnableViewState  = true;
            this.GrdSitePOSMachine.EnableViewState = true;

        }
        catch (CustomMessageException ex)
        {
            if (IsPostBack) SetErrorMessage(ex.Message);
            else HideTableAndSetErrorMessage(ex.Message);
        }
        catch (Exception ex)
        {
            if (IsPostBack) SetErrorMessage("", ex.ToString());
            else HideTableAndSetErrorMessage("", ex.ToString());
        }
    }

    #region GrdOrgPOSMachine

    protected void FillOrgPOSMachineGrid()
    {
        bool isPopup = Request.QueryString["show_header"] != null && Request.QueryString["show_header"] != "1";

        bool isStakeholder = Session["IsStakeholder"]  != null && Convert.ToBoolean(Session["IsStakeholder"]);
        bool isMasterAdmin = Session["IsMasterAdmin"]  != null && Convert.ToBoolean(Session["IsMasterAdmin"]);
        bool isAdmin       = Session["IsAdmin"]        != null && Convert.ToBoolean(Session["IsAdmin"]);
        bool isAdminView = isStakeholder || isMasterAdmin || isAdmin;

        int  siteID = Convert.ToInt32(Session["SiteID"]);
        int  orgID  = Session["OrgID"] == null ? 0 : Convert.ToInt32(Session["OrgID"]);


        DataTable dt  = POSMachineDB.GetDataTable_AllInfo();
        dt.Columns.Add("bold", typeof(bool));
        for (int i = dt.Rows.Count - 1; i >= 0; i--)
        {
            if (dt.Rows[i]["organisation_organisation_id"] == DBNull.Value)
                dt.Rows.RemoveAt(i);
            else
                dt.Rows[i]["bold"] = !isPopup ? false : (isAdminView && dt.Rows[i]["site_site_id"] != DBNull.Value && siteID == Convert.ToInt32(dt.Rows[i]["site_site_id"])) || (!isAdminView && dt.Rows[i]["organisation_organisation_id"] != DBNull.Value && orgID == Convert.ToInt32(dt.Rows[i]["organisation_organisation_id"]));
        }

        Session["org_posmachines_data"] = dt;

        if (dt.Rows.Count > 0)
        {

            if (IsPostBack && Session["org_posmachines_sortexpression"] != null && Session["org_posmachines_sortexpression"].ToString().Length > 0)
            {
                DataView dataView = new DataView(dt);
                dataView.Sort = Session["org_posmachines_sortexpression"].ToString();
                GrdOrgPOSMachine.DataSource = dataView;
            }
            else
            {
                GrdOrgPOSMachine.DataSource = dt;
            }


            try
            {
                GrdOrgPOSMachine.DataBind();
                GrdOrgPOSMachine.PagerSettings.FirstPageText = "1";
                GrdOrgPOSMachine.PagerSettings.LastPageText = GrdOrgPOSMachine.PageCount.ToString();
                GrdOrgPOSMachine.DataBind();
            }
            catch (Exception ex)
            {
                this.lblErrorMessage.Visible = true;
                this.lblErrorMessage.Text = ex.ToString();
            }
        }
        else
        {
            dt.Rows.Add(dt.NewRow());
            GrdOrgPOSMachine.DataSource = dt;
            GrdOrgPOSMachine.DataBind();

            int TotalColumns = GrdOrgPOSMachine.Rows[0].Cells.Count;
            GrdOrgPOSMachine.Rows[0].Cells.Clear();
            GrdOrgPOSMachine.Rows[0].Cells.Add(new TableCell());
            GrdOrgPOSMachine.Rows[0].Cells[0].ColumnSpan = TotalColumns;
            GrdOrgPOSMachine.Rows[0].Cells[0].Text = "No Record Found";
        }
    }
    protected void GrdOrgPOSMachine_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (!Utilities.IsDev() && e.Row.RowType != DataControlRowType.Pager)
            e.Row.Cells[0].CssClass = "hiddencol";
    }
    protected void GrdOrgPOSMachine_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        DataTable orgs = OrganisationDB.GetDataTable(0, false, true, false, true, true);

        DataTable dt_address_channel = Session["org_posmachines_data"] as DataTable;
        bool tblEmpty = (dt_address_channel.Rows.Count == 1 && dt_address_channel.Rows[0][0] == DBNull.Value);
        if (!tblEmpty && e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lblId = (Label)e.Row.FindControl("lblId");
            DataRow[] foundRows = dt_address_channel.Select("pm_pos_machine_id=" + lblId.Text);
            DataRow thisRow = foundRows[0];


            DropDownList ddlOrganisation = (DropDownList)e.Row.FindControl("ddlOrganisation");
            if (ddlOrganisation != null)
            {
                ddlOrganisation.DataSource = orgs;
                ddlOrganisation.DataTextField = "name";
                ddlOrganisation.DataValueField = "entity_id";
                ddlOrganisation.DataBind();
                ddlOrganisation.SelectedValue = thisRow["pm_entity_id"].ToString();
            }

            Utilities.AddConfirmationBox(e);
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
                Utilities.SetEditRowBackColour(e, System.Drawing.Color.LightGoldenrodYellow);
        }
        if (e.Row.RowType == DataControlRowType.Footer)
        {
            DropDownList ddlOrganisation = (DropDownList)e.Row.FindControl("ddlNewOrganisation");
            ddlOrganisation.DataSource = orgs;
            ddlOrganisation.DataBind();
        }
    }
    protected void GrdOrgPOSMachine_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        GrdOrgPOSMachine.EditIndex = -1;
        FillOrgPOSMachineGrid();
    }
    protected void GrdOrgPOSMachine_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        Label        lblId           = (Label)GrdOrgPOSMachine.Rows[e.RowIndex].FindControl("lblId");
        DropDownList ddlOrganisation = (DropDownList)GrdOrgPOSMachine.Rows[e.RowIndex].FindControl("ddlOrganisation");
        TextBox      txtPOSID        = (TextBox)GrdOrgPOSMachine.Rows[e.RowIndex].FindControl("txtPOSID");

        POSMachineDB.Update(Convert.ToInt32(lblId.Text), Convert.ToInt32(ddlOrganisation.SelectedValue), txtPOSID.Text);

        GrdOrgPOSMachine.EditIndex = -1;
        FillOrgPOSMachineGrid();
    }
    protected void GrdOrgPOSMachine_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        Label lblId = (Label)GrdOrgPOSMachine.Rows[e.RowIndex].FindControl("lblId");

        try
        {
            //POSMachineDB.Delete(Convert.ToInt32(lblId.Text));
        }
        catch (ForeignKeyConstraintException fkcEx)
        {
            if (Utilities.IsDev())
                SetErrorMessage("Can not delete because other records depend on this : " + fkcEx.Message);
            else
                SetErrorMessage("Can not delete because other records depend on this");
        }

        FillOrgPOSMachineGrid();
    }
    protected void GrdOrgPOSMachine_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName.Equals("Insert"))
        {
            DropDownList ddlOrganisation = (DropDownList)GrdOrgPOSMachine.FooterRow.FindControl("ddlNewOrganisation");
            TextBox      txtPOSID        = (TextBox)GrdOrgPOSMachine.FooterRow.FindControl("txtNewPOSID");

            POSMachineDB.Insert(Convert.ToInt32(ddlOrganisation.SelectedValue), txtPOSID.Text);

            FillOrgPOSMachineGrid();
        }
    }
    protected void GrdOrgPOSMachine_RowEditing(object sender, GridViewEditEventArgs e)
    {
        GrdOrgPOSMachine.EditIndex = e.NewEditIndex;
        FillOrgPOSMachineGrid();
    }
    protected void GrdOrgPOSMachine_Sorting(object sender, GridViewSortEventArgs e)
    {
        // dont allow sorting if in edit mode
        if (GrdOrgPOSMachine.EditIndex >= 0)
            return;

        DataTable dataTable = Session["org_posmachines_data"] as DataTable;

        if (dataTable != null)
        {
            if (Session["org_posmachines_sortexpression"] == null)
                Session["org_posmachines_sortexpression"] = "";

            DataView dataView = new DataView(dataTable);
            string[] sortData = Session["org_posmachines_sortexpression"].ToString().Trim().Split(' ');
            string newSortExpr = (e.SortExpression == sortData[0] && sortData[1] == "ASC") ? "DESC" : "ASC";
            dataView.Sort = e.SortExpression + " " + newSortExpr;
            Session["org_posmachines_sortexpression"] = e.SortExpression + " " + newSortExpr;

            GrdOrgPOSMachine.DataSource = dataView;
            GrdOrgPOSMachine.DataBind();
        }
    }
    protected void GrdOrgPOSMachine_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        GrdOrgPOSMachine.PageIndex = e.NewPageIndex;
        FillOrgPOSMachineGrid();
    }

    #endregion

    #region GrdSitePOSMachine

    protected void FillSitePOSMachineGrid()
    {
        bool isPopup = Request.QueryString["show_header"] != null && Request.QueryString["show_header"] != "1";

        bool isStakeholder = Session["IsStakeholder"] != null && Convert.ToBoolean(Session["IsStakeholder"]);
        bool isMasterAdmin = Session["IsMasterAdmin"] != null && Convert.ToBoolean(Session["IsMasterAdmin"]);
        bool isAdmin = Session["IsAdmin"] != null && Convert.ToBoolean(Session["IsAdmin"]);
        bool isAdminView = isStakeholder || isMasterAdmin || isAdmin;

        int siteID = Convert.ToInt32(Session["SiteID"]);
        int orgID = Session["OrgID"] == null ? 0 : Convert.ToInt32(Session["OrgID"]);


        DataTable dt = POSMachineDB.GetDataTable_AllInfo();
        dt.Columns.Add("bold", typeof(bool));
        for (int i = dt.Rows.Count - 1; i >= 0; i--)
        {
            if (dt.Rows[i]["site_site_id"] == DBNull.Value)
                dt.Rows.RemoveAt(i);
            else
                dt.Rows[i]["bold"] = !isPopup ? false : (isAdminView && dt.Rows[i]["site_site_id"] != DBNull.Value && siteID == Convert.ToInt32(dt.Rows[i]["site_site_id"])) || (!isAdminView && dt.Rows[i]["organisation_organisation_id"] != DBNull.Value && orgID == Convert.ToInt32(dt.Rows[i]["organisation_organisation_id"]));
        }

        Session["site_posmachines_data"] = dt;

        if (dt.Rows.Count > 0)
        {

            if (IsPostBack && Session["site_posmachines_sortexpression"] != null && Session["site_posmachines_sortexpression"].ToString().Length > 0)
            {
                DataView dataView = new DataView(dt);
                dataView.Sort = Session["site_posmachines_sortexpression"].ToString();
                GrdSitePOSMachine.DataSource = dataView;
            }
            else
            {
                GrdSitePOSMachine.DataSource = dt;
            }


            try
            {
                GrdSitePOSMachine.DataBind();
                GrdSitePOSMachine.PagerSettings.FirstPageText = "1";
                GrdSitePOSMachine.PagerSettings.LastPageText = GrdSitePOSMachine.PageCount.ToString();
                GrdSitePOSMachine.DataBind();
            }
            catch (Exception ex)
            {
                this.lblErrorMessage.Visible = true;
                this.lblErrorMessage.Text = ex.ToString();
            }
        }
        else
        {
            dt.Rows.Add(dt.NewRow());
            GrdSitePOSMachine.DataSource = dt;
            GrdSitePOSMachine.DataBind();

            int TotalColumns = GrdSitePOSMachine.Rows[0].Cells.Count;
            GrdSitePOSMachine.Rows[0].Cells.Clear();
            GrdSitePOSMachine.Rows[0].Cells.Add(new TableCell());
            GrdSitePOSMachine.Rows[0].Cells[0].ColumnSpan = TotalColumns;
            GrdSitePOSMachine.Rows[0].Cells[0].Text = "No Record Found";
        }
    }
    protected void GrdSitePOSMachine_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (!Utilities.IsDev() && e.Row.RowType != DataControlRowType.Pager)
            e.Row.Cells[0].CssClass = "hiddencol";
    }
    protected void GrdSitePOSMachine_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        DataTable sites = SiteDB.GetDataTable();

        DataTable dt_address_channel = Session["site_posmachines_data"] as DataTable;
        bool tblEmpty = (dt_address_channel.Rows.Count == 1 && dt_address_channel.Rows[0][0] == DBNull.Value);
        if (!tblEmpty && e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lblId = (Label)e.Row.FindControl("lblId");
            DataRow[] foundRows = dt_address_channel.Select("pm_pos_machine_id=" + lblId.Text);
            DataRow thisRow = foundRows[0];


            DropDownList ddlSite = (DropDownList)e.Row.FindControl("ddlSite");
            if (ddlSite != null)
            {
                ddlSite.DataSource = sites;
                ddlSite.DataTextField = "name";
                ddlSite.DataValueField = "entity_id";
                ddlSite.DataBind();
                ddlSite.SelectedValue = thisRow["pm_entity_id"].ToString();
            }

            Utilities.AddConfirmationBox(e);
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
                Utilities.SetEditRowBackColour(e, System.Drawing.Color.LightGoldenrodYellow);
        }
        if (e.Row.RowType == DataControlRowType.Footer)
        {
            DropDownList ddlSite = (DropDownList)e.Row.FindControl("ddlNewSite");
            ddlSite.DataSource = sites;
            ddlSite.DataBind();
        }
    }
    protected void GrdSitePOSMachine_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        GrdSitePOSMachine.EditIndex = -1;
        FillSitePOSMachineGrid();
    }
    protected void GrdSitePOSMachine_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        Label        lblId    = (Label)GrdSitePOSMachine.Rows[e.RowIndex].FindControl("lblId");
        DropDownList ddlSite  = (DropDownList)GrdSitePOSMachine.Rows[e.RowIndex].FindControl("ddlSite");
        TextBox      txtPOSID = (TextBox)GrdSitePOSMachine.Rows[e.RowIndex].FindControl("txtPOSID");

        POSMachineDB.Update(Convert.ToInt32(lblId.Text), Convert.ToInt32(ddlSite.SelectedValue), txtPOSID.Text);

        GrdSitePOSMachine.EditIndex = -1;
        FillSitePOSMachineGrid();
    }
    protected void GrdSitePOSMachine_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        Label lblId = (Label)GrdSitePOSMachine.Rows[e.RowIndex].FindControl("lblId");

        try
        {
            //POSMachineDB.Delete(Convert.ToInt32(lblId.Text));
        }
        catch (ForeignKeyConstraintException fkcEx)
        {
            if (Utilities.IsDev())
                SetErrorMessage("Can not delete because other records depend on this : " + fkcEx.Message);
            else
                SetErrorMessage("Can not delete because other records depend on this");
        }

        FillSitePOSMachineGrid();
    }
    protected void GrdSitePOSMachine_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName.Equals("Insert"))
        {
            DropDownList ddlSite  = (DropDownList)GrdSitePOSMachine.FooterRow.FindControl("ddlNewSite");
            TextBox      txtPOSID = (TextBox)GrdSitePOSMachine.FooterRow.FindControl("txtNewPOSID");

            POSMachineDB.Insert(Convert.ToInt32(ddlSite.SelectedValue), txtPOSID.Text);

            FillSitePOSMachineGrid();
        }
    }
    protected void GrdSitePOSMachine_RowEditing(object sender, GridViewEditEventArgs e)
    {
        GrdSitePOSMachine.EditIndex = e.NewEditIndex;
        FillSitePOSMachineGrid();
    }
    protected void GrdSitePOSMachine_Sorting(object sender, GridViewSortEventArgs e)
    {
        // dont allow sorting if in edit mode
        if (GrdSitePOSMachine.EditIndex >= 0)
            return;

        DataTable dataTable = Session["site_posmachines_data"] as DataTable;

        if (dataTable != null)
        {
            if (Session["site_posmachines_sortexpression"] == null)
                Session["site_posmachines_sortexpression"] = "";

            DataView dataView = new DataView(dataTable);
            string[] sortData = Session["site_posmachines_sortexpression"].ToString().Trim().Split(' ');
            string newSortExpr = (e.SortExpression == sortData[0] && sortData[1] == "ASC") ? "DESC" : "ASC";
            dataView.Sort = e.SortExpression + " " + newSortExpr;
            Session["site_posmachines_sortexpression"] = e.SortExpression + " " + newSortExpr;

            GrdSitePOSMachine.DataSource = dataView;
            GrdSitePOSMachine.DataBind();
        }
    }
    protected void GrdSitePOSMachine_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        GrdSitePOSMachine.PageIndex = e.NewPageIndex;
        FillSitePOSMachineGrid();
    }

    #endregion

    #region HideTableAndSetErrorMessage, SetErrorMessage, HideErrorMessag

    private void HideTableAndSetErrorMessage(string errMsg = "", string details = "")
    {
        SetErrorMessage(errMsg, details);
    }
    private void SetErrorMessage(string errMsg = "", string details = "")
    {
        if (errMsg.Contains(Environment.NewLine))
            errMsg = errMsg.Replace(Environment.NewLine, "<br />");

        // double escape so shows up literally on webpage for 'alert' message
        string detailsToDisplay = (details.Length == 0 ? "" : " <a href=\"#\" onclick=\"alert('" + details.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("'", "\\'").Replace("\"", "\\'") + "'); return false;\">Details</a>");

        lblErrorMessage.Visible = true;
        if (errMsg != null && errMsg.Length > 0)
            lblErrorMessage.Text = errMsg + detailsToDisplay + "<br />";
        else
            lblErrorMessage.Text = "An error has occurred. Plase contact the system administrator. " + detailsToDisplay + "<br />";
    }
    private void HideErrorMessage()
    {
        lblErrorMessage.Visible = false;
        lblErrorMessage.Text = "";
    }

    #endregion

}
