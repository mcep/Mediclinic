using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Text.RegularExpressions;

public partial class DoBooking : System.Web.UI.Page
{

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
            Utilities.SetNoCache(Response);

        try
        {
            if (GetUrlParamType() == UrlParamType.Add)
                AddBooking();
            else if (GetUrlParamType() == UrlParamType.AddRecurring)
                AddRecurringBooking();
            else if (GetUrlParamType() == UrlParamType.Edit)
                EditBooking();
            else if (GetUrlParamType() == UrlParamType.Delete)
                ConfirmOrDeleteOrCancelBooking(UrlParamType.Delete);
            else if (GetUrlParamType() == UrlParamType.Confirm)
                ConfirmOrDeleteOrCancelBooking(UrlParamType.Confirm);
            else if (GetUrlParamType() == UrlParamType.Unconfirm)
                ConfirmOrDeleteOrCancelBooking(UrlParamType.Unconfirm);
            else if (GetUrlParamType() == UrlParamType.Cancel)
                ConfirmOrDeleteOrCancelBooking(UrlParamType.Cancel);
            else if (GetUrlParamType() == UrlParamType.Deceased)
                ConfirmOrDeleteOrCancelBooking(UrlParamType.Deceased);
            else
                SetErrorMessage("Unknown type");
        }
        catch (CustomMessageException ex)
        {
            SetErrorMessage(Utilities.IsDev() ? ex.ToString() : ex.Message);
        }
    }

    protected void EditBooking()
    {
        UrlReturnPage returnPage = GetUrlReturnPage();


        string booking_id       = Request.QueryString["edit_booking_id"];

        string start_datetime   = Request.QueryString["start_datetime"];
        string end_datetime     = Request.QueryString["end_datetime"];
        string org_id           = Request.QueryString["org"];
        string staff_id         = Request.QueryString["staff"];
        string offering_id      = Request.QueryString["offering"];
        string is_confirmed     = Request.QueryString["confirmed"];
        string page_return_date = Request.QueryString["page_return_date"];
        string edit_reason_id   = Request.QueryString["edit_reason_id"];

        string show_unavailable_staff = Request.QueryString["show_unavailable_staff"];
        string is_collapsed           = Request.QueryString["is_collapsed"];


        string patient_id  = null;
        string provider_id = null;
        string clinic_id   = null;


        UrlBookingScrType urlBookingScrType = GetUrlBookingScrType();
        if (returnPage == UrlReturnPage.Bookings)
        {
            string url_booking_scr_type = null;

            if (urlBookingScrType == UrlBookingScrType.Patient)
            {
                patient_id = Request.QueryString["patient"];
                url_booking_scr_type = "&patient=" + patient_id;
            }
            else if (urlBookingScrType == UrlBookingScrType.Provider)
            {
                provider_id = Request.QueryString["provider"];
                url_booking_scr_type = "&provider=" + provider_id;
            }
            else if (urlBookingScrType == UrlBookingScrType.Clinic)
            {
                clinic_id = Request.QueryString["clinic"];
                url_booking_scr_type = "&clinic=" + clinic_id;
            }
            else if (urlBookingScrType == UrlBookingScrType.AgedCare)
            {
                clinic_id = Request.QueryString["agedcare"];
                url_booking_scr_type = "&agedcare=" + clinic_id;
            }
            else
                throw new CustomMessageException();

            lnkBackToBookingSheet.PostBackUrl = "~/Bookings.aspx?type=" + Request.QueryString["booking_scr_type"] + url_booking_scr_type + "&date=" + page_return_date + "&org=" + org_id + "&staff=" + staff_id + "&offering=" + offering_id;
        }
        else
        {
            string str_ndays = Request.QueryString["ndays"];
            string org_ids = Request.QueryString["orgs"];
            int ndays;
            if (str_ndays == null || !int.TryParse(str_ndays, out ndays) ||
                org_ids == null || !Regex.IsMatch(org_ids, @"^[\d_]+$"))
                throw new CustomMessageException();

            lnkBackToBookingSheet.PostBackUrl = "~/BookingsForClinic.aspx?date=" + page_return_date + "&orgs=" + org_ids + (ndays <= 0 ? "" : "&ndays=" + ndays) + "&staff=" + staff_id + "&offering=" + offering_id + (show_unavailable_staff == "-1" ? "" : "&show_unavailable_staff=" + show_unavailable_staff) + (is_collapsed == "-1" ? "" : "&is_collapsed=" + is_collapsed);
        }


        if (Request.QueryString["scroll_pos"] != null)
            lnkBackToBookingSheet.PostBackUrl += "&scroll_pos=" + Request.QueryString["scroll_pos"];

        if (booking_id == null   || !Regex.IsMatch(booking_id,   @"^\d+$")   ||
            start_datetime == null   || !Regex.IsMatch(start_datetime,   @"^\d{4}_\d{2}_\d{2}_\d{4}$") ||
            end_datetime   == null   || !Regex.IsMatch(end_datetime,     @"^\d{4}_\d{2}_\d{2}_\d{4}$") ||
            org_id      == null  || !Regex.IsMatch(org_id,       @"^\d+$")   ||
            staff_id    == null  || !Regex.IsMatch(staff_id,     @"^\d+$")   ||
            offering_id == null  || !Regex.IsMatch(offering_id,  @"^\d+$")   ||
            (urlBookingScrType == UrlBookingScrType.Patient &&  (patient_id  == null || !Regex.IsMatch(patient_id,  @"^\d+$"))) ||
            (urlBookingScrType == UrlBookingScrType.Provider && (provider_id == null || !Regex.IsMatch(provider_id, @"^\d+$"))) ||
            (urlBookingScrType == UrlBookingScrType.Clinic &&   (clinic_id   == null || !Regex.IsMatch(clinic_id,   @"^\d+$"))) ||
            (is_confirmed != "0" && is_confirmed != "1") ||
            page_return_date == null || !Regex.IsMatch(page_return_date, @"^\d{4}_\d{2}_\d{2}$") ||
            edit_reason_id == null   || !Regex.IsMatch(edit_reason_id,   @"^\d+$"))
                throw new CustomMessageException();

        Booking      booking   = BookingDB.GetByID(Convert.ToInt32(booking_id));
        Organisation org       = OrganisationDB.GetByID(Convert.ToInt32(org_id));
        Staff        staff     = StaffDB.GetByID(Convert.ToInt32(staff_id));
        Offering     offering  = OfferingDB.GetByID(Convert.ToInt32(offering_id));
        bool         confirmed = is_confirmed == "1";
        Patient      patient   = PatientDB.GetByID(Convert.ToInt32(patient_id));
        Staff        provider  = StaffDB.GetByID(Convert.ToInt32(provider_id));
        Organisation clinic    = OrganisationDB.GetByID(Convert.ToInt32(clinic_id));

        if ( (urlBookingScrType == UrlBookingScrType.Patient  && patient  == null) ||
             (urlBookingScrType == UrlBookingScrType.Provider && provider == null) ||
             (urlBookingScrType == UrlBookingScrType.Clinic   && clinic   == null) ||
             org == null || staff == null || offering == null || booking == null)
            throw new CustomMessageException();


        DateTime startDateTime = ConvertStringToDateTime(start_datetime);
        DateTime endDateTime   = ConvertStringToDateTime(end_datetime); 

        // check booking is valid ie no overlapping with current bookings
        Booking[] bookings = BookingDB.GetToCheckOverlap_OneTime(startDateTime, endDateTime, staff, returnPage == UrlReturnPage.BookingsForClinic ? null : org, booking.BookingTypeID == 342, true, false);
        if (Booking.HasOverlap(bookings, startDateTime, endDateTime, booking))
        {
            string fromTime = startDateTime.Hour.ToString().PadLeft(2, '0') + ":" + startDateTime.Minute.ToString().PadLeft(2, '0');
            string toTime   = endDateTime.Hour.ToString().PadLeft(2, '0')   + ":" + endDateTime.Minute.ToString().PadLeft(2, '0');
            throw new CustomMessageException("Can not book " + startDateTime.ToString(@"ddd MMM d") + " " + fromTime + "-" + toTime + " due to overlap with existing booking");
        }

        int booking_confirmed_by_type_id = !confirmed ? -1 : 1;
        int confirmedBy = !confirmed ? -1 :
            (booking.ConfirmedBy == null ? Convert.ToInt32(Session["StaffID"]) : booking.ConfirmedBy.StaffID);
        DateTime dateConfirmed = !confirmed ? DateTime.MinValue :
            (booking.ConfirmedBy == null ? DateTime.Now : booking.DateConfirmed);

        if (!RegisterPatientDB.IsPatientRegisteredToOrg(booking.Patient.PatientID, org.OrganisationID))
            RegisterPatientDB.Insert(org.OrganisationID, patient.PatientID);

        BookingChangeHistoryDB.Insert(booking.BookingID, Convert.ToInt32(Session["StaffID"]), Convert.ToInt32(edit_reason_id), booking.DateStart);
        BookingDB.Update(booking.BookingID, startDateTime, endDateTime, org.OrganisationID, staff.StaffID, booking.Patient == null ? -1 : booking.Patient.PatientID, offering.OfferingID,
                    booking.BookingTypeID, booking.BookingStatus.ID, -1, booking.AddedBy.StaffID, booking_confirmed_by_type_id, confirmedBy, dateConfirmed,
                    booking.DeletedBy == null ? -1 : booking.DeletedBy.StaffID, booking.DateDeleted, booking.IsPatientMissedAppt, booking.IsProviderMissedAppt, booking.IsEmergency, booking.IsRecurring, booking.RecurringDayOfWeek, booking.RecurringStartTime, booking.RecurringEndTime);

        if (booking.ArrivalTime != DateTime.MinValue && booking.DateStart != startDateTime)
            BookingDB.RemoveArrivalTime(booking.BookingID);

        Response.Redirect(lnkBackToBookingSheet.PostBackUrl);
    }

    protected void ConfirmOrDeleteOrCancelBooking(UrlParamType urlParamType)
    {
        UrlReturnPage returnPage = GetUrlReturnPage();


        string booking_id       = Request.QueryString["booking_id"];

        string org_id           = Request.QueryString["org"];
        string staff_id         = Request.QueryString["staff"];
        string offering_id      = Request.QueryString["offering"];
        string page_return_date = Request.QueryString["page_return_date"];

        string show_unavailable_staff = Request.QueryString["show_unavailable_staff"];
        string is_collapsed           = Request.QueryString["is_collapsed"];


        string patient_id  = null;
        string provider_id = null;
        string clinic_id   = null;

        UrlBookingScrType urlBookingScrType = GetUrlBookingScrType(); 
        if (returnPage == UrlReturnPage.Bookings)
        {
            string url_booking_scr_type = null;

            if (urlBookingScrType == UrlBookingScrType.Patient)
            {
                patient_id = Request.QueryString["patient"];
                url_booking_scr_type = "&patient=" + patient_id;
            }
            else if (urlBookingScrType == UrlBookingScrType.Provider)
            {
                provider_id = Request.QueryString["provider"];
                url_booking_scr_type = "&provider=" + provider_id;
            }
            else if (urlBookingScrType == UrlBookingScrType.Clinic)
            {
                clinic_id = Request.QueryString["clinic"];
                url_booking_scr_type = "&clinic=" + clinic_id;
            }
            else if (urlBookingScrType == UrlBookingScrType.AgedCare)
            {
                clinic_id = Request.QueryString["agedcare"];
                url_booking_scr_type = "&agedcare=" + clinic_id;
            }
            else
                throw new CustomMessageException();

            lnkBackToBookingSheet.PostBackUrl = "~/Bookings.aspx?type=" + Request.QueryString["booking_scr_type"] + url_booking_scr_type + "&date=" + page_return_date + "&org=" + org_id + "&staff=" + staff_id + "&offering=" + offering_id;
        }
        else if (returnPage == UrlReturnPage.BookingsForClinic)
        {
            string str_ndays = Request.QueryString["ndays"];
            string org_ids = Request.QueryString["orgs"];
            int ndays;
            if (str_ndays == null || !int.TryParse(str_ndays, out ndays) ||
                org_ids == null || !Regex.IsMatch(org_ids, @"^[\d_]+$"))
                throw new CustomMessageException();

            lnkBackToBookingSheet.PostBackUrl = "~/BookingsForClinic.aspx?date=" + page_return_date + "&orgs=" + org_ids + (ndays <= 0 ? "" : "&ndays=" + ndays) + "&staff=" + staff_id + "&offering=" + offering_id + (show_unavailable_staff == "-1" ? "" : "&show_unavailable_staff=" + show_unavailable_staff) + (is_collapsed == "-1" ? "" : "&is_collapsed=" + is_collapsed);
        }

        if (Request.QueryString["scroll_pos"] != null)
            lnkBackToBookingSheet.PostBackUrl += "&scroll_pos=" + Request.QueryString["scroll_pos"];

        if (booking_id == null       || !Regex.IsMatch(booking_id,  @"^\d+$")    ||
            org_id           == null || !Regex.IsMatch(org_id,      @"^\-?\d+$") ||
            staff_id         == null || !Regex.IsMatch(staff_id,    @"^\-?\d+$") ||
            offering_id      == null || !Regex.IsMatch(offering_id, @"^\-?\d+$") ||
            (urlBookingScrType == UrlBookingScrType.Patient &&  (patient_id  == null || !Regex.IsMatch(patient_id,  @"^\d+$"))) ||
            (urlBookingScrType == UrlBookingScrType.Provider && (provider_id == null || !Regex.IsMatch(provider_id, @"^\d+$"))) ||
            (urlBookingScrType == UrlBookingScrType.Clinic &&   (clinic_id   == null || !Regex.IsMatch(clinic_id,   @"^\d+$"))) ||
            page_return_date == null || !Regex.IsMatch(page_return_date, @"^\d{4}_\d{2}_\d{2}$"))
                throw new CustomMessageException();

        Organisation org      = OrganisationDB.GetByID(Convert.ToInt32(org_id));
        Staff        staff    = StaffDB.GetByID(Convert.ToInt32(staff_id));
        Offering     offering = OfferingDB.GetByID(Convert.ToInt32(offering_id));
        Booking      booking  = BookingDB.GetByID(Convert.ToInt32(booking_id));
        Patient      patient  = PatientDB.GetByID(Convert.ToInt32(patient_id));
        Staff        provider = StaffDB.GetByID(Convert.ToInt32(provider_id));


        //if (org == null || staff == null || offering == null || booking == null)
        if (booking == null)
            throw new CustomMessageException();

        if (urlParamType == UrlParamType.Delete)
            BookingDB.UpdateSetDeleted(booking.BookingID,   Convert.ToInt32(Session["StaffID"]));
        else if (urlParamType == UrlParamType.Confirm)
            BookingDB.UpdateSetConfirmed(booking.BookingID, 1, Convert.ToInt32(Session["StaffID"]));
        else if (urlParamType == UrlParamType.Unconfirm)
            BookingDB.UpdateSetUnconfirmed(booking.BookingID);
        else if (urlParamType == UrlParamType.Cancel)
            BookingDB.UpdateSetCancelledByPatient(booking.BookingID);
        else if (urlParamType == UrlParamType.Deceased)
        {
            PatientDB.UpdateDeceased(patient.PatientID, Convert.ToInt32(Session["StaffID"]));
            BookingDB.UpdateSetDeceasedByPatient(booking.BookingID);
        }

        Response.Redirect(lnkBackToBookingSheet.PostBackUrl);
    }

    protected void AddBooking()
    {
        UrlReturnPage returnPage = GetUrlReturnPage();

        // booking_date=2012_04_06&start_datetime=0800&end_datetime=0820&org=3&staff=1&offering=3&page_return_date=2012_4_5
        string start_datetime   = Request.QueryString["start_datetime"];
        string end_datetime     = Request.QueryString["end_datetime"];
        string org_id           = Request.QueryString["org"];
        string staff_id         = Request.QueryString["staff"];
        string offering_id      = Request.QueryString["offering"];
        string is_confirmed     = Request.QueryString["confirmed"];
        string page_return_date = Request.QueryString["page_return_date"];

        string booking_type_id  = Request.QueryString["booking_type_id"];

        string show_unavailable_staff = Request.QueryString["show_unavailable_staff"];
        string is_collapsed           = Request.QueryString["is_collapsed"];


        string patient_id  = null;
        string provider_id = null;
        string clinic_id   = null;

        if (returnPage == UrlReturnPage.Bookings)
        {
            string url_booking_scr_type = null;

            UrlBookingScrType urlBookingScrType = GetUrlBookingScrType();
            if (urlBookingScrType == UrlBookingScrType.Patient)
            {
                patient_id = Request.QueryString["patient"];
                url_booking_scr_type = "&patient=" + patient_id;
            }
            else if (urlBookingScrType == UrlBookingScrType.Provider)
            {
                provider_id = Request.QueryString["provider"];
                url_booking_scr_type = "&provider=" + provider_id;
            }
            else if (urlBookingScrType == UrlBookingScrType.Clinic)
            {
                clinic_id = Request.QueryString["clinic"];
                url_booking_scr_type = "&clinic=" + clinic_id;
            }
            else if (urlBookingScrType == UrlBookingScrType.AgedCare)
            {
                clinic_id = Request.QueryString["agedcare"];
                url_booking_scr_type = "&agedcare=" + clinic_id;
            }
            else
                throw new CustomMessageException();

            lnkBackToBookingSheet.PostBackUrl = "~/Bookings.aspx?type=" + Request.QueryString["booking_scr_type"] + url_booking_scr_type + "&date=" + page_return_date + "&org=" + org_id + "&staff=" + staff_id + "&offering=" + offering_id;
        }
        else if (returnPage == UrlReturnPage.BookingsForClinic)
        {
            patient_id = Request.QueryString["patient"];

            string str_ndays = Request.QueryString["ndays"];
            string org_ids   = Request.QueryString["orgs"];
            int ndays;
            if (str_ndays == null || !int.TryParse(str_ndays, out ndays) ||
                org_ids   == null || !Regex.IsMatch(org_ids, @"^[\d_]+$"))
                throw new CustomMessageException();

            lnkBackToBookingSheet.PostBackUrl = "~/BookingsForClinic.aspx?patient=" + patient_id + "&date=" + page_return_date + "&orgs=" + org_ids + (ndays <= 0 ? "" : "&ndays=" + ndays) + "&staff=" + staff_id + "&offering=" + offering_id + (show_unavailable_staff == "-1" ? "" : "&show_unavailable_staff=" + show_unavailable_staff) + (is_collapsed == "-1" ? "" : "&is_collapsed=" + is_collapsed);
        }


        if (Request.QueryString["scroll_pos"] != null)
            lnkBackToBookingSheet.PostBackUrl += "&scroll_pos=" + Request.QueryString["scroll_pos"];

        if (returnPage == UrlReturnPage.Bookings)
            patient_id = (GetUrlBookingScrType() == UrlBookingScrType.Patient) ? Request.QueryString["patient"] : "-1";
        else if (returnPage == UrlReturnPage.BookingsForClinic)
            patient_id = Request.QueryString["patient"] == null ? "-1" : Request.QueryString["patient"];


        if (start_datetime == null || !Regex.IsMatch(start_datetime,   @"^\d{4}_\d{2}_\d{2}_\d{4}$") ||
            end_datetime   == null || !Regex.IsMatch(end_datetime,     @"^\d{4}_\d{2}_\d{2}_\d{4}$") ||
            patient_id     == null || !Regex.IsMatch(patient_id,   @"^\-?\d+$") ||
            org_id         == null || !Regex.IsMatch(org_id,       @"^\-?\d+$") ||
            staff_id       == null || !Regex.IsMatch(staff_id,     @"^\-?\d+$") ||
            offering_id    == null || !Regex.IsMatch(offering_id,  @"^\-?\d+$") ||
            (is_confirmed != "0" && is_confirmed != "1") ||
            page_return_date == null || !Regex.IsMatch(page_return_date, @"^\d{4}_\d{2}_\d{2}$") ||
            booking_type_id  == null || (booking_type_id != "34" && booking_type_id != "340" && booking_type_id != "341" && booking_type_id != "342"))
                throw new CustomMessageException();

        Patient      patient   = PatientDB.GetByID(Convert.ToInt32(patient_id));
        Organisation org       = OrganisationDB.GetByID(Convert.ToInt32(org_id));
        Staff        staff     = StaffDB.GetByID(Convert.ToInt32(staff_id));
        Offering     offering  = OfferingDB.GetByID(Convert.ToInt32(offering_id));
        bool         confirmed = is_confirmed == "1";

        if ((org_id != "0" && org == null) || (staff_id != "-1" && staff == null) || (offering_id != "-1" && offering == null))
            throw new CustomMessageException();


        DateTime startDateTime = ConvertStringToDateTime(start_datetime);
        DateTime endDateTime   = ConvertStringToDateTime(end_datetime);


        int booking_confirmed_by_type_id = !confirmed ? -1 : 1;
        int confirmedBy = confirmed ? Convert.ToInt32(Session["StaffID"]) : -1;
        DateTime dateConfirmed = confirmed ? DateTime.Now : DateTime.MinValue;

        int bookingType = Convert.ToInt32(booking_type_id);
        if (bookingType == 34)
        {
            // check booking is valid ie no overlapping with current bookings
            Booking[] bookings = BookingDB.GetToCheckOverlap_OneTime(startDateTime, endDateTime, staff, returnPage == UrlReturnPage.BookingsForClinic ? null : org, bookingType == 342, true, false);
            if (Booking.HasOverlap(bookings, startDateTime, endDateTime))
            {
                string fromTime = startDateTime.Hour.ToString().PadLeft(2, '0') + ":" + startDateTime.Minute.ToString().PadLeft(2, '0');
                string toTime = endDateTime.Hour.ToString().PadLeft(2, '0') + ":" + endDateTime.Minute.ToString().PadLeft(2, '0');
                throw new CustomMessageException("Can not book " + startDateTime.ToString(@"ddd MMM d") + " " + fromTime + "-" + toTime + " due to overlap with existing booking");
            }

            if (!RegisterPatientDB.IsPatientRegisteredToOrg(patient.PatientID, org.OrganisationID))
                RegisterPatientDB.Insert(org.OrganisationID, patient.PatientID);

            BookingDB.Insert(startDateTime, endDateTime, org == null ? 0 : org.OrganisationID, staff == null ? 0 : staff.StaffID, patient == null ? -1 : patient.PatientID, offering == null ? -1 : offering.OfferingID,
                     bookingType, 0, -1, Convert.ToInt32(Session["StaffID"]), booking_confirmed_by_type_id, confirmedBy, dateConfirmed, -1, DateTime.MinValue, false, false, false, false, startDateTime.DayOfWeek, TimeSpan.Zero, TimeSpan.Zero);
        }
        else
        {
            // make sepertae booking for each day so that they can delete individual days
            int nDays = (int)endDateTime.Subtract(startDateTime).TotalHours / 24;
            for (int i = 0; i < nDays; i++)
            {
                // check if have booking for this day already
                Booking[] bookings = BookingDB.GetUnavailableDaysByStartEndDate(startDateTime.AddDays(i), startDateTime.AddDays(i+1), staff, org);
                if (bookings.Length == 0)
                    BookingDB.Insert(startDateTime.AddDays(i), startDateTime.AddDays(i).Date.AddHours(23).AddMinutes(59).AddSeconds(59), org == null ? 0 : org.OrganisationID, staff == null ? -1 : staff.StaffID, patient == null ? -1 : patient.PatientID, offering == null ? -1 : offering.OfferingID,
                             bookingType, 0, -1, Convert.ToInt32(Session["StaffID"]), booking_confirmed_by_type_id, confirmedBy, dateConfirmed, -1, DateTime.MinValue, false, false, false, false, startDateTime.DayOfWeek, TimeSpan.Zero, TimeSpan.Zero);
            }
        }

        Response.Redirect(lnkBackToBookingSheet.PostBackUrl);
    }

    protected void AddRecurringBooking()
    {
        UrlReturnPage returnPage = GetUrlReturnPage();

        // booking_date=2012_04_06&start_datetime=0800&end_datetime=0820&org=3&staff=1&offering=3&page_return_date=2012_4_5
        string start_datetime    = Request.QueryString["start_datetime"];
        string end_datetime      = Request.QueryString["end_datetime"];

        string start_time        = Request.QueryString["start_time"];
        string end_time          = Request.QueryString["end_time"];
        string days              = Request.QueryString["days"];

        string org_id            = Request.QueryString["org"];
        string staff_id          = Request.QueryString["staff"];
        string offering_id       = Request.QueryString["offering"];
        string is_confirmed      = Request.QueryString["confirmed"];
        string page_return_date  = Request.QueryString["page_return_date"];

        string booking_type_id   = Request.QueryString["booking_type_id"];

        string create_as_series  = Request.QueryString["create_as_series"];

        string every_n_weeks     = Request.QueryString["every_n_weeks"];

        string unavailability_reason_id = Request.QueryString["unavailability_reason_id"];

        string show_unavailable_staff = Request.QueryString["show_unavailable_staff"];
        string is_collapsed           = Request.QueryString["is_collapsed"];


        string patient_id  = null;
        string provider_id = null;
        string clinic_id   = null;

        if (returnPage == UrlReturnPage.Bookings)
        {
            string url_booking_scr_type = null;

            UrlBookingScrType urlBookingScrType = GetUrlBookingScrType();
            if (urlBookingScrType == UrlBookingScrType.Patient)
            {
                patient_id = Request.QueryString["patient"];
                url_booking_scr_type = "&patient=" + patient_id;
            }
            else if (urlBookingScrType == UrlBookingScrType.Provider)
            {
                provider_id = Request.QueryString["provider"];
                url_booking_scr_type = "&provider=" + provider_id;
            }
            else if (urlBookingScrType == UrlBookingScrType.Clinic)
            {
                clinic_id = Request.QueryString["clinic"];
                url_booking_scr_type = "&clinic=" + clinic_id;
            }
            else if (urlBookingScrType == UrlBookingScrType.AgedCare)
            {
                clinic_id = Request.QueryString["agedcare"];
                url_booking_scr_type = "&agedcare=" + clinic_id;
            }
            else
                throw new CustomMessageException();

            lnkBackToBookingSheet.PostBackUrl = "~/Bookings.aspx?type=" + Request.QueryString["booking_scr_type"] + url_booking_scr_type + "&date=" + page_return_date + "&org=" + org_id + "&staff=" + staff_id + "&offering=" + offering_id;
        }
        else if (returnPage == UrlReturnPage.BookingsForClinic)
        {
            patient_id = Request.QueryString["patient"];

            string str_ndays              = Request.QueryString["ndays"];
            string org_ids                = Request.QueryString["orgs"];

            int ndays;
            if (
                str_ndays == null || !int.TryParse(str_ndays, out ndays) ||
                org_ids   == null || !Regex.IsMatch(org_ids, @"^[\d_]+$") ||
                (show_unavailable_staff != null && show_unavailable_staff != "-1" && show_unavailable_staff != "0" && show_unavailable_staff != "1") ||
                (is_collapsed != null && is_collapsed != "-1" && is_collapsed != "0" && is_collapsed != "1")
                )
                throw new CustomMessageException();

            lnkBackToBookingSheet.PostBackUrl = "~/BookingsForClinic.aspx?patient=" + patient_id + "&date=" + page_return_date + "&orgs=" + org_ids + (ndays <= 0 ? "" : "&ndays=" + ndays) + "&staff=" + staff_id + "&offering=" + offering_id + (show_unavailable_staff == "-1" ? "" : "&show_unavailable_staff=" + show_unavailable_staff) + (is_collapsed == "-1" ? "" : "&is_collapsed=" + is_collapsed);
        }


        if (Request.QueryString["scroll_pos"] != null)
            lnkBackToBookingSheet.PostBackUrl += "&scroll_pos=" + Request.QueryString["scroll_pos"];

        if (returnPage == UrlReturnPage.Bookings)
            patient_id = (GetUrlBookingScrType() == UrlBookingScrType.Patient) ? Request.QueryString["patient"] : "-1";
        else if (returnPage == UrlReturnPage.BookingsForClinic)
            patient_id = Request.QueryString["patient"] == null ? "-1" : Request.QueryString["patient"];


        if (start_datetime   == null ||  !Regex.IsMatch(start_datetime,   @"^\d{4}_\d{2}_\d{2}_\d{4}$") ||
            end_datetime     == null || (!Regex.IsMatch(end_datetime,     @"^\d{4}_\d{2}_\d{2}_\d{4}$") && end_datetime != "NULL") ||
            start_time       == null ||  !Regex.IsMatch(start_time,       @"^\d{4}$")  ||
            end_time         == null ||  !Regex.IsMatch(end_time,         @"^\d{4}$")  ||
            days             == null ||  !Regex.IsMatch(days,             @"^\d{7}$")  ||
            patient_id       == null ||  !Regex.IsMatch(patient_id,       @"^\-?\d+$") ||
            org_id           == null ||  !Regex.IsMatch(org_id,           @"^\-?\d+$") ||
            staff_id         == null ||  !Regex.IsMatch(staff_id,         @"^\-?\d+$") ||
            offering_id      == null ||  !Regex.IsMatch(offering_id,      @"^\-?\d+$") ||
            (is_confirmed != "0" && is_confirmed != "1") ||
            unavailability_reason_id == null || !Regex.IsMatch(unavailability_reason_id, @"^\-?\d+$") ||
            page_return_date == null ||  !Regex.IsMatch(page_return_date, @"^\d{4}_\d{2}_\d{2}$") ||
            booking_type_id  == null || (booking_type_id != "34" && booking_type_id != "340" && booking_type_id != "341" && booking_type_id != "342"))
                throw new CustomMessageException();

        Patient      patient   = PatientDB.GetByID(Convert.ToInt32(patient_id));
        Organisation org       = OrganisationDB.GetByID(Convert.ToInt32(org_id));
        Staff        staff     = StaffDB.GetByID(Convert.ToInt32(staff_id));
        Offering     offering  = OfferingDB.GetByID(Convert.ToInt32(offering_id));
        bool         confirmed = is_confirmed == "1";

        if ((org_id != "0" && org == null) || (staff_id != "-1" && staff == null) || (offering_id != "-1" && offering == null))
            throw new CustomMessageException();


        DateTime startDateTime = ConvertStringToDateTime(start_datetime);
        DateTime endDateTime   = ConvertStringToDateTime(end_datetime); 

        TimeSpan startTime     = ConvertStringToTimeSpan(start_time);
        TimeSpan endTime       = ConvertStringToTimeSpan(end_time);
        if (endTime == new TimeSpan(23, 59, 0))
            endTime = new TimeSpan(23, 59, 59);


        int booking_confirmed_by_type_id = !confirmed ? -1 : 1;
        int confirmedBy = confirmed ? Convert.ToInt32(Session["StaffID"]) : -1;
        DateTime dateConfirmed = confirmed ? DateTime.Now : DateTime.MinValue;

        int bookingType = Convert.ToInt32(booking_type_id);
        if (bookingType == 34)
        {

            // this has not been tested!!!
            throw new CustomMessageException();
            


            /*
            // check booking is valid ie no overlapping with current bookings
            Booking[] bookings = BookingDB.GetToCheckOverlap_Recurring(startDateTime, endDateTime, startTime, endTime, days, staff, returnPage == UrlReturnPage.BookingsForClinic ? null : org, bookingType == 342, false);
            if (Booking.HasOverlap(bookings, startDateTime, endDateTime, days, startTime, endTime))
            {
                string fromTime = startDateTime.Hour.ToString().PadLeft(2, '0') + ":" + startDateTime.Minute.ToString().PadLeft(2, '0');
                string toTime = endDateTime.Hour.ToString().PadLeft(2, '0') + ":" + endDateTime.Minute.ToString().PadLeft(2, '0');
                throw new CustomMessageException("Can not book " + startDateTime.ToString(@"ddd MMM d") + " " + fromTime + "-" + toTime + " due to overlap with existing booking");
            }

            //BookingDB.Insert(startDateTime, endDateTime, org == null ? 0 : org.OrganisationID, staff == null ? 0 : staff.StaffID, patient == null ? -1 : patient.PatientID, offering == null ? -1 : offering.OfferingID,
            //         bookingType, 0, Convert.ToInt32(Session["StaffID"]), confirmedBy, dateConfirmed, -1, DateTime.MinValue, false, false, false, true, startDateTime.DayOfWeek, TimeSpan.Zero, TimeSpan.Zero);

            // MAKE BOOKING FOR EACH DAY!
            for (int i = 0; i < 7; i++)
            {
                if (days[i] != '1')
                    continue;
                DayOfWeek dayOfWeek = WeekDayDB.GetDayOfWeek(i + 1);
                BookingDB.Insert(startDateTime, endDateTime, org == null ? 0 : org.OrganisationID, staff == null ? 0 : staff.StaffID, patient == null ? -1 : patient.PatientID, offering == null ? -1 : offering.OfferingID,
                         bookingType, 0, Convert.ToInt32(Session["StaffID"]), confirmedBy, dateConfirmed, -1, DateTime.MinValue, false, false, false, true, dayOfWeek, startTime, endTime);
            }

            */
        }
        else
        {
            //// make seperate booking for each day so that they can delete individual days
            //int nDays = (int)endDateTime.Subtract(startDateTime).TotalHours / 24;
            //for (int i = 0; i < nDays; i++)
            //{
            //    // check if have booking for this day already
            //    Booking[] bookings = BookingDB.GetUnavailableDaysByStartEndDate(startDateTime.AddDays(i), startDateTime.AddDays(i+1), staff, org);
            //    if (bookings.Length == 0)
            //        BookingDB.Insert(startDateTime.AddDays(i), startDateTime.AddDays(i+1), org == null ? 0 : org.OrganisationID, staff == null ? -1 : staff.StaffID, patient == null ? -1 : patient.PatientID, offering == null ? -1 : offering.OfferingID,
            //                 bookingType, 0, Convert.ToInt32(Session["StaffID"]), confirmedBy, dateConfirmed, -1, DateTime.MinValue, false, false, false, true, startDateTime.DayOfWeek, TimeSpan.Zero, TimeSpan.Zero);
            //}


            int everyNWeeks = every_n_weeks == null ? 1 : Convert.ToInt32(every_n_weeks);


            // check booking is valid ie no overlapping with current bookings
            Booking[] bookings = BookingDB.GetToCheckOverlap_Recurring(startDateTime, endDateTime, startTime, endTime, days, staff, returnPage == UrlReturnPage.BookingsForClinic && (bookingType != 342 && bookingType != 341) ? null : org, bookingType == 342, bookingType != 341, false, true);
            Booking clash = Booking.HasOverlap(bookings, startDateTime, endDateTime, days, startTime, endTime, everyNWeeks);
            if (clash != null)
            {
                string fromTime  = startDateTime.Hour.ToString().PadLeft(2, '0') + ":" + startDateTime.Minute.ToString().PadLeft(2, '0');
                string toTime    = endDateTime.Hour.ToString().PadLeft(2, '0') + ":" + endDateTime.Minute.ToString().PadLeft(2, '0');
                bool   isFullDay = startDateTime.Hour == 0 && startDateTime.Minute == 0 && endDateTime.Hour == 0 && endDateTime.Minute == 0;
                throw new CustomMessageException("Can not book " + startDateTime.ToString(@"ddd MMM d") + (isFullDay ? "" : " " + fromTime + "-" + toTime) + " due to overlap with existing booking on " + clash.DateStart.ToString(@"ddd MMM d ") + clash.DateStart.ToString("h:mm") + (clash.DateStart.Hour < 12 ? "am" : "pm"));
            }




            // MAKE BOOKING FOR EACH WEEK DAY!
            for (int i = 0; i < 7; i++)
            {
                if (days[i] != '1')
                    continue;
                DayOfWeek dayOfWeek = WeekDayDB.GetDayOfWeek(i + 1);


                if (create_as_series == "1")
                {
                    DateTime dateStart = startDateTime;
                    while (dateStart.DayOfWeek != dayOfWeek)
                        dateStart = dateStart.AddDays(1);
                    DateTime dateEnd = endDateTime;
                    while (dateEnd.DayOfWeek != dayOfWeek)
                        dateEnd = dateEnd.AddDays(-1);

                    BookingDB.Insert(dateStart, dateEnd, org == null || bookingType == 342 ? 0 : org.OrganisationID, staff == null ? -1 : staff.StaffID, patient == null ? -1 : patient.PatientID, offering == null ? -1 : offering.OfferingID,
                                bookingType, 0, Convert.ToInt32(unavailability_reason_id), Convert.ToInt32(Session["StaffID"]), booking_confirmed_by_type_id, confirmedBy, dateConfirmed, -1, DateTime.MinValue, false, false, false, true, dayOfWeek, startTime, endTime);
                }
                else
                {
                    // get which dates will occur .. and create individual bookings....
                    DateTime curStartDate = startDateTime;
                    while (curStartDate.DayOfWeek != dayOfWeek)
                        curStartDate = curStartDate.AddDays(1);

                    DateTime curStartDateTime = new DateTime(curStartDate.Year, curStartDate.Month, curStartDate.Day, startTime.Hours, startTime.Minutes, 0);
                    DateTime curEndDateTime   = new DateTime(curStartDate.Year, curStartDate.Month, curStartDate.Day, endTime.Hours,   endTime.Minutes,   0);
                    int weekNbr = 0;
                    while (curStartDateTime.Date <= endDateTime.Date)
                    {
                        if (weekNbr % everyNWeeks == 0)
                            BookingDB.Insert(curStartDateTime, curEndDateTime, org == null || bookingType == 342 ? 0 : org.OrganisationID, staff == null ? -1 : staff.StaffID, patient == null ? -1 : patient.PatientID, offering == null ? -1 : offering.OfferingID,
                                     bookingType, 0, Convert.ToInt32(unavailability_reason_id), Convert.ToInt32(Session["StaffID"]), booking_confirmed_by_type_id, confirmedBy, dateConfirmed, -1, DateTime.MinValue, false, false, false, false, curStartDateTime.DayOfWeek, TimeSpan.Zero, TimeSpan.Zero);

                        curStartDateTime = curStartDateTime.AddDays(7);
                        curEndDateTime   = curEndDateTime.AddDays(7);
                        weekNbr++;
                    }

                }

            }
        }

        Response.Redirect(lnkBackToBookingSheet.PostBackUrl);
    }



    #region GetUrlParamType(), GetUrlBookingScrType()

    protected enum UrlParamType { Edit, Add, AddRecurring, Delete, Cancel, Confirm, Unconfirm, Deceased, None };
    protected UrlParamType GetUrlParamType()
    {
        string type = Request.QueryString["type"];
        if (type != null && type.ToLower() == "edit")
            return UrlParamType.Edit;
        else if (type != null && type.ToLower() == "add")
            return UrlParamType.Add;
        else if (type != null && type.ToLower() == "addrecurring")
            return UrlParamType.AddRecurring;
        else if (type != null && type.ToLower() == "delete")
            return UrlParamType.Delete;
        else if (type != null && type.ToLower() == "confirm")
            return UrlParamType.Confirm;
        else if (type != null && type.ToLower() == "unconfirm")
            return UrlParamType.Unconfirm;
        else if (type != null && type.ToLower() == "cancel")
            return UrlParamType.Cancel;
        else if (type != null && type.ToLower() == "deceased")
            return UrlParamType.Deceased;
        else
            return UrlParamType.None;
    }

    private enum UrlBookingScrType { Patient, Provider, Clinic, AgedCare, None };
    private UrlBookingScrType GetUrlBookingScrType()
    {
        string type = Request.QueryString["booking_scr_type"];
        if (type != null && type.ToLower() == "patient")
            return UrlBookingScrType.Patient;
        else if (type != null && type.ToLower() == "provider")
            return UrlBookingScrType.Provider;
        else if (type != null && type.ToLower() == "clinic")
            return UrlBookingScrType.Clinic;
        else if (type != null && type.ToLower() == "agedcare")
            return UrlBookingScrType.AgedCare;
        else
            return UrlBookingScrType.None;
    }

    private enum UrlReturnPage { Bookings, BookingsForClinic };
    private UrlReturnPage GetUrlReturnPage()
    {
        string type = Request.QueryString["return_page"];
        if (type != null && type.ToLower() == "bookingsforclinic")
            return UrlReturnPage.BookingsForClinic;
        else
            return UrlReturnPage.Bookings;
    }

    #endregion

    #region ConvertStringToDateTime, ConvertStringToTimeSpan

    protected DateTime ConvertStringToDateTime(string strDate)
    {
        if (strDate == "NULL")
            return DateTime.MinValue;

        return new DateTime(Convert.ToInt32(strDate.Substring(0, 4)),
                            Convert.ToInt32(strDate.Substring(5, 2)),
                            Convert.ToInt32(strDate.Substring(8, 2)),
                            Convert.ToInt32(strDate.Substring(11, 2)),
                            Convert.ToInt32(strDate.Substring(13, 2)),
                            0);
    }
    protected TimeSpan ConvertStringToTimeSpan(string strTime)
    {
        return new TimeSpan(Convert.ToInt32(strTime.Substring(0, 2)),
                            Convert.ToInt32(strTime.Substring(2, 2)),
                            0);
    }

    #endregion

    #region SetErrorMessage, HideErrorMessage

    private void SetErrorMessage(string errMsg = "", string details = "")
    {
        if (errMsg.Contains(Environment.NewLine))
            errMsg = errMsg.Replace(Environment.NewLine, "<br />");

        // double escape so shows up literally on webpage for 'alert' message
        string detailsToDisplay = (details.Length == 0 ? "" : " <a href=\"#\" onclick=\"alert('" + details.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("'", "\\'").Replace("\"", "\\'") + "'); return false;\">Details</a>");

        lblErrorMessage.Visible = true;
        if (errMsg != null && errMsg.Length > 0)
            lblErrorMessage.Text = errMsg + detailsToDisplay + "<br />";
        else
            lblErrorMessage.Text = "An error has occurred. Plase contact the system administrator. " + detailsToDisplay + "<br />";
    }
    private void HideErrorMessage()
    {
        lblErrorMessage.Visible = false;
        lblErrorMessage.Text = "";
    }

    #endregion

}