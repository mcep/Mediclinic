using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Configuration;
using System.Text.RegularExpressions;

public partial class StreetAndSuburbInfo : System.Web.UI.Page
{

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {

            if (!IsPostBack)
                Utilities.SetNoCache(Response);
            HideErrorMessage();
            Utilities.UpdatePageHeader(Page.Master, true, true);

            if (!IsPostBack)
            {
                Session.Remove("addresschannel_sortexpression");
                Session.Remove("suburb_sortexpression");
                Session.Remove("addresschannel_data");
                Session.Remove("suburb_data");
                FillAddressChannelGrid();
                FillSuburbGrid();
                if (Request.QueryString["suburb_letter_search"] != null)
                    txtSearchSuburb.Text = Request.QueryString["suburb_letter_search"];
                if (Request.QueryString["postcode_letter_search"] != null)
                    txtSearchPostcode.Text = Request.QueryString["postcode_letter_search"];
                if (Request.QueryString["channel_letter_search"] != null)
                    txtSearchChannel.Text = Request.QueryString["channel_letter_search"];
            }

            this.GrdAddressChannel.EnableViewState = true;

        }
        catch (CustomMessageException ex)
        {
            if (IsPostBack) SetErrorMessage(ex.Message);
            else HideTableAndSetErrorMessage(ex.Message);
        }
        catch (Exception ex)
        {
            if (IsPostBack) SetErrorMessage("", ex.ToString());
            else HideTableAndSetErrorMessage("", ex.ToString());
        }
    }

    #region GrdAddressChannel

    protected void FillAddressChannelGrid()
    {
        DataTable dt_address_channel = (Request.QueryString["channel_letter_search"] == null) ? AddressChannelDB.GetDataTable() : AddressChannelDB.GetDataTable_StartingWith(Request.QueryString["channel_letter_search"]);

        Session["addresschannel_data"] = dt_address_channel;

        if (dt_address_channel.Rows.Count > 0)
        {

            if (IsPostBack && Session["addresschannel_sortexpression"] != null && Session["addresschannel_sortexpression"].ToString().Length > 0)
            {
                DataView dataView = new DataView(dt_address_channel);
                dataView.Sort = Session["addresschannel_sortexpression"].ToString();
                GrdAddressChannel.DataSource = dataView;
            }
            else
            {
                GrdAddressChannel.DataSource = dt_address_channel;
            }


            try
            {
                GrdAddressChannel.DataBind();
                GrdAddressChannel.PagerSettings.FirstPageText = "1";
                GrdAddressChannel.PagerSettings.LastPageText = GrdAddressChannel.PageCount.ToString();
                GrdAddressChannel.DataBind();
            }
            catch (Exception ex)
            {
                this.lblErrorMessage.Visible = true;
                this.lblErrorMessage.Text = ex.ToString();
            }
        }
        else
        {
            dt_address_channel.Rows.Add(dt_address_channel.NewRow());
            GrdAddressChannel.DataSource = dt_address_channel;
            GrdAddressChannel.DataBind();

            int TotalColumns = GrdAddressChannel.Rows[0].Cells.Count;
            GrdAddressChannel.Rows[0].Cells.Clear();
            GrdAddressChannel.Rows[0].Cells.Add(new TableCell());
            GrdAddressChannel.Rows[0].Cells[0].ColumnSpan = TotalColumns;
            GrdAddressChannel.Rows[0].Cells[0].Text = "No Record Found";
        }
    }
    protected void GrdAddressChannel_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (!Utilities.IsDev() && e.Row.RowType != DataControlRowType.Pager)
            e.Row.Cells[0].CssClass = "hiddencol";
    }
    protected void GrdAddressChannel_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        DataTable channelTypes = DBBase.GetGenericDataTable_WithWhereOrderClause("AddressChannelType", "", "descr", "address_channel_type_id", "descr");

        DataTable dt_address_channel = Session["addresschannel_data"] as DataTable;
        bool tblEmpty = (dt_address_channel.Rows.Count == 1 && dt_address_channel.Rows[0][0] == DBNull.Value);
        if (!tblEmpty && e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lblId = (Label)e.Row.FindControl("lblId");
            DataRow[] foundRows = dt_address_channel.Select("ac_address_channel_id=" + lblId.Text);
            DataRow thisRow = foundRows[0];


            DropDownList ddlAddressChannelType = (DropDownList)e.Row.FindControl("ddlAddressChannelType");
            if (ddlAddressChannelType != null)
            {
                ddlAddressChannelType.DataSource = channelTypes;
                ddlAddressChannelType.DataTextField = "descr";
                ddlAddressChannelType.DataValueField = "address_channel_type_id";
                ddlAddressChannelType.DataBind();
                ddlAddressChannelType.SelectedValue = thisRow["ac_address_channel_type_id"].ToString();
            }

            Utilities.AddConfirmationBox(e);
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
                Utilities.SetEditRowBackColour(e, System.Drawing.Color.LightGoldenrodYellow);
        }
        if (e.Row.RowType == DataControlRowType.Footer)
        {
            DropDownList ddlAddressChannelType = (DropDownList)e.Row.FindControl("ddlNewAddressChannelType");
            ddlAddressChannelType.DataSource = channelTypes;
            ddlAddressChannelType.DataBind();
            ddlAddressChannelType.SelectedIndex = Utilities.IndexOf(ddlAddressChannelType, "street");
        }
    }
    protected void GrdAddressChannel_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        GrdAddressChannel.EditIndex = -1;
        FillAddressChannelGrid();
    }
    protected void GrdAddressChannel_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        Label lblId = (Label)GrdAddressChannel.Rows[e.RowIndex].FindControl("lblId");
        TextBox txtChannelDescr = (TextBox)GrdAddressChannel.Rows[e.RowIndex].FindControl("txtChannelDescr");
        DropDownList ddlAddressChannelType = (DropDownList)GrdAddressChannel.Rows[e.RowIndex].FindControl("ddlAddressChannelType");

        AddressChannelDB.Update(Convert.ToInt32(lblId.Text), txtChannelDescr.Text.ToUpper(), Convert.ToInt32(ddlAddressChannelType.SelectedValue));

        GrdAddressChannel.EditIndex = -1;
        FillAddressChannelGrid();
    }
    protected void GrdAddressChannel_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        Label lblId = (Label)GrdAddressChannel.Rows[e.RowIndex].FindControl("lblId");
        int address_channel_id = Convert.ToInt32(lblId.Text);

        try
        {
            //AddressChannelDB.UpdateInactive(address_channel_id);
        }
        catch (ForeignKeyConstraintException fkcEx)
        {
            if (Utilities.IsDev())
                SetErrorMessage("Can not delete because other records depend on this : " + fkcEx.Message);
            else
                SetErrorMessage("Can not delete because other records depend on this");
        }

        FillAddressChannelGrid();
    }
    protected void GrdAddressChannel_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName.Equals("Insert"))
        {
            TextBox txtChannelDescr = (TextBox)GrdAddressChannel.FooterRow.FindControl("txtNewChannelDescr");
            DropDownList ddlAddressChannelType = (DropDownList)GrdAddressChannel.FooterRow.FindControl("ddlNewAddressChannelType");

            AddressChannelDB.Insert(txtChannelDescr.Text.ToUpper(), Convert.ToInt32(ddlAddressChannelType.SelectedValue));

            FillAddressChannelGrid();
        }
    }
    protected void GrdAddressChannel_RowEditing(object sender, GridViewEditEventArgs e)
    {
        GrdAddressChannel.EditIndex = e.NewEditIndex;
        FillAddressChannelGrid();
    }
    protected void GrdAddressChannel_Sorting(object sender, GridViewSortEventArgs e)
    {
        // dont allow sorting if in edit mode
        if (GrdAddressChannel.EditIndex >= 0)
            return;

        DataTable dataTable = Session["addresschannel_data"] as DataTable;

        if (dataTable != null)
        {
            if (Session["addresschannel_sortexpression"] == null)
                Session["addresschannel_sortexpression"] = "";

            DataView dataView = new DataView(dataTable);
            string[] sortData = Session["addresschannel_sortexpression"].ToString().Trim().Split(' ');
            string newSortExpr = (e.SortExpression == sortData[0] && sortData[1] == "ASC") ? "DESC" : "ASC";
            dataView.Sort = e.SortExpression + " " + newSortExpr;
            Session["addresschannel_sortexpression"] = e.SortExpression + " " + newSortExpr;

            GrdAddressChannel.DataSource = dataView;
            GrdAddressChannel.DataBind();
        }
    }
    protected void GrdAddressChannel_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        GrdAddressChannel.PageIndex = e.NewPageIndex;
        FillAddressChannelGrid();
    }

    #endregion

    #region GrdSuburb

    protected void FillSuburbGrid()
    {
        //DataTable dt_suburb = (Request.QueryString["suburb_letter_search"] == null) ? SuburbDB.GetDataTable() : SuburbDB.GetDataTable_StartingWith(Request.QueryString["suburb_letter_search"]);
        DataTable dt_suburb = SuburbDB.GetDataTable(false, Request.QueryString["suburb_letter_search"], false, Request.QueryString["postcode_letter_search"]);

        Session["suburb_data"] = dt_suburb;

        if (dt_suburb.Rows.Count > 0)
        {

            if (IsPostBack && Session["suburb_sortexpression"] != null && Session["suburb_sortexpression"].ToString().Length > 0)
            {
                DataView dataView = new DataView(dt_suburb);
                dataView.Sort = Session["suburb_sortexpression"].ToString();
                GrdSuburb.DataSource = dataView;
            }
            else
            {
                GrdSuburb.DataSource = dt_suburb;
            }


            try
            {
                GrdSuburb.DataBind();
                GrdSuburb.PagerSettings.FirstPageText = "1";
                GrdSuburb.PagerSettings.LastPageText = GrdSuburb.PageCount.ToString();
                GrdSuburb.DataBind();
            }
            catch (Exception ex)
            {
                this.lblErrorMessage.Visible = true;
                this.lblErrorMessage.Text = ex.ToString();
            }
        }
        else
        {
            dt_suburb.Rows.Add(dt_suburb.NewRow());
            GrdSuburb.DataSource = dt_suburb;
            GrdSuburb.DataBind();

            int TotalColumns = GrdSuburb.Rows[0].Cells.Count;
            GrdSuburb.Rows[0].Cells.Clear();
            GrdSuburb.Rows[0].Cells.Add(new TableCell());
            GrdSuburb.Rows[0].Cells[0].ColumnSpan = TotalColumns;
            GrdSuburb.Rows[0].Cells[0].Text = "No Record Found";
        }
    }
    protected void GrdSuburb_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (!Utilities.IsDev() && e.Row.RowType != DataControlRowType.Pager)
            e.Row.Cells[0].CssClass = "hiddencol";
    }
    protected void GrdSuburb_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        DataTable states = DBBase.GetGenericDataTable_WithWhereOrderClause("Suburb", "", "state", "distinct state");

        DataTable dt_suburb = Session["suburb_data"] as DataTable;
        bool tblEmpty = (dt_suburb.Rows.Count == 1 && dt_suburb.Rows[0][0] == DBNull.Value);
        if (!tblEmpty && e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lblId = (Label)e.Row.FindControl("lblSuburbId");
            DataRow[] foundRows = dt_suburb.Select("suburb_id=" + lblId.Text);
            DataRow thisRow = foundRows[0];


            DropDownList ddlState = (DropDownList)e.Row.FindControl("ddlState");
            if (ddlState != null)
            {
                foreach (DataRow row in states.Rows)
                    ddlState.Items.Add(new ListItem(row["state"].ToString(), row["state"].ToString()));

                ddlState.SelectedValue = Convert.ToString(thisRow["state"]);
            }

            Utilities.AddConfirmationBox(e);
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
                Utilities.SetEditRowBackColour(e, System.Drawing.Color.LightGoldenrodYellow);
        }
        if (e.Row.RowType == DataControlRowType.Footer)
        {
            DropDownList ddlState = (DropDownList)e.Row.FindControl("ddlNewState");
            foreach (DataRow row in states.Rows)
                ddlState.Items.Add(new ListItem(row["state"].ToString(), row["state"].ToString()));
        }
    }
    protected void GrdSuburb_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        GrdSuburb.EditIndex = -1;
        FillSuburbGrid();
    }
    protected void GrdSuburb_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        CustomValidator txtValidatePostcodeUnique = (CustomValidator)GrdSuburb.FindControl("txtValidatePostcodeUnique");
        if (txtValidatePostcodeUnique != null)
            if (!txtValidatePostcodeUnique.IsValid || !txtValidatePostcodeUnique.IsValid)
                return;

        Label lblId = (Label)GrdSuburb.Rows[e.RowIndex].FindControl("lblSuburbId");
        TextBox txtName = (TextBox)GrdSuburb.Rows[e.RowIndex].FindControl("txtName");
        TextBox txtPostcode = (TextBox)GrdSuburb.Rows[e.RowIndex].FindControl("txtPostcode");
        DropDownList ddlState = (DropDownList)GrdSuburb.Rows[e.RowIndex].FindControl("ddlState");

        DataTable dt_suburb = Session["suburb_data"] as DataTable;
        DataRow[] foundRows = dt_suburb.Select("suburb_id=" + Convert.ToInt32(lblId.Text));
        string prev_postcode = Convert.ToString(foundRows[0]["name"]) + " " + Convert.ToString(foundRows[0]["postcode"]) + " " + Convert.ToString(foundRows[0]["state"]);

        SuburbDB.Update(Convert.ToInt32(lblId.Text), txtName.Text.ToUpper(), txtPostcode.Text, ddlState.SelectedValue, Convert.ToInt32(Session["StaffID"]), prev_postcode);

        GrdSuburb.EditIndex = -1;
        FillSuburbGrid();
    }
    protected void GrdSuburb_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        Label lblId = (Label)GrdSuburb.Rows[e.RowIndex].FindControl("lbSuburblId");
        int suburb_id = Convert.ToInt32(lblId.Text);

        try
        {
            //SuburbDB.UpdateInactive(suburb_id);
        }
        catch (ForeignKeyConstraintException fkcEx)
        {
            if (Utilities.IsDev())
                SetErrorMessage("Can not delete because other records depend on this : " + fkcEx.Message);
            else
                SetErrorMessage("Can not delete because other records depend on this");
        }

        FillSuburbGrid();
    }
    protected void GrdSuburb_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName.Equals("Insert"))
        {
            CustomValidator txtValidateNewPostcodeUnique = (CustomValidator)GrdSuburb.FooterRow.FindControl("txtValidateNewPostcodeUnique");
            if (txtValidateNewPostcodeUnique != null)
                if (!txtValidateNewPostcodeUnique.IsValid)
                    return;

            TextBox txtName = (TextBox)GrdSuburb.FooterRow.FindControl("txtNewName");
            TextBox txtPostcode = (TextBox)GrdSuburb.FooterRow.FindControl("txtNewPostcode");
            DropDownList ddlState = (DropDownList)GrdSuburb.FooterRow.FindControl("ddlNewState");

            SuburbDB.Insert(txtName.Text.ToUpper(), txtPostcode.Text, ddlState.SelectedValue);

            FillSuburbGrid();
        }
    }
    protected void GrdSuburb_RowEditing(object sender, GridViewEditEventArgs e)
    {
        GrdSuburb.EditIndex = e.NewEditIndex;
        FillSuburbGrid();
    }
    protected void GrdSuburb_Sorting(object sender, GridViewSortEventArgs e)
    {
        // dont allow sorting if in edit mode
        if (GrdSuburb.EditIndex >= 0)
            return;

        DataTable dataTable = Session["suburb_data"] as DataTable;

        if (dataTable != null)
        {
            if (Session["suburb_sortexpression"] == null)
                Session["suburb_sortexpression"] = "";

            DataView dataView = new DataView(dataTable);
            string[] sortData = Session["suburb_sortexpression"].ToString().Trim().Split(' ');
            string newSortExpr = (e.SortExpression == sortData[0] && sortData[1] == "ASC") ? "DESC" : "ASC";
            dataView.Sort = e.SortExpression + " " + newSortExpr;
            Session["suburb_sortexpression"] = e.SortExpression + " " + newSortExpr;

            GrdSuburb.DataSource = dataView;
            GrdSuburb.DataBind();
        }
    }
    protected void GrdSuburb_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        GrdSuburb.PageIndex = e.NewPageIndex;
        FillSuburbGrid();
    }

    protected void PostcodeUniqueCheck(object sender, ServerValidateEventArgs e)
    {
        int id = Convert.ToInt32(((Label)GrdSuburb.Rows[GrdSuburb.EditIndex].FindControl("lblSuburbId")).Text);
        TextBox      txtName     = (TextBox)GrdSuburb.Rows[GrdSuburb.EditIndex].FindControl("txtName");
        TextBox      txtPostcode = (TextBox)GrdSuburb.Rows[GrdSuburb.EditIndex].FindControl("txtPostcode");
        DropDownList ddlState    = (DropDownList)GrdSuburb.Rows[GrdSuburb.EditIndex].FindControl("ddlState");

        if (txtPostcode != null)
        {
            Suburb suburb = SuburbDB.GetByID(id);
            if (suburb.Name != txtName.Text || suburb.Postcode != txtPostcode.Text || suburb.State != ddlState.SelectedValue)
                e.IsValid = !SuburbDB.Exists(txtName.Text, txtPostcode.Text, ddlState.SelectedValue, id);
        }
    }
    protected void NewPostcodeUniqueCheck(object sender, ServerValidateEventArgs e)
    {
        TextBox      txtNewName     = (TextBox)GrdSuburb.FooterRow.FindControl("txtNewName");
        TextBox      txtNewPostcode = (TextBox)GrdSuburb.FooterRow.FindControl("txtNewPostcode");
        DropDownList ddlNewState    = (DropDownList)GrdSuburb.FooterRow.FindControl("ddlNewState");

        if (txtNewPostcode != null)
            e.IsValid = !SuburbDB.Exists(txtNewName.Text, txtNewPostcode.Text, ddlNewState.SelectedValue, -1);
    }

    #endregion

    #region btnSearchSuburb_Click, btnClearSuburbSearch_Click

    protected void btnSearchSuburb_Click(object sender, EventArgs e)
    {
        if (!Regex.IsMatch(txtSearchSuburb.Text, @"^[a-zA-Z]*$"))
        {
            SetErrorMessage("Suburb search text can only be letters");
            return;
        }
        else
            HideErrorMessage();


        if (Request.QueryString["suburb_letter_search"] != null)
            Response.Redirect(Request.RawUrl.Replace("suburb_letter_search=" + Request.QueryString["suburb_letter_search"], "suburb_letter_search=" + txtSearchSuburb.Text));
        else
        {
            string seperator = Request.QueryString != null && Request.QueryString.Count > 0 ? "&" : "?";
            Response.Redirect(Request.RawUrl + seperator + "suburb_letter_search=" + txtSearchSuburb.Text);
        }
    }
    protected void btnClearSuburbSearch_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["suburb_letter_search"] != null)
            Response.Redirect(UrlParamModifier.Remove(Request.RawUrl, "suburb_letter_search"));
        else
            txtSearchSuburb.Text = "";
    }

    protected void btnSearchPostcode_Click(object sender, EventArgs e)
    {
        if (!Regex.IsMatch(txtSearchPostcode.Text, @"^[0-9]*$"))
        {
            SetErrorMessage("Postcode search text can only be numbers");
            return;
        }
        else
            HideErrorMessage();


        if (Request.QueryString["postcode_letter_search"] != null)
            Response.Redirect(Request.RawUrl.Replace("postcode_letter_search=" + Request.QueryString["postcode_letter_search"], "postcode_letter_search=" + txtSearchPostcode.Text));
        else
        {
            string seperator = Request.QueryString != null && Request.QueryString.Count > 0 ? "&" : "?";
            Response.Redirect(Request.RawUrl + seperator + "postcode_letter_search=" + txtSearchPostcode.Text);
        }
    }
    protected void btnClearPostcodeSearch_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["postcode_letter_search"] != null)
            Response.Redirect(UrlParamModifier.Remove(Request.RawUrl, "postcode_letter_search"));
        else
            txtSearchPostcode.Text = "";
    }


    protected void btnSearchChannel_Click(object sender, EventArgs e)
    {
        if (!Regex.IsMatch(txtSearchChannel.Text, @"^[a-zA-Z]*$"))
        {
            SetErrorMessage("Search text can only be letters");
            return;
        }
        else
            HideErrorMessage();


        if (Request.QueryString["channel_letter_search"] != null)
            Response.Redirect(Request.RawUrl.Replace("channel_letter_search=" + Request.QueryString["channel_letter_search"], "channel_letter_search=" + txtSearchChannel.Text));
        else
        {
            string seperator = Request.QueryString != null && Request.QueryString.Count > 0 ? "&" : "?";
            Response.Redirect(Request.RawUrl + seperator + "channel_letter_search=" + txtSearchChannel.Text);
        }
    }
    protected void btnClearChannelSearch_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["channel_letter_search"] != null)
            Response.Redirect(UrlParamModifier.Remove(Request.RawUrl, "channel_letter_search"));
        else
            txtSearchChannel.Text = "";
    }

    #endregion

    #region HideTableAndSetErrorMessage, SetErrorMessage, HideErrorMessag

    private void HideTableAndSetErrorMessage(string errMsg = "", string details = "")
    {
        SetErrorMessage(errMsg, details);
    }
    private void SetErrorMessage(string errMsg = "", string details = "")
    {
        if (errMsg.Contains(Environment.NewLine))
            errMsg = errMsg.Replace(Environment.NewLine, "<br />");

        // double escape so shows up literally on webpage for 'alert' message
        string detailsToDisplay = (details.Length == 0 ? "" : " <a href=\"#\" onclick=\"alert('" + details.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("'", "\\'").Replace("\"", "\\'") + "'); return false;\">Details</a>");

        lblErrorMessage.Visible = true;
        if (errMsg != null && errMsg.Length > 0)
            lblErrorMessage.Text = errMsg + detailsToDisplay + "<br />";
        else
            lblErrorMessage.Text = "An error has occurred. Plase contact the system administrator. " + detailsToDisplay + "<br />";
    }
    private void HideErrorMessage()
    {
        lblErrorMessage.Visible = false;
        lblErrorMessage.Text = "";
    }

    #endregion

}
