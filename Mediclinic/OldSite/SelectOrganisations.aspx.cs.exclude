using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Configuration;
using System.Text.RegularExpressions;

public partial class SelectOrganisations : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {

            if (!IsPostBack)
                Utilities.SetNoCache(Response);
            HideErrorMessage();


            if (!IsPostBack)
            {
                Session.Remove("selectorganisation_sortexpression");
                Session.Remove("selectorganisation_data");
                
                SetupGUI();
                FillOrganisationGrid();
            }

            this.GrdOrganisation.EnableViewState = true;
            this.txtStartDate_Picker.OnClientClick = "displayDatePicker('txtStartDate', this, 'dmy', '-'); return false;";
            //this.txtStartDate_Picker.OnClientClick = "displayDatePicker('txtStartDate', this, 'dmy', '-', 'reload_page_date'); return false;";
        }
        catch (CustomMessageException ex)
        {
            if (IsPostBack) SetErrorMessage(ex.Message);
            else HideTableAndSetErrorMessage(ex.Message);
        }
        catch (Exception ex)
        {
            if (IsPostBack) SetErrorMessage("", ex.ToString());
            else HideTableAndSetErrorMessage("", ex.ToString());
        }
    }

    protected void SetupGUI()
    {
        if (IsValidFormPatient())
        {
            Patient patient = PatientDB.GetByID(GetFormPatient());

            tr_selected_patient_row.Visible = true;
            lblSelectedPatientName.Text = "<a href=\"#\" onclick=\"open_new_window('AddEditPatient.aspx?type=view&id=" + patient.PatientID + "', 1750, 1000);return false;\">" + patient.Person.FullnameWithoutMiddlename + "</a>";
        }
        else
        {
            tr_selected_patient_row.Visible = false;
        }



        txtStartDate.Text = GetFormDate().ToString("dd-MM-yyyy");

        for (int i = 1; i <= 8; i++)
            ddlDaysToDisplay.Items.Add(new ListItem(i.ToString(), i.ToString()));

        int ndays = GetFormNumDays();
        if (ndays < 1) ndays = 1;
        if (ndays > 8) ndays = 8;
        ddlDaysToDisplay.SelectedValue = ndays.ToString();

        if (Convert.ToInt32(ddlDaysToDisplay.SelectedValue) != Convert.ToInt32(Session["NumDaysToDisplayOnBookingScreen"]))
        {
            StaffDB.UpdateNumDaysToDisplayOnBookingScreen(Convert.ToInt32(Session["StaffID"]), Convert.ToInt32(ddlDaysToDisplay.SelectedValue));
            Session["NumDaysToDisplayOnBookingScreen"] = Convert.ToInt32(ddlDaysToDisplay.SelectedValue);
        }

        if (Convert.ToBoolean(Session["SiteIsAgedCare"]))
        {
            patientDivSpace.Visible = false;
            patientTbl.Visible      = false;
        }
    }

    #region GetUrlParams

    protected bool IsValidFormPatient()
    {
        string patientID = Request.QueryString["patient"];
        return patientID != null && Regex.IsMatch(patientID, @"^\d+$") && PatientDB.Exists(Convert.ToInt32(patientID));
    }
    protected int GetFormPatient(bool checkIsValid = true)
    {
        if (checkIsValid && !IsValidFormPatient())
            throw new Exception("Invalid url patient");
        return Convert.ToInt32(Request.QueryString["patient"]);
    }

    protected DateTime GetFormDate()
    {
        try
        {
            string dateString = Request.QueryString["date"];
            if (dateString == null)
                throw new InvalidExpressionException("No url parameter date");

            string[] parts = dateString.Split('_');
            if (parts.Length != 3)
                throw new InvalidExpressionException("Does not contain 3 parts seeperated by underscore :" + dateString);
            return new DateTime(Convert.ToInt32(parts[0]), Convert.ToInt32(parts[1]), Convert.ToInt32(parts[2]));
        }
        catch (Exception)
        {
            return DateTime.Today;
        }
    }
    protected int GetFormNumDays()
    {
        try
        {
            string numdays = Request.QueryString["ndays"];
            if (numdays == null)
                return Convert.ToInt32(Session["NumDaysToDisplayOnBookingScreen"]);

            int ndays = Convert.ToInt32(numdays);
            if (ndays > 8)
                return 8;
            else if (ndays <= 0)
                return 1;
            else
                return ndays;
        }
        catch (Exception)
        {
            return Convert.ToInt32(Session["NumDaysToDisplayOnBookingScreen"]);
        }
    }

    #endregion

    #region GrdOrganisation

    protected void FillOrganisationGrid()
    {
        //bool incAgedCare = Convert.ToBoolean(Session["IsAdmin"]) ? chkIncAgedCare.Checked : Convert.ToBoolean(Session["SiteIsAgedCare"]);
        //bool incClinics  = Convert.ToBoolean(Session["IsAdmin"]) ? chkIncClinics.Checked  : Convert.ToBoolean(Session["SiteIsClinic"]);
        bool incAgedCare = Convert.ToBoolean(Session["SiteIsAgedCare"]);
        bool incClinics  = Convert.ToBoolean(Session["SiteIsClinic"]);

        int patientID = IsValidFormPatient() ? GetFormPatient(false) : -1;
        //DataTable dt = patientID == -1 ?
        //    OrganisationDB.GetDataTable(false, true, !incClinics, !incAgedCare, true, txtSearchOrganisation.Text.Trim(), chkOrganisationSearchOnlyStartWith.Checked) :
        //    RegisterPatientDB.GetDataTable_OrganisationsOf(patientID, true, !incClinics, !incAgedCare, true, txtSearchOrganisation.Text.Trim(), chkOrganisationSearchOnlyStartWith.Checked);
        //DataTable dt = patientID == -1 ?
        //    OrganisationDB.GetDataTable(false, true, !incClinics, !incAgedCare, true, "", false) :
        //    RegisterPatientDB.GetDataTable_OrganisationsOf(patientID, true, !incClinics, !incAgedCare, true, "", false);
        DataTable dt = OrganisationDB.GetDataTable(0, false, true, !incClinics, !incAgedCare, true, "", false);

        Session["selectorganisation_data"] = dt;

        if (dt.Rows.Count > 0)
        {

            if (IsPostBack && Session["selectorganisation_sortexpression"] != null && Session["selectorganisation_sortexpression"].ToString().Length > 0)
            {
                DataView dataView = new DataView(dt);
                dataView.Sort = Session["selectorganisation_sortexpression"].ToString();
                GrdOrganisation.DataSource = dataView;
            }
            else
            {
                GrdOrganisation.DataSource = dt;
            }


            try
            {
                GrdOrganisation.DataBind();
                GrdOrganisation.PagerSettings.FirstPageText = "1";
                GrdOrganisation.PagerSettings.LastPageText = GrdOrganisation.PageCount.ToString();
                GrdOrganisation.DataBind();
            }
            catch (Exception ex)
            {
                this.lblErrorMessage.Visible = true;
                this.lblErrorMessage.Text = ex.ToString();
            }
        }
        else
        {
            dt.Rows.Add(dt.NewRow());
            GrdOrganisation.DataSource = dt;
            GrdOrganisation.DataBind();

            int TotalColumns = GrdOrganisation.Rows[0].Cells.Count;
            GrdOrganisation.Rows[0].Cells.Clear();
            GrdOrganisation.Rows[0].Cells.Add(new TableCell());
            GrdOrganisation.Rows[0].Cells[0].ColumnSpan = TotalColumns;
            GrdOrganisation.Rows[0].Cells[0].Text = "No Record Found";
        }
    }
    protected void GrdOrganisation_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (!Utilities.IsDev() && e.Row.RowType != DataControlRowType.Pager)
        {
            e.Row.Cells[0].CssClass = "hiddencol";
        }
    }
    protected void GrdOrganisation_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        DataTable dt = Session["selectorganisation_data"] as DataTable;
        bool tblEmpty = (dt.Rows.Count == 1 && dt.Rows[0][0] == DBNull.Value);
        if (!tblEmpty && e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lblId = (Label)e.Row.FindControl("lblId");
            DataRow[] foundRows = dt.Select("organisation_id=" + lblId.Text);
            DataRow thisRow = foundRows[0];


            HyperLink lnkName = (HyperLink)e.Row.FindControl("lnkName");
            if (lnkName != null)
                lnkName.NavigateUrl = "~/BookingsForClinic.aspx?orgs=" + thisRow["organisation_id"] + (Request.QueryString["patient"] != null ? "&patient=" + Request.QueryString["patient"] : "");


            Utilities.AddConfirmationBox(e);
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
                Utilities.SetEditRowBackColour(e, System.Drawing.Color.LightGoldenrodYellow);
        }
        if (e.Row.RowType == DataControlRowType.Footer)
        {
        }
    }
    protected void GrdOrganisation_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        GrdOrganisation.EditIndex = -1;
        FillOrganisationGrid();
    }
    protected void GrdOrganisation_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
    }
    protected void GrdOrganisation_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
    }
    protected void GrdOrganisation_RowCommand(object sender, GridViewCommandEventArgs e)
    {
    }
    protected void GrdOrganisation_RowEditing(object sender, GridViewEditEventArgs e)
    {
        GrdOrganisation.EditIndex = e.NewEditIndex;
        FillOrganisationGrid();
    }
    protected void GrdOrganisation_Sorting(object sender, GridViewSortEventArgs e)
    {
        // dont allow sorting if in edit mode
        if (GrdOrganisation.EditIndex >= 0)
            return;

        DataTable dataTable = Session["selectorganisation_data"] as DataTable;

        if (dataTable != null)
        {
            if (Session["selectorganisation_sortexpression"] == null)
                Session["selectorganisation_sortexpression"] = "";

            DataView dataView = new DataView(dataTable);
            string[] sortData = Session["selectorganisation_sortexpression"].ToString().Trim().Split(' ');
            string newSortExpr = (e.SortExpression == sortData[0] && sortData[1] == "ASC") ? "DESC" : "ASC";
            dataView.Sort = e.SortExpression + " " + newSortExpr;
            Session["selectorganisation_sortexpression"] = e.SortExpression + " " + newSortExpr;

            GrdOrganisation.DataSource = dataView;
            GrdOrganisation.DataBind();
        }
    }
    protected void GrdOrganisation_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        GrdOrganisation.PageIndex = e.NewPageIndex;
        FillOrganisationGrid();
    }

    #endregion

    #region btnSearch_Click, btnClearSearch_Click

    protected void chkIncClinics_CheckedChanged(object sender, EventArgs e)
    {
        FillOrganisationGrid();
    }
    protected void chkIncAgedCare_CheckedChanged(object sender, EventArgs e)
    {
        FillOrganisationGrid();
    }

    //protected void btnSearchOrganisation_Click(object sender, EventArgs e)
    //{
    //    if (!Regex.IsMatch(txtSearchOrganisation.Text, @"^[a-zA-Z\-\']*$"))
    //    {
    //        SetErrorMessage("Search text can only be letters and hyphens");
    //        return;
    //    }
    //    else if (txtSearchOrganisation.Text.Trim().Length == 0)
    //    {
    //        SetErrorMessage("No search text entered");
    //        return;
    //    }
    //    else
    //        HideErrorMessage();


    //    FillOrganisationGrid();
    //}
    //protected void btnClearOrganisationSearch_Click(object sender, EventArgs e)
    //{
    //    txtSearchOrganisation.Text = string.Empty;

    //    FillOrganisationGrid();
    //}

    #endregion

    #region btnBookingSheet_Click

    protected void btnBookingSheet_Click(object sender, EventArgs e)
    {
        txtStartDate.Text = txtStartDate.Text.Trim();
        if (txtStartDate.Text.Length > 0 && !Utilities.IsValidDate(txtStartDate.Text, "dd-mm-yyyy"))
        {
            SetErrorMessage("Invalid Date.");
            return;
        }


        string selectedOrgs = string.Empty;
        foreach (GridViewRow row in GrdOrganisation.Rows)
        {
            Label lblId = row.FindControl("lblId") as Label;
            CheckBox chkSelect = row.FindControl("chkSelect") as CheckBox;

            if (lblId == null || chkSelect == null)
                continue;

            if (chkSelect.Checked)
                selectedOrgs += (selectedOrgs.Length == 0 ? "" : "_") + lblId.Text;
        }

        if (selectedOrgs.Length == 0)
        {
            SetErrorMessage("Please select at least one organisation");
            return;
        }

        DateTime date = Utilities.GetDate(txtStartDate.Text, "dd-mm-yyyy");

        string url = "~/BookingsForClinic.aspx?orgs=" + selectedOrgs +
            (Request.QueryString["patient"] != null               ? "&patient=" + Request.QueryString["patient"] : "") +
            "&ndays=" + ddlDaysToDisplay.SelectedValue +
            (date != DateTime.Today && date  != DateTime.MinValue ? "&date="    + date.ToString("yyyy_MM_dd")    : "");


        if (hiddenCtrlDown.Value == "1")
            Page.ClientScript.RegisterStartupScript(this.GetType(), "OpenWindow", "window.open('" + url.Substring(2) + "','_newtab');", true);
        else
            Response.Redirect(url);
    }

    #endregion

    #region btnMoveDate_Command

    protected void btnMoveDate_Command(object sender, CommandEventArgs e)
    {
        txtStartDate.Text = txtStartDate.Text.Trim();
        if (txtStartDate.Text.Length == 0 || !Utilities.IsValidDate(txtStartDate.Text, "dd-mm-yyyy"))
        {
            SetErrorMessage("Invalid Date to move.");
            return;
        }

        DateTime startDate = Utilities.GetDate(txtStartDate.Text, "dd-mm-yyyy");

        if (e.CommandArgument == "Today")
            startDate = DateTime.Today;
        else
        {
            int totalToMove = Convert.ToInt32(ddlMoveDateNum.SelectedValue);
            if (e.CommandArgument == "Backwards")
                totalToMove *= -1;

            if (ddlMoveDateType.SelectedValue == "Days")
                startDate = startDate.AddDays(totalToMove);
            if (ddlMoveDateType.SelectedValue == "Weeks")
                startDate = startDate.AddDays(totalToMove * 7);
            if (ddlMoveDateType.SelectedValue == "Months")
                startDate = startDate.AddMonths(totalToMove);
            if (ddlMoveDateType.SelectedValue == "Years")
                startDate = startDate.AddYears(totalToMove);

        }

        string newURL = Request.RawUrl;
        newURL = UrlParamModifier.AddEdit(newURL, "date", startDate.ToString("yyyy_MM_dd"));
        Response.Redirect(newURL);
    }

    #endregion


    #region HideTableAndSetErrorMessage, SetErrorMessage, HideErrorMessag

    private void HideTableAndSetErrorMessage(string errMsg = "", string details = "")
    {
        GrdOrganisation.Visible = false;
        SetErrorMessage(errMsg, details);
    }
    private void SetErrorMessage(string errMsg = "", string details = "")
    {
        if (errMsg.Contains(Environment.NewLine))
            errMsg = errMsg.Replace(Environment.NewLine, "<br />");

        // double escape so shows up literally on webpage for 'alert' message
        string detailsToDisplay = (details.Length == 0 ? "" : " <a href=\"#\" onclick=\"alert('" + details.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("'", "\\'").Replace("\"", "\\'") + "'); return false;\">Details</a>");

        lblErrorMessage.Visible = true;
        if (errMsg != null && errMsg.Length > 0)
            lblErrorMessage.Text = errMsg + detailsToDisplay + "<br />";
        else
            lblErrorMessage.Text = "An error has occurred. Plase contact the system administrator. " + detailsToDisplay + "<br />";
    }
    private void HideErrorMessage()
    {
        lblErrorMessage.Visible = false;
        lblErrorMessage.Text = "";
    }

    #endregion

    protected void lnkName_Command(object sender, CommandEventArgs e)
    {
        txtStartDate.Text = txtStartDate.Text.Trim();
        if (txtStartDate.Text.Length > 0 && !Utilities.IsValidDate(txtStartDate.Text, "dd-mm-yyyy"))
        {
            SetErrorMessage("Invalid Date.");
            return;
        }


        DateTime date = Utilities.GetDate(txtStartDate.Text, "dd-mm-yyyy");

        int orgID = Convert.ToInt32(e.CommandArgument);

        string url = "~/BookingsForClinic.aspx?orgs=" + orgID +
            (Request.QueryString["patient"] != null               ? "&patient=" + Request.QueryString["patient"] : "") +
            "&ndays=" + ddlDaysToDisplay.SelectedValue +
            (date != DateTime.Today && date  != DateTime.MinValue ? "&date="    + date.ToString("yyyy_MM_dd")    : "");


        if (hiddenCtrlDown.Value == "1")
            Page.ClientScript.RegisterStartupScript(this.GetType(), "OpenWindow" + (new Random().Next()), "window.open('" + url.Substring(2) + "','_blank');", true);
        else
            Response.Redirect(url);
    }
}
