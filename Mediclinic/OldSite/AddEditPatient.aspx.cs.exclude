using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Text.RegularExpressions;
using System.Collections;

public partial class AddEditPatient : System.Web.UI.Page
{

    #region Page_Load

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {

            HideErrorMessage();
            SetupGUI();

            if (!IsPostBack)
            {
                Patient patient = null;
                if ((GetUrlParamType() == UrlParamType.Edit || GetUrlParamType() == UrlParamType.View) && IsValidFormID())
                {
                    patient = PatientDB.GetByID(GetFormID());
                    if (patient != null)
                    {
                        // add to logged in providers org, then redirect back without add_to_this_org in url
                        if (Request.QueryString["add_to_this_org"] != null)
                        {
                            if (!Convert.ToBoolean(Session["IsAdmin"]) && !RegisterPatientDB.IsPatientRegisteredToOrg(patient.PatientID, Convert.ToInt32(Session["OrgID"])))
                                RegisterPatientDB.Insert(Convert.ToInt32(Session["OrgID"]), patient.PatientID);
                            Response.Redirect(UrlParamModifier.Remove(Request.RawUrl, "add_to_this_org"));
                        }

                        Hashtable offeringsHash = OfferingDB.GetHashtable(true, -1, null, true);
                        PatientDB.AddACOfferings(ref offeringsHash, ref patient);

                        FillEditViewForm(patient, GetUrlParamType() == UrlParamType.Edit);
                        if (Utilities.GetAddressType().ToString() == "Contact")
                        {
                            addressControl.Visible = true;
                            addressControl.Set(patient.Person.EntityID, true, EntityType.GetByType(EntityType.EntityTypeEnum.Patient), Convert.ToBoolean(Session["SiteIsAgedCare"]));
                        }
                        else if (Utilities.GetAddressType().ToString() == "ContactAus")
                        {
                            addressAusControl.Visible = true;
                            addressAusControl.Set(patient.Person.EntityID, true, EntityType.GetByType(EntityType.EntityTypeEnum.Patient), Convert.ToBoolean(Session["SiteIsAgedCare"]));
                        }
                        else
                            throw new Exception("Unknown AddressType in config: " + Utilities.GetAddressType().ToString().ToString());
                        patientReferrer.SetInfo(patient.PatientID, GetUrlParamType().ToString());
                        healthCardInfoControl.SetInfo(patient.PatientID, false, true, true, false, false, true);
                    }
                    else
                        HideTableAndSetErrorMessage();
                }
                else if (GetUrlParamType() == UrlParamType.Add)
                    FillEmptyAddForm();
                else
                    HideTableAndSetErrorMessage();
            }
            else
                GrdRegistration_Reset();


            if (!Utilities.IsDev())
            {
                this.Label1.Visible = false;
            }

        }
        catch (CustomMessageException ex)
        {
            if (IsPostBack) SetErrorMessage(ex.Message); 
            else HideTableAndSetErrorMessage(ex.Message);
        }
        catch (Exception ex)
        {
            if (IsPostBack) SetErrorMessage("", ex.ToString());
            else HideTableAndSetErrorMessage("", ex.ToString());
        }
    }

    #endregion

    #region GetUrlParamType(), IsValidFormID(), GetFormID()

    private bool IsValidFormID()
    {
        string id = Request.QueryString["id"];
        return id != null && Regex.IsMatch(id, @"^\d+$");
    }
    private int GetFormID()
    {
        if (!IsValidFormID())
            throw new CustomMessageException("Invalid url id");

        string id = Request.QueryString["id"];
        return Convert.ToInt32(id);
    }

    private enum UrlParamType { Add, Edit, View, None };
    private UrlParamType GetUrlParamType()
    {
        string type = Request.QueryString["type"];
        if (type != null && type.ToLower() == "add")
            return UrlParamType.Add;
        else if (type != null && type.ToLower() == "edit")
            return UrlParamType.Edit;
        else if (type != null && type.ToLower() == "view")
            return UrlParamType.View;
        else
            return UrlParamType.None;
    }

    #endregion


    private void SetupGUI()
    {
        ddlDOB_Day.Items.Add(new ListItem("--", "-1"));
        ddlDOB_Month.Items.Add(new ListItem("--", "-1"));
        ddlDOB_Year.Items.Add(new ListItem("----", "-1"));

        for (int i = 1; i <= 31; i++)
            ddlDOB_Day.Items.Add(new ListItem(i.ToString(), i.ToString()));
        for (int i = 1; i <= 12; i++)
            ddlDOB_Month.Items.Add(new ListItem(i.ToString(), i.ToString()));
        for (int i = 1900; i <= DateTime.Today.Year; i++)
            ddlDOB_Year.Items.Add(new ListItem(i.ToString(), i.ToString()));

        txtStartDate_Picker.OnClientClick = "displayDatePicker('txtStartDate', this, 'dmy', '-'); return false;";
        txtEndDate_Picker.OnClientClick   = "displayDatePicker('txtEndDate',   this, 'dmy', '-'); return false;";


        ddlConcessionCardExpiry_Month.Items.Add(new ListItem("--", "-1"));
        ddlConcessionCardExpiry_Year.Items.Add(new ListItem("--", "-1"));

        for (int i = 1; i <= 12; i++)
            ddlConcessionCardExpiry_Month.Items.Add(new ListItem(i.ToString(), i.ToString()));
        for (int i = DateTime.Today.Year - 10; i <= DateTime.Today.Year + 10; i++)
            ddlConcessionCardExpiry_Year.Items.Add(new ListItem(i.ToString(), i.ToString()));

        acTypeRow.Visible = Convert.ToBoolean(Session["SiteIsAgedCare"]);

        bool editable = GetUrlParamType() == UrlParamType.Add || GetUrlParamType() == UrlParamType.Edit;
        Utilities.SetEditControlBackColour(ddlTitle ,            editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtFirstname ,        editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtMiddlename ,       editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtSurname ,          editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtNickname ,         editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlGender ,           editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlDOB_Day ,          editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlDOB_Month ,        editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlDOB_Year ,         editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtPrivateHealthFund, editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtConcessionCardNbr, editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlConcessionCardExpiry_Month, editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlConcessionCardExpiry_Year,  editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlACInvOffering,     editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);

    }

    protected void btnUpdateNotesIcon_Click(object sender, EventArgs e)
    {
        Patient patient = PatientDB.GetByID(GetFormID());
        //lnkNotes.ImageUrl = NoteDB.HasNotes(patient.Person.EntityID) ? "~/images/notes-48.png" : "~/images/notes-bw-48.jpg";

        SetNotesList(patient);
    }
    protected void btnUpdateFlashingTextIcon_Click(object sender, EventArgs e)
    {
        Patient patient = PatientDB.GetByID(GetFormID());
        lblFlashingText.Text = patient.FlashingText;
    }
    protected void btnUpdateReferrersList_Click(object sender, EventArgs e)
    {
        this.patientReferrer.UpdateReferrersList();
    }
    protected void btnUpdateBookingList_Click(object sender, EventArgs e)
    {
        SetBookingsList();
    }

    protected void btnSearchBookingList_Click(object sender, EventArgs e)
    {
        SetBookingsList();
    }
    protected DataTable SetBookingsList(Patient patient = null)
    {
        if (txtStartDate.Text.Length > 0 && !Utilities.IsValidDate(txtStartDate.Text, "dd-mm-yyyy"))
        {
            SetErrorMessage("Start date must be empty or valid and of the format dd-mm-yyyy");
            return null;
        }
        if (txtEndDate.Text.Length > 0 && !Utilities.IsValidDate(txtEndDate.Text, "dd-mm-yyyy"))
        {
            SetErrorMessage("End date must be empty or valid and of the format dd-mm-yyyy");
            return null;
        }
        DateTime startDate = txtStartDate.Text.Length == 0 ? DateTime.MinValue : Utilities.GetDate(txtStartDate.Text, "dd-mm-yyyy");
        DateTime endDate   = txtEndDate.Text.Length   == 0 ? DateTime.MinValue : Utilities.GetDate(txtEndDate.Text,   "dd-mm-yyyy");

        bool SiteIsAgedCare = Convert.ToBoolean(Session["SiteIsAgedCare"]);
        bool SiteIsClinic   = Convert.ToBoolean(Session["SiteIsClinic"]);

        bool isStakeholder   = Session["IsStakeholder"] != null && Convert.ToBoolean(Session["IsStakeholder"]);
        bool isMasterAdmin   = Session["IsMasterAdmin"] != null && Convert.ToBoolean(Session["IsMasterAdmin"]);
        bool isAdmin         = Session["IsAdmin"]       != null && Convert.ToBoolean(Session["IsAdmin"]);
        bool isPrincipal     = Session["IsPrincipal"]   != null && Convert.ToBoolean(Session["IsPrincipal"]);
        bool isProvider      = Session["IsProvider"]    != null && Convert.ToBoolean(Session["IsProvider"]);

        int loggedInStaffID = Session["StaffID"] == null ? -1 : Convert.ToInt32(Session["StaffID"]);

        if (patient == null)
            patient = PatientDB.GetByID(GetFormID());


        Invoice[] outstandingInvoices = InvoiceDB.GetOutstanding(patient.PatientID, Convert.ToInt32(Session["SiteID"]));


        // show outstanding for those not attached to a booking on top of booking list
        // show others with the bookings list (below)
        System.Collections.ArrayList outstandingPrivateInvoices = new System.Collections.ArrayList();
        for (int i = 0; i < outstandingInvoices.Length; i++)
            if (outstandingInvoices[i].Booking == null)
                outstandingPrivateInvoices.Add(outstandingInvoices[i]);
        lblInvoiceOwingMessage.Text = string.Empty;
        if (outstandingPrivateInvoices.Count > 0)
        {
            lblInvoiceOwingMessage.Text = "<font color=\"red\">Has outstanding invoices on cash sales:<br>";

            lblInvoiceOwingMessage.Text += "<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">";
            for (int i = 0; i < outstandingPrivateInvoices.Count; i++)
            {
                string onclick = @"onclick=""javascript:window.showModalDialog('ViewInvoice.aspx?invoice_id=" + ((Invoice)outstandingPrivateInvoices[i]).InvoiceID + @"', '', 'dialogWidth:675px;dialogHeight:725px;center:yes;resizable:no; scroll:no');return false;""";
                string link = "<a " + onclick + " href=\"\">View Inv.</a>";

                lblInvoiceOwingMessage.Text += "<tr>";
                lblInvoiceOwingMessage.Text += "  <td style=\"width:30px\"></td>";
                lblInvoiceOwingMessage.Text += "  <td><b>Owes $" + ((Invoice)outstandingPrivateInvoices[i]).TotalDue + "</b>"+"</td>";
                lblInvoiceOwingMessage.Text += "  <td style=\"width:15px\"></td>";
                lblInvoiceOwingMessage.Text += "  <td>" + link + "</td>";
                lblInvoiceOwingMessage.Text += "</tr>";
            }

            lblInvoiceOwingMessage.Text += "</table>";
            lblInvoiceOwingMessage.Text += "</font><br />";
        }


        DataTable tblBookingList = BookingDB.GetDataTable_Between(startDate, endDate, null, null, patient, null, true);
        lblBookingListCount.Text = "("+tblBookingList.Rows.Count+")";
        if (tblBookingList.Rows.Count == 0)
        {
            lblBookingsList_NoRowsMessage.Visible = true;
            pnlBookingsList.Visible = false;
        }
        else
        {
            lblBookingsList_NoRowsMessage.Visible = false;
            pnlBookingsList.Visible = true;


            System.Collections.Hashtable staffHash = StaffDB.GetAllInHashtable(true, true, false, false);
            System.Collections.ArrayList bookingsWithInvoices = new System.Collections.ArrayList();


            tblBookingList.Columns.Add("notes_text",              typeof(string));
            tblBookingList.Columns.Add("invoice_text",            typeof(string));
            tblBookingList.Columns.Add("booking_url",             typeof(string));
            tblBookingList.Columns.Add("hide_booking_link",       typeof(Boolean));
            tblBookingList.Columns.Add("show_invoice_row",        typeof(int));
            tblBookingList.Columns.Add("show_notes_row",          typeof(int));
            tblBookingList.Columns.Add("show_printletter_row",    typeof(int));
            tblBookingList.Columns.Add("show_bookingsheet_row",   typeof(int));
            tblBookingList.Columns.Add("inv_type_text",           typeof(string));
            tblBookingList.Columns.Add("inv_outstanding_text",    typeof(string));
            tblBookingList.Columns.Add("show_outstanding_row",    typeof(int));
            tblBookingList.Columns.Add("added_by_deleted_by_row", typeof(string));
            bool hasInvoiceRows      = false;
            bool hasNotesRows        = false;
            bool hasPrintLetterRows  = false;
            bool hasBookingSheetRows = false;
            bool hasOutstandingRows = false;
            for (int i = 0; i < tblBookingList.Rows.Count; i++)
            {
                Booking curBooking = BookingDB.LoadFull(tblBookingList.Rows[i]);

                tblBookingList.Rows[i]["notes_text"] = Note.GetPopupLinkText(15, curBooking.EntityID, curBooking.NoteCount > 0, true, 980, 430, "images/notes-bw-24.jpg", "images/notes-24.png", "btnUpdateBookingList.click()");

                bool canSeeInvoiceInfo = isStakeholder || isMasterAdmin || isAdmin || isPrincipal || (curBooking.Provider != null && curBooking.Provider.StaffID == loggedInStaffID && curBooking.DateStart > DateTime.Today.AddMonths(-2));
                if (canSeeInvoiceInfo && Convert.ToInt32(tblBookingList.Rows[i]["booking_inv_count"]) > 0)
                {
                    string onclick = @"onclick=""javascript:window.showModalDialog('ViewInvoice.aspx?booking_id=" + curBooking.BookingID + @"', '', 'dialogWidth:820px;dialogHeight:860px;center:yes;resizable:no; scroll:no');return false;""";
                    tblBookingList.Rows[i]["invoice_text"] = "<a " + onclick + " href=\"\">View Inv.</a>";

                    if (curBooking.DateDeleted == DateTime.MinValue && curBooking.DeletedBy == null)
                        hasInvoiceRows = true;

                    bookingsWithInvoices.Add(curBooking.BookingID);
                }
                else
                {
                    tblBookingList.Rows[i]["invoice_text"] = "";
                }

                tblBookingList.Rows[i]["hide_booking_link"] = !((SiteIsClinic && curBooking.Organisation.OrganisationType.OrganisationTypeID == 218) ||
                                                                (SiteIsAgedCare && (new List<int> { 139, 367, 372 }).Contains(curBooking.Organisation.OrganisationType.OrganisationTypeID)));

                if (curBooking.DateDeleted == DateTime.MinValue && curBooking.DeletedBy == null)
                {
                    hasNotesRows        = true;
                    hasPrintLetterRows  = true;
                    if (!Convert.ToBoolean(tblBookingList.Rows[i]["hide_booking_link"]))
                        hasBookingSheetRows = true;
                }

                string urlParams = string.Empty;
                if (curBooking.Organisation != null)
                    urlParams += (urlParams.Length == 0 ? "?" : "&") + "orgs=" + curBooking.Organisation.OrganisationID;
                if (curBooking.Patient != null)
                    urlParams += (urlParams.Length == 0 ? "?" : "&") + "patient=" + curBooking.Patient.PatientID;
                urlParams += (urlParams.Length == 0 ? "?" : "&") + "scroll_to_cell=" + "td_" + (curBooking.Organisation != null ? "" : curBooking.Organisation.OrganisationID.ToString()) + "_" + curBooking.Provider.StaffID + "_" + curBooking.DateStart.ToString("yyyy_MM_dd_HHmm");
                urlParams += (urlParams.Length == 0 ? "?" : "&") + "date=" + curBooking.DateStart.ToString("yyyy_MM_dd");
                tblBookingList.Rows[i]["booking_url"] = curBooking.GetBookingSheetLink();

                decimal totalOwing = 0;
                for(int j=0; j<outstandingInvoices.Length; j++)
                    if (outstandingInvoices[j].Booking != null && outstandingInvoices[j].Booking.BookingID == curBooking.BookingID)
                        totalOwing += outstandingInvoices[j].TotalDue;
                tblBookingList.Rows[i]["inv_outstanding_text"] = totalOwing == 0 ? "" : "<font color=\"red\"><b>Owes<br />$" + totalOwing.ToString() + "</b></font>";
                if (totalOwing > 0)
                    hasOutstandingRows = true;


                string addedBy     = curBooking.AddedBy     == null || staffHash[curBooking.AddedBy.StaffID]   == null ? "" : ((Staff)staffHash[curBooking.AddedBy.StaffID]).Person.FullnameWithoutMiddlename;
                string addedDate   = curBooking.DateCreated == DateTime.MinValue                                       ? "" : curBooking.DateCreated.ToString("MMM d, yyyy");
                string deletedBy   = curBooking.DeletedBy   == null || staffHash[curBooking.DeletedBy.StaffID] == null ? "" : ((Staff)staffHash[curBooking.DeletedBy.StaffID]).Person.FullnameWithoutMiddlename;
                string deletedDate = curBooking.DateDeleted == DateTime.MinValue                                       ? "" : curBooking.DateDeleted.ToString("MMM d, yyyy");
                string added_by_deleted_by_row = string.Empty;
                added_by_deleted_by_row += "Added By: " + addedBy + " (" + addedDate + ")";
                if (deletedBy.Length > 0 || deletedDate.Length > 0)
                    added_by_deleted_by_row += "\r\nDeleted By: " + deletedBy + " (" + deletedDate + ")";
                tblBookingList.Rows[i]["added_by_deleted_by_row"] = added_by_deleted_by_row;
            }

            System.Collections.Hashtable hashHasMedicareOrDVAInvoices = BookingDB.GetHashHasMedicareDVA((int[])bookingsWithInvoices.ToArray(typeof(int)));

            for (int i = 0; i < tblBookingList.Rows.Count; i++)
            {
                tblBookingList.Rows[i]["show_invoice_row"]      = hasInvoiceRows      ? 1 : 0;
                tblBookingList.Rows[i]["show_notes_row"]        = hasNotesRows        ? 1 : 0;
                tblBookingList.Rows[i]["show_printletter_row"]  = hasPrintLetterRows  ? 1 : 0;
                tblBookingList.Rows[i]["show_bookingsheet_row"] = hasBookingSheetRows ? 1 : 0;
                tblBookingList.Rows[i]["show_outstanding_row"]  = hasOutstandingRows  ? 1 : 0;

                int  booking_id   = Convert.ToInt32(tblBookingList.Rows[i]["booking_booking_id"]);
                bool has_medicare = hashHasMedicareOrDVAInvoices[new Hashtable2D.Key(booking_id, -1)] != null && Convert.ToBoolean(hashHasMedicareOrDVAInvoices[new Hashtable2D.Key(booking_id, -1)]);
                bool has_dva      = hashHasMedicareOrDVAInvoices[new Hashtable2D.Key(booking_id, -2)] != null && Convert.ToBoolean(hashHasMedicareOrDVAInvoices[new Hashtable2D.Key(booking_id, -2)]);
                if (has_medicare) tblBookingList.Rows[i]["inv_type_text"] = "Medicare";
                else if (has_dva) tblBookingList.Rows[i]["inv_type_text"] = "DVA";
                else              tblBookingList.Rows[i]["inv_type_text"] = string.Empty;
            }
            tblBookingList.DefaultView.Sort = "booking_date_start DESC";
            tblBookingList = tblBookingList.DefaultView.ToTable();
            lstBookingList.DataSource = tblBookingList;
            lstBookingList.DataBind();
        }

        return tblBookingList;
    }

    protected void btnPrintBookingList_Click(object sender, EventArgs e)
    {
        DataTable tblBookingList = SetBookingsList();
        if (tblBookingList == null)
            return;

        try
        {
            string originalFile        = Letter.GetLettersDirectory() + @"BookingListForPatient.docx";
            string tmpLettersDirectory = Letter.GetTempLettersDirectory();
            string tmpOutputFile       = FileHelper.GetTempFileName(tmpLettersDirectory + "BookingList." + System.IO.Path.GetExtension(originalFile));


            // create table data to populate

            DataTable dt = tblBookingList;
            string[,] tblInfo = null;
            bool tblEmpty = (dt.Rows.Count == 1 && dt.Rows[0][0] == DBNull.Value);
            if (tblEmpty)
            {
                tblInfo = new string[1, 4];
                tblInfo[0, 0] = "No Bookings Found";
                tblInfo[0, 1] = "";
                tblInfo[0, 2] = "";
                tblInfo[0, 3] = "";
            }
            else
            {
                tblInfo = new string[dt.Rows.Count, 4];
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    string inv_type_text = tblBookingList.Rows[i]["inv_type_text"].ToString();
                    if (inv_type_text.Length > 0) inv_type_text = " (" + inv_type_text + ")";

                    Booking booking = BookingDB.LoadFull(dt.Rows[i]);
                    tblInfo[i, 0] = booking.DateStart.ToString("d MMM yyyy") + Environment.NewLine + booking.DateStart.ToString("h:mm") + " - " + booking.DateEnd.ToString("h:mm") + (booking.DateEnd.Hour < 12 ? "am" : "pm");
                    tblInfo[i, 1] = booking.Patient == null ? "" : booking.Patient.Person.FullnameWithoutMiddlename;
                    tblInfo[i, 2] = (booking.Offering == null ? "" : booking.Offering.Name + Environment.NewLine) + booking.Provider.Person.FullnameWithoutMiddlename + " @ " + booking.Organisation.Name;
                    tblInfo[i, 3] = booking.BookingStatus.Descr + Environment.NewLine + inv_type_text;
                }
            }


            // create empty dataset

            System.Data.DataSet sourceDataSet = new System.Data.DataSet();
            sourceDataSet.Tables.Add("MergeIt");


            // merge

            string errorString = null;
            WordMailMerger.Merge(

                originalFile,
                tmpOutputFile,
                sourceDataSet,

                tblInfo,
                1,
                true,

                false,
                null,
                out errorString);

            if (errorString != string.Empty)
                throw new CustomMessageException(errorString);

            Letter.FileContents fileContents = new Letter.FileContents(System.IO.File.ReadAllBytes(tmpOutputFile), "BookingList." + System.IO.Path.GetExtension(originalFile));
            System.IO.File.Delete(tmpOutputFile);


            // Nothing gets past the "DownloadDocument" method because it outputs the file 
            // which is writing a response to the client browser and calls Response.End()
            // So make sure any other code that functions goes before this
            Letter.DownloadDocument(Response, fileContents.Contents, fileContents.DocName);
        }
        catch(CustomMessageException cmEx)
        {
            SetErrorMessage(cmEx.Message);
        }
        catch(Exception ex)
        {
            SetErrorMessage(ex.ToString());
        }

    }


    protected void btnUpdateNoteList_Click(object sender, EventArgs e)
    {
        SetNotesList();
    }
    protected void SetNotesList(Patient patient = null)
    {
        bool isStakeholder  = Session["IsStakeholder"] != null && Convert.ToBoolean(Session["IsStakeholder"]);
        bool isMasterAdmin  = Session["IsMasterAdmin"] != null && Convert.ToBoolean(Session["IsMasterAdmin"]);
        bool isAdmin        = Session["IsAdmin"]       != null && Convert.ToBoolean(Session["IsAdmin"]);
        bool isPrincipal    = Session["IsPrincipal"]   != null && Convert.ToBoolean(Session["IsPrincipal"]);
        bool isProvider     = Session["IsProvider"]    != null && Convert.ToBoolean(Session["IsProvider"]);

        int loggedInStaffID = Session["StaffID"] == null ? -1 : Convert.ToInt32(Session["StaffID"]);

        if (patient == null)
            patient = PatientDB.GetByID(GetFormID());

        DataTable tblNoteList = NoteDB.GetDataTable_ByEntityID(patient.Person.EntityID, null, false);

        lblNotesListCount.Text = "(" + tblNoteList.Rows.Count + ")";
        if (tblNoteList.Rows.Count == 0)
        {
            lblNotesList_NoRowsMessage.Visible = true;
            pnlNotesList.Visible = false;
        }
        else
        {
            lblNotesList_NoRowsMessage.Visible = false;
            pnlNotesList.Visible = true;

            //tblBookingList.DefaultView.Sort = "booking_date_start DESC";
            lstNoteList.DataSource = tblNoteList;
            lstNoteList.DataBind();
        }


        //
        // set booking list scroll panel max-height depending on size of notes list
        //

        int totalNoteLines = 0;
        for (int i = 0; i < tblNoteList.Rows.Count; i++)
            totalNoteLines += ((int)(NoteDB.Load(tblNoteList.Rows[i]).Text.Length / 70) + 1);

        if (totalNoteLines > 10)
            pnlBookingsList.Style["max-height"] = "250px";
        else if (totalNoteLines > 6)
            pnlBookingsList.Style["max-height"] = "320px";
        else if (totalNoteLines > 2)
            pnlBookingsList.Style["max-height"] = "390px";
        else
            pnlBookingsList.Style["max-height"] = "470px";

    }


    private void FillEditViewForm(Patient patient, bool isEditMode)
    {
        bool isStakeholder = Session["IsStakeholder"]  != null && Convert.ToBoolean(Session["IsStakeholder"]);
        bool isMasterAdmin = Session["IsMasterAdmin"]  != null && Convert.ToBoolean(Session["IsMasterAdmin"]);
        bool isAdmin       = Session["IsAdmin"]        != null && Convert.ToBoolean(Session["IsAdmin"]);
        bool isPrincipal   = Session["IsPrincipal"]    != null && Convert.ToBoolean(Session["IsPrincipal"]);
        bool isAdminView   = isStakeholder || isMasterAdmin || isAdmin;

        Hashtable offeringsHash = OfferingDB.GetHashtable(true, -1, null, true);
        PatientDB.AddACOfferings(ref offeringsHash, ref patient);


        patient.Person = PersonDB.GetByID(patient.Person.PersonID);
        Person addedBy = patient.Person.PersonID < 0 ? null : PersonDB.GetByID(patient.Person.AddedBy);

        //Heading.Text += " : " + patient.Person.FullnameWithoutMiddlename + (patient.Person.Nickname.Length == 0 ? "" : " (" + patient.Person.Nickname + ")");
        Heading.Text = patient.Person.FullnameWithoutMiddlename + (patient.Person.Nickname.Length == 0 ? "" : " (" + patient.Person.Nickname + ")");
        lblPatientID.Text = "[ID:" + patient.PatientID + "]";
        Page.Title = ((SystemVariables)Session["SystemVariables"])["Site"].Value + " - " + patient.Person.FullnameWithoutMiddlename;

        string screen_id = "6";
        string allFeatures = "dialogWidth:980px;dialogHeight:430px;center:yes;resizable:no; scroll:no";
        string js = "javascript:window.showModalDialog('" + "NoteInfo.aspx?id=" + patient.Person.EntityID.ToString() + "&screen=" + screen_id + "', '', '" + allFeatures + "');document.getElementById('btnUpdateNotesIcon').click();return false;";
        this.lnkNotes.Attributes["onclick"] = js;

        string allFeaturesFlashingText = "dialogWidth:525px;dialogHeight:175px;center:yes;resizable:no; scroll:no";
        string jsFlashingText = "javascript: document.getElementById('lblFlashingText').style.display = ''; window.showModalDialog('" + "AddEditPatientFlashingMessage.aspx?type=edit&id=" + patient.PatientID.ToString() + "', '', '" + allFeaturesFlashingText + "');document.getElementById('btnUpdateFlashingTextIcon').click();return false;";
        this.lnkFlashingText.Attributes.Add("onclick", jsFlashingText);
        this.lnkFlashingText.ImageUrl = "~/images/asterisk_12.png";
        this.lblFlashingText.Text = patient.FlashingText;
        this.lblFlashingText.Attributes.Add("onclick", jsFlashingText);


        if (!Utilities.IsDev())
            idRow.Attributes["class"] = "hiddencol";

        this.lnkMakeBooking.Visible = true;
        this.lnkMakeBooking.Text = "Book Other Clinic";
        this.lnkMakeBooking.NavigateUrl = (Convert.ToBoolean(Session["SiteIsAgedCare"])) ?
            "~/SelectOrganisations.aspx" :
            "~/SelectOrganisations.aspx?patient=" + GetFormID().ToString();

        


        this.lnkBookingList.Visible = true;
        this.lnkBookingList.Text = "Bookings List";
        this.lnkBookingList.NavigateUrl = "~/BookingsList.aspx?patient=" + GetFormID().ToString();

        this.lnkInvoices.Visible = true;
        this.lnkInvoices.Text = "View Invoices";
        this.lnkInvoices.NavigateUrl = "~/InvoiceInfo.aspx?patient=" + GetFormID().ToString();

        UpdateScannedDocumentsCount();

        // get last, next bookings
        Booking mostRecentBooking = BookingDB.GetMostRecent(patient.PatientID);
        this.lnkLastBooking.Text = mostRecentBooking == null ? "None" : mostRecentBooking.DateStart.ToString("d MMM yyyy");
        this.lnkLastBooking.NavigateUrl = mostRecentBooking == null ? "" : mostRecentBooking.GetBookingSheetLink();

        Booking nextBooking = BookingDB.GetNextAfterNow(patient.PatientID);
        this.lnkNextBooking.Text = nextBooking == null ? "None" : nextBooking.DateStart.ToString("d MMM yyyy");
        this.lnkNextBooking.NavigateUrl = nextBooking == null ? "" : nextBooking.GetBookingSheetLink();


        this.lnkLetterPrintHistory.NavigateUrl = String.Format("~/LetterPrintHistory.aspx?patient={0}", patient.PatientID);
        this.lnkLetterBestPrintHistory.NavigateUrl = String.Format("~/LetterBestPrintHistory.aspx?patient={0}", patient.PatientID);
        this.lnkPrintLetter.NavigateUrl = String.Format("~/PrintLetter.aspx?patient={0}", patient.PatientID);


        lblId.Text               = patient.PatientID.ToString();
        lblAddedBy.Text          = addedBy == null ? "--" : addedBy.Firstname + " " + addedBy.Surname;
        lblPatientDateAdded.Text = patient.PatientDateAdded.ToString("dd-MM-yyyy");

        lblDeleteUndeletePatientText.Text = patient.IsDeleted ? "Un-Delete Patient" : "Delete Patient";
        btnDeleteUndeletePatient.CommandName = patient.IsDeleted ? "UnDelete" : "Delete";
        btnDeleteUndeletePatient.Text = patient.IsDeleted ? "Un-Delete" : "Delete";

        btnHistory.OnClientClick = @"javascript:window.showModalDialog('/PatientEditHistory.aspx?id=" + patient.PatientID + @"', '', 'dialogWidth:" + (Convert.ToBoolean(Session["SiteIsClinic"]) ? "1300" : "1400") + "px;dialogHeight:300px;center:yes;resizable:no; scroll:no');return false;";
        changeHistoryLinknRow.Visible = PatientHistoryDB.Exists(patient.PatientID);


        if (isEditMode)
        {
            DataTable titles = DBBase.GetGenericDataTable_WithWhereOrderClause("Title", patient.Person.Title.ID == 0 ? "" : " title_id <> 0 ", " descr ", "title_id", "descr");
            ddlTitle.DataSource = titles;
            ddlTitle.DataBind();

            ddlTitle.SelectedValue  = patient.Person.Title.ID.ToString();
            txtFirstname.Text       = patient.Person.Firstname;
            txtMiddlename.Text      = patient.Person.Middlename;
            txtSurname.Text         = patient.Person.Surname;
            txtNickname.Text        = patient.Person.Nickname;
            if (ddlGender.Items.FindByValue(patient.Person.Gender) == null)
                ddlGender.Items.Add(new ListItem(patient.Person.Gender == "" ? "--" : patient.Person.Gender, patient.Person.Gender));
            ddlGender.SelectedValue = patient.Person.Gender;

            if (patient.Person.Dob != DateTime.MinValue)
            {
                ddlDOB_Day.SelectedValue   = patient.Person.Dob.Day.ToString();
                ddlDOB_Month.SelectedValue = patient.Person.Dob.Month.ToString();

                int firstYearSelectable = Convert.ToInt32(ddlDOB_Year.Items[1].Value);
                int lastYearSelectable  = Convert.ToInt32(ddlDOB_Year.Items[ddlDOB_Year.Items.Count - 1].Value);
                if (patient.Person.Dob.Year < firstYearSelectable)
                    ddlDOB_Year.Items.Insert(1, new ListItem(patient.Person.Dob.Year.ToString(), patient.Person.Dob.Year.ToString()));
                if (patient.Person.Dob.Year > lastYearSelectable)
                    ddlDOB_Year.Items.Add(new ListItem(patient.Person.Dob.Year.ToString(), patient.Person.Dob.Year.ToString()));

                ddlDOB_Year.SelectedValue = patient.Person.Dob.Year.ToString();
            }

            chkIsClinicPatient.Checked = patient.IsClinicPatient;
            chkIsDeceased.Checked = patient.IsDeceased;
            chkIsDiabetic.Checked = patient.IsDiabetic;
            chkIsMemberDiabetesAustralia.Checked = patient.IsMemberDiabetesAustralia;

            txtPrivateHealthFund.Text = patient.PrivateHealthFund;
            txtConcessionCardNbr.Text = patient.ConcessionCardNumber;
            if (patient.ConcessionCardExpiryDate != DateTime.MinValue)
            {
                Utilities.AddIfNotExists(ddlConcessionCardExpiry_Month, patient.ConcessionCardExpiryDate.Month);
                ddlConcessionCardExpiry_Month.SelectedValue = patient.ConcessionCardExpiryDate.Month.ToString();

                Utilities.AddIfNotExists(ddlConcessionCardExpiry_Year, patient.ConcessionCardExpiryDate.Year);
                ddlConcessionCardExpiry_Year.SelectedValue = patient.ConcessionCardExpiryDate.Year.ToString();
            }




            int    ac_inv_offering_id   = patient.ACInvOffering == null ? -1           : patient.ACInvOffering.OfferingID;
            int    ac_pat_offering_id   = patient.ACPatOffering == null ? -1           : patient.ACPatOffering.OfferingID;
            string ac_inv_offering_name = patient.ACInvOffering == null ? string.Empty : patient.ACInvOffering.Name;
            string ac_pat_offering_name = patient.ACPatOffering == null ? string.Empty : patient.ACPatOffering.Name;

            int    ac_inv_aged_care_patient_type_id    = patient.ACInvOffering == null ? -1           : patient.ACInvOffering.AgedCarePatientType.ID;
            string ac_inv_aged_care_patient_type_descr = patient.ACInvOffering == null ? string.Empty : patient.ACInvOffering.AgedCarePatientType.Descr;
            int    ac_pat_aged_care_patient_type_id    = patient.ACInvOffering == null ? -1           : patient.ACPatOffering.AgedCarePatientType.ID;
            string ac_pat_aged_care_patient_type_descr = patient.ACInvOffering == null ? string.Empty : patient.ACPatOffering.AgedCarePatientType.Descr;

            DataTable dt_offerings = OfferingDB.GetDataTable(true, -1, null, true);
            for (int i = dt_offerings.Rows.Count - 1; i >= 0; i--)
            {
                Offering o = OfferingDB.LoadAll(dt_offerings.Rows[i]);
                int o_id = o.OfferingID;
                int o_ac_pt_id = Convert.ToInt32(dt_offerings.Rows[i]["acpatientcat_aged_care_patient_type_id"]);

                if (Convert.ToInt32(dt_offerings.Rows[i]["o_offering_id"]) != ac_inv_offering_id &&
                    (Convert.ToInt32(dt_offerings.Rows[i]["o_aged_care_patient_type_id"]) == 1 || Convert.ToBoolean(dt_offerings.Rows[i]["o_is_deleted"])))
                    dt_offerings.Rows.RemoveAt(i);

                // if clinic patient and no ac pt type set, only allow HC/LC/HCU/LCF
                else if ((ac_inv_aged_care_patient_type_id == -1 || ac_pat_aged_care_patient_type_id == -1) &&
                    !(new List<int> { 2, 3, 4, 5 }).Contains(Convert.ToInt32(dt_offerings.Rows[i]["acpatientcat_aged_care_patient_type_id"])))
                    dt_offerings.Rows.RemoveAt(i);

                else if (!(new List<int> { 2, 4 }).Contains(ac_pat_aged_care_patient_type_id) && Convert.ToInt32(dt_offerings.Rows[i]["acpatientcat_aged_care_patient_type_id"]) == 9) // if not LC/LCF - remove option for DVA
                    dt_offerings.Rows.RemoveAt(i);
                else if (!(new List<int> { 2, 4 }).Contains(ac_pat_aged_care_patient_type_id) && Convert.ToInt32(dt_offerings.Rows[i]["acpatientcat_aged_care_patient_type_id"]) == 6) // if not LC/LCF - remove option for LCE
                    dt_offerings.Rows.RemoveAt(i);
                else if (!(new List<int> { 3, 5 }).Contains(ac_pat_aged_care_patient_type_id) && Convert.ToInt32(dt_offerings.Rows[i]["acpatientcat_aged_care_patient_type_id"]) == 7) // if not HC/HCU - remove option for HCE
                    dt_offerings.Rows.RemoveAt(i);

                else if (ac_inv_offering_id != -1 && (new List<int> { 2, 3, 4, 5 }).Contains(ac_inv_aged_care_patient_type_id) && (new List<int> { 6, 7, 8, 9, 10 }).Contains(Convert.ToInt32(dt_offerings.Rows[i]["o_aged_care_patient_type_id"])))
                    dt_offerings.Rows[i]["o_name"] = dt_offerings.Rows[i]["o_name"].ToString() + " (" + ac_pat_offering_name + ")";
            }

            DataView dv = dt_offerings.DefaultView;
            dv.Sort = "acpatientcat_aged_care_patient_type_id, o_name";
            dt_offerings = dv.ToTable();

            ddlACInvOffering.DataSource = dt_offerings;
            ddlACInvOffering.DataBind();

            if (patient.ACInvOffering != null)
                ddlACInvOffering.SelectedValue = patient.ACInvOffering.OfferingID.ToString();




            lblTitle.Visible                = false;
            lblFirstname.Visible            = false;
            lblMiddlename.Visible           = false;
            lblSurname.Visible              = false;
            lblNickname.Visible             = false;
            lblGender.Visible               = false;
            lblDOB.Visible                  = false;
            lblIsClinicPatient.Visible      = false;
            lblIsDeceased.Visible           = false;
            lblIsDiabetic.Visible           = false;
            lblIsMemberDiabetesAustralia.Visible = false;
            lblPrivateHealthFund.Visible    = false;
            lblConcessionCardNbr.Visible    = false;
            lblConcessionCardExpiry.Visible = false;
            lblACInvOffering.Visible        = false;
        }
        else
        {
            lblTitle.Text             = patient.Person.Title.ID          == 0 ? "--" : patient.Person.Title.Descr;
            lblFirstname.Text         = patient.Person.Firstname.Length  == 0 ? "--" : patient.Person.Firstname;
            lblMiddlename.Text        = patient.Person.Middlename.Length == 0 ? "--" : patient.Person.Middlename;
            lblSurname.Text           = patient.Person.Surname.Length    == 0 ? "--" : patient.Person.Surname;
            lblNickname.Text          = patient.Person.Nickname.Length   == 0 ? "--" : patient.Person.Nickname;
            lblGender.Text            = GetGenderText(patient.Person.Gender);
            lblDOB.Text               = patient.Person.Dob == DateTime.MinValue ? "--" : patient.Person.Dob.ToString("dd-MM-yyyy");
            lblIsClinicPatient.Text   = patient.IsClinicPatient ? "Yes" : "No";
            lblIsDeceased.Text        = patient.IsDeceased      ? "Yes" : "No";
            lblIsDiabetic.Text        = patient.IsDiabetic ? "Yes" : "No";
            lblIsMemberDiabetesAustralia.Text = patient.IsMemberDiabetesAustralia ? "Yes" : "No";
            lblPrivateHealthFund.Text = patient.PrivateHealthFund.Length == 0 ? "--" : patient.PrivateHealthFund;
            lblConcessionCardNbr.Text    = patient.ConcessionCardNumber.Length == 0 ? "--" : patient.ConcessionCardNumber;
            lblConcessionCardExpiry.Text = patient.ConcessionCardExpiryDate     == DateTime.MinValue ? "--" : patient.ConcessionCardExpiryDate.ToString("MM  '/'  yyyy");
            lblAddedBy.Font.Bold          = true;
            lblPatientDateAdded.Font.Bold = true;

            if (patient.ACInvOffering == null)
                lblACInvOffering.Text = string.Empty;
            else if ((new List<int> { 2, 3, 4, 5 }).Contains(patient.ACInvOffering.AgedCarePatientType.ID))
                lblACInvOffering.Text = patient.ACInvOffering.Name;
            else if ((new List<int> { 6, 7, 8, 9, 10 }).Contains(patient.ACInvOffering.AgedCarePatientType.ID))
                lblACInvOffering.Text = patient.ACInvOffering.Name + " (" + patient.ACPatOffering.Name + ")";
            else // (?)
                lblACInvOffering.Text = patient.ACInvOffering.Name;



            ddlTitle.Visible             = false;
            txtFirstname.Visible         = false;
            txtMiddlename.Visible        = false;
            txtSurname.Visible           = false;
            txtNickname.Visible          = false;
            ddlGender.Visible            = false;
            ddlDOB_Day.Visible           = false;
            ddlDOB_Month.Visible         = false;
            ddlDOB_Year.Visible          = false;
            chkIsClinicPatient.Visible   = false;
            chkIsDeceased.Visible        = false;
            chkIsDiabetic.Visible        = false;
            chkIsMemberDiabetesAustralia.Visible  = false;
            txtPrivateHealthFund.Visible = false;
            txtConcessionCardNbr.Visible = false;
            ddlConcessionCardExpiry_Month.Visible = false;
            ddlConcessionCardExpiry_Year.Visible  = false;
            ddlACInvOffering.Visible     = false;
        }

        //this.lnkClinics.Visible = true;
        //this.lnkClinics.NavigateUrl = "~/RegisterOrganisationsToPatient.aspx?id=" + GetFormID().ToString() + "&type=edit";
        //this.lnkClinics.Text = "Add / Remove";

        //DataTable incList = RegisterPatientDB.GetDataTable_OrganisationsOf(patient.PatientID);
        //incList.DefaultView.Sort = "name ASC";
        //lstOrgs.DataSource = incList;
        //lstOrgs.DataBind();

        FillOrganisationRegistrationGrid();

        SetBookingsList(patient);
        SetNotesList(patient);


        td_second_column_add.Visible         = false;
        td_second_column_add_B_Space.Visible = false;
        td_second_column_add_B.Visible       = false;
        td_second_column_edit.Visible        = true;

        td_third_column_edit.Visible         = true;


        btnSubmit.Text = isEditMode ? "Update Details" : "Edit Details";

        btnSubmit.Visible                           = true;
        btnSubmitAddAndGoToViewScreen.Visible       = false;
        btnSubmitAddAndGoToBookingScreen.Visible    = false;
        btnSubmitAddAndGoToHealthCardScreen.Visible = false;
        btnSubmitAddAndAddAonther.Visible           = false;

        btnCancel.Visible = isEditMode;
    }
    protected void lstLetterHistory_RowCommand(object sender, RepeaterCommandEventArgs e)
    {
        if (e.CommandName.Equals("RetrieveLetterDB"))
        {
            int letter_print_hisotory_id = Int32.Parse((string)e.CommandArgument);
            LetterFile letterFile = LetterPrintHistoryDB.GetLetterFile(letter_print_hisotory_id);
            if (letterFile == null)
                throw new CustomMessageException("No file with selected ID");

            Letter.DownloadDocument(Response, letterFile.Contents, letterFile.Name);
        }
        if (e.CommandName.Equals("RetrieveLetterFlatFile"))
        {
            int letter_print_hisotory_id = Int32.Parse((string)e.CommandArgument);
            LetterPrintHistory letterPrintHistory = LetterPrintHistoryDB.GetByID(letter_print_hisotory_id);

            string historyDir = Letter.GetLettersHistoryDirectory(letterPrintHistory.Organisation.OrganisationID);

            string filePath = historyDir + letterPrintHistory.LetterPrintHistoryID + System.IO.Path.GetExtension(letterPrintHistory.DocName);
            if (!System.IO.File.Exists(filePath))
                throw new CustomMessageException("No file with selected ID");

            byte[] fileContents = System.IO.File.ReadAllBytes(filePath);
            Letter.DownloadDocument(Response, fileContents, letterPrintHistory.DocName);
        }
    }
    protected string GetGenderText(string originalText)
    {
        if (originalText.ToUpper() == "M")
            return "Male";
        else if (originalText.ToUpper() == "F")
            return "Female";
        else
            return "--";
    }
    protected void SetNotEditable(System.Web.UI.WebControls.WebControl c)
    {
        c.Enabled = false;
        c.BorderStyle = BorderStyle.None;
        c.BackColor = System.Drawing.Color.Transparent;
        c.ForeColor = System.Drawing.Color.Black;
    }

    private void FillEmptyAddForm()
    {
        Page.Title = ((SystemVariables)Session["SystemVariables"])["Site"].Value + " - " + (Convert.ToBoolean(Session["SiteIsClinic"]) ? "Add Patient" : "Add Resident");
        Heading.Text = Convert.ToBoolean(Session["SiteIsClinic"]) ? "Add Patient" : "Add Resident";

        bool isStakeholder = Session["IsStakeholder"]  != null && Convert.ToBoolean(Session["IsStakeholder"]);
        bool isMasterAdmin = Session["IsMasterAdmin"]  != null && Convert.ToBoolean(Session["IsMasterAdmin"]);
        bool isAdmin       = Session["IsAdmin"]        != null && Convert.ToBoolean(Session["IsAdmin"]);
        bool isPrincipal   = Session["IsPrincipal"]    != null && Convert.ToBoolean(Session["IsPrincipal"]);
        bool isAdminView   = isStakeholder || isMasterAdmin || isAdmin;


        string surnamePostParam = Request.Form["surname"];
        if (surnamePostParam != null)  // sent by http post
            txtSurname.Text = Utilities.FormatName(surnamePostParam);

        string surnameGetParam = Request.QueryString["surname"];
        if (surnameGetParam != null)  // sent by http get
            txtSurname.Text = Utilities.FormatName(surnameGetParam);


        ddlTitle.DataSource = DBBase.GetGenericDataTable_WithWhereOrderClause("Title", " title_id <> 0 ", " descr ", "title_id", "descr");
        ddlTitle.DataBind();
        ddlTitle.SelectedIndex = Utilities.IndexOf(ddlTitle, "mr", "mr.");


        DataTable dt_offerings = OfferingDB.GetDataTable(true, -1, null, true);
        for (int i = dt_offerings.Rows.Count - 1; i >= 0; i--)
        {
            if (Convert.ToInt32(dt_offerings.Rows[i]["o_aged_care_patient_type_id"]) == 1 || Convert.ToBoolean(dt_offerings.Rows[i]["o_is_deleted"]))
                dt_offerings.Rows.RemoveAt(i);

            // only allow LC/HC/LCF/HCF initially ... not medicare/dva/emergency/etc
            else if (!(new List<int> { 2, 3, 4, 5 }).Contains(Convert.ToInt32(dt_offerings.Rows[i]["o_aged_care_patient_type_id"])))
                dt_offerings.Rows.RemoveAt(i);
        }


        DataView dv = dt_offerings.DefaultView;
        dv.Sort = "acpatientcat_aged_care_patient_type_id, o_name";
        dt_offerings = dv.ToTable();

        ddlACInvOffering.DataSource = dt_offerings;
        ddlACInvOffering.DataBind();



        this.lnkNotes.Visible = false;
        lnkFlashingText.Visible = false;

        idRow.Visible                        = false;
        addbyRow.Visible                     = false;
        patientDateAddedRow.Visible          = false;
        changeHistoryLinknRow.Visible        = false;
        deleteUndeletePatientRow.Visible     = false;

        addressControl.Visible               = false;
        addressAusControl.Visible            = false;

        td_second_column_add.Visible         = true;
        td_second_column_add_B.Visible       = true;
        td_second_column_edit.Visible        = false;
        td_third_column_edit.Visible         = false;
        patientReferrer.Visible              = false;


        td_vertical_line1.Visible = false;
        td_vertical_line2.Visible = false;

        btnSubmit.Text = Convert.ToBoolean(Session["SiteIsClinic"]) ? "Add Patient" : "Add Resident";

        btnSubmit.Visible                           = false;
        btnSubmitAddAndGoToViewScreen.Visible       = true;
        btnSubmitAddAndGoToBookingScreen.Visible    = true;
        btnSubmitAddAndGoToHealthCardScreen.Visible = true;
        btnSubmitAddAndAddAonther.Visible           = true;


        SetupAddressGUI();
        SetupHealthCardGUI();
    }

    #region SetupAddressGUI()

    protected void SetupAddressGUI()
    {
        string allFeaturesType = "dialogWidth:500px;dialogHeight:750px;center:yes;resizable:no; scroll:no";
        string jsType = "javascript:window.showModalDialog('" + "ContactTypeInfo.aspx', '', '" + allFeaturesType + "');document.getElementById('btnUpdateAddressType').click();return false;";

        string allFeatures = "dialogWidth:1100px;dialogHeight:600px;center:yes;resizable:no; scroll:no";
        string js = "javascript:window.showModalDialog('" + "StreetAndSuburbInfo.aspx', '', '" + allFeatures + "');document.getElementById('btnUpdateAddressStreetAndSuburb').click();return false;";

        lnkAddressUpdateType.NavigateUrl = "  ";
        lnkAddressUpdateType.Text = "Add/Edit";
        lnkAddressUpdateType.Attributes.Add("onclick", jsType);

        lnkAddressUpdateChannel.NavigateUrl = "  ";
        lnkAddressUpdateChannel.Text = "Add/Edit";
        lnkAddressUpdateChannel.Attributes.Add("onclick", js);

        string allFeaturesType2 = "dialogWidth:500px;dialogHeight:750px;center:yes;resizable:no; scroll:no";
        string jsType2 = "javascript:window.showModalDialog('" + "ContactTypeInfo.aspx', '', '" + allFeaturesType2 + "');document.getElementById('btnUpdatePhoneType').click();return false;";

        string allFeaturesType3 = "dialogWidth:500px;dialogHeight:750px;center:yes;resizable:no; scroll:no";
        string jsType3 = "javascript:window.showModalDialog('" + "ContactTypeInfo.aspx', '', '" + allFeaturesType3 + "');document.getElementById('btnUpdateEmailType').click();return false;";

        lnkEmailUpdateType.NavigateUrl = "  ";
        lnkEmailUpdateType.Text = "Add/Edit";
        lnkEmailUpdateType.Attributes.Add("onclick", jsType3);



        DataTable orgs = OrganisationDB.GetDataTable(0, false, true, true, false, true);
        orgs.DefaultView.Sort = "name ASC";
        ddlOrganisationAC.Items.Clear();
        ddlOrganisationAC.Items.Add(new ListItem(string.Empty, "-1"));
        foreach (DataRowView row in orgs.DefaultView)
            if (row["name"].ToString().Trim().Length > 0)
                ddlOrganisationAC.Items.Add(new ListItem(row["name"].ToString(), row["organisation_id"].ToString()));


        if (!Convert.ToBoolean(Session["SiteIsAgedCare"]))
        {
            tr_ac_org_trailingspace.Visible = false;
            tr_ac_org.Visible = false;

            tr_ac_room.Visible = false;
            tr_ac_room_note.Visible = false;
            tr_ac_room_trailingspace.Visible = false;
        }
        


        ddlAddressContactType.DataSource = ContactTypeDB.GetDataTable(1);
        ddlAddressContactType.DataBind();

        DataTable dt_PhoneNumbers = ContactTypeDB.GetDataTable(2);
        ddlPhoneNumber1.DataSource = dt_PhoneNumbers.Copy();
        ddlPhoneNumber2.DataSource = dt_PhoneNumbers.Copy();
        ddlPhoneNumber3.DataSource = dt_PhoneNumbers.Copy();
        ddlPhoneNumber1.DataBind();
        ddlPhoneNumber2.DataBind();
        ddlPhoneNumber3.DataBind();
        ddlPhoneNumber1.SelectedValue = "30"; // mobile
        ddlPhoneNumber2.SelectedValue = "33"; // home
        ddlPhoneNumber3.SelectedValue = "34"; // office
        lnkPhone1UpdateType.NavigateUrl = "  ";
        lnkPhone1UpdateType.Text = "Add/Edit";
        lnkPhone1UpdateType.Attributes.Add("onclick", jsType2);
        lnkPhone2UpdateType.NavigateUrl = "  ";
        lnkPhone2UpdateType.Text = "Add/Edit";
        lnkPhone2UpdateType.Attributes.Add("onclick", jsType2);
        lnkPhone3UpdateType.NavigateUrl = "  ";
        lnkPhone3UpdateType.Text = "Add/Edit";
        lnkPhone3UpdateType.Attributes.Add("onclick", jsType2);


        ddlEmailContactType.DataSource = ContactTypeDB.GetDataTable(4);
        ddlEmailContactType.DataBind();

        if (Utilities.GetAddressType().ToString() == "Contact")
        {
            streetRow_Contact.Visible = true;
            DataTable addrChannels = AddressChannelDB.GetDataTable();
            ddlAddressAddressChannel.Items.Add(new ListItem("--", "-1"));
            foreach (DataRow row in addrChannels.Rows)
                ddlAddressAddressChannel.Items.Add(new ListItem(row["ac_descr"] + " " + row["act_descr"], row["ac_address_channel_id"].ToString()));
        }
        else if (Utilities.GetAddressType().ToString() == "ContactAus")
        {
            streetRow_ContactAus.Visible = true;
            DataTable addrChannelTypes = DBBase.GetGenericDataTable_WithWhereOrderClause("AddressChannelType", "", "descr", "address_channel_type_id", "descr");
            ddlAddressAddressChannelType.Items.Add(new ListItem("--", "-1"));
            foreach (DataRow row in addrChannelTypes.Rows)
                ddlAddressAddressChannelType.Items.Add(new ListItem(row["descr"].ToString(), row["address_channel_type_id"].ToString()));
        }
        else
            throw new Exception("Unknown AddressType in config: " + Utilities.GetAddressType().ToString().ToString());

        DataTable countries = DBBase.GetGenericDataTable_WithWhereOrderClause("Country", "", "descr", "country_id", "descr");
        ddlAddressCountry.Items.Add(new ListItem("--", "-1"));
        foreach (DataRow row in countries.Rows)
            ddlAddressCountry.Items.Add(new ListItem(row["descr"].ToString(), row["country_id"].ToString()));
        ddlAddressCountry.SelectedIndex = Utilities.IndexOf(ddlAddressCountry, "australia");


        bool editable = GetUrlParamType() == UrlParamType.Add || GetUrlParamType() == UrlParamType.Edit;

        Utilities.SetEditControlBackColour(ddlOrganisationAC,            editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtACRoom,                    editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtACRoomNote,                editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);

        Utilities.SetEditControlBackColour(ddlAddressContactType,        editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtAddressAddrLine1,          editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtAddressAddrLine2,          editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlAddressAddressChannel,     editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtStreet,                    editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlAddressAddressChannelType, editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlAddressCountry,            editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtAddressFreeText,           editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);

        Utilities.SetEditControlBackColour(ddlPhoneNumber1,              editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlPhoneNumber2,              editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlPhoneNumber3,              editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtPhoneNumber1,              editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtPhoneNumber2,              editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtPhoneNumber3,              editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtPhoneNumber1FreeText,      editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtPhoneNumber2FreeText,      editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtPhoneNumber3FreeText,      editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);

        Utilities.SetEditControlBackColour(ddlEmailContactType,          editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtEmailAddrLine1,            editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
    }

    protected void btnUpdateAddressStreetAndSuburb_Click(object sender, EventArgs e)
    {
        DataTable addrChannels = AddressChannelDB.GetDataTable();
        ddlAddressAddressChannel.Items.Clear();
        ddlAddressAddressChannel.Items.Add(new ListItem("--", "-1"));
        foreach (DataRow row in addrChannels.Rows)
            ddlAddressAddressChannel.Items.Add(new ListItem(row["ac_descr"] + " " + row["act_descr"], row["ac_address_channel_id"].ToString()));
        //ddlAddressChannel.SelectedValue = thisRow["ad_address_channel_id"] == DBNull.Value ? "-1" : thisRow["ad_address_channel_id"].ToString();
    }

    protected void btnUpdateAddressType_Click(object sender, EventArgs e)
    {
        ddlAddressContactType.DataSource = ContactTypeDB.GetDataTable(1);
        ddlAddressContactType.DataBind();
        // ddlAddressContactType.SelectedValue = thisRow["ad_contact_type_id"].ToString();
    }

    protected void btnUpdatePhoneType_Click(object sender, EventArgs e)
    {
        DataTable dt_PhoneNumbers = ContactTypeDB.GetDataTable(2);
        ddlPhoneNumber1.DataSource = dt_PhoneNumbers.Copy();
        ddlPhoneNumber2.DataSource = dt_PhoneNumbers.Copy();
        ddlPhoneNumber3.DataSource = dt_PhoneNumbers.Copy();
        ddlPhoneNumber1.DataBind();
        ddlPhoneNumber2.DataBind();
        ddlPhoneNumber3.DataBind();
        ddlPhoneNumber1.SelectedValue = "30"; // mobile
        ddlPhoneNumber2.SelectedValue = "33"; // home
        ddlPhoneNumber3.SelectedValue = "34"; // office
    }

    protected void btnUpdateEmailType_Click(object sender, EventArgs e)
    {
        ddlEmailContactType.DataSource = ContactTypeDB.GetDataTable(4);
        ddlEmailContactType.DataBind();
        // ddlEmailContactType.SelectedValue = thisRow["ad_contact_type_id"].ToString();
    }

    #endregion

    #region SetupHealthCardGUI()

    protected void SetupHealthCardGUI()
    {
        DataTable orgs = OrganisationDB.GetDataTable_GroupOrganisations();
        for (int i = orgs.Rows.Count - 1; i >= 0; i--)
        {
            Organisation org = OrganisationDB.Load(orgs.Rows[i]);
            if (org.OrganisationID != -1 && org.OrganisationID != -2)
                orgs.Rows.RemoveAt(i);
        }
        ddlHealthCardOrganisation.DataSource     = orgs;
        ddlHealthCardOrganisation.DataTextField  = "name";
        ddlHealthCardOrganisation.DataValueField = "organisation_id";
        ddlHealthCardOrganisation.DataBind();
        ddlHealthCardOrganisation.SelectedValue = "-1";

        txtHealthCardCardNbr.Style["display"] = "none";

        for (int i = 1; i < 10; i++)
            ddlHealthCardCardFamilyMemberNbr.Items.Add(new ListItem(i.ToString(), i.ToString()));

        ddlHealthCardCardExpiry_Month.Items.Add(new ListItem("--", "-1"));
        ddlHealthCardCardExpiry_Year.Items.Add(new ListItem("--", "-1"));

        for (int i = 1; i <= 12; i++)
            ddlHealthCardCardExpiry_Month.Items.Add(new ListItem(i.ToString(), i.ToString()));
        for (int i = DateTime.Today.Year - 10; i <= DateTime.Today.Year + 10; i++)
            ddlHealthCardCardExpiry_Year.Items.Add(new ListItem(i.ToString(), i.ToString()));


        bool editable = GetUrlParamType() == UrlParamType.Add || GetUrlParamType() == UrlParamType.Edit;
        Utilities.SetEditControlBackColour(ddlHealthCardOrganisation,        editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtHealthCardCardName,            editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtHealthCardCardNbr,             editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlHealthCardCardFamilyMemberNbr, editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlHealthCardCardExpiry_Month,    editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlHealthCardCardExpiry_Year,     editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);

        Utilities.SetEditControlBackColour(txtHealthCardCardNbr_Digit_1,     editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtHealthCardCardNbr_Digit_2,     editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtHealthCardCardNbr_Digit_3,     editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtHealthCardCardNbr_Digit_4,     editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtHealthCardCardNbr_Digit_5,     editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtHealthCardCardNbr_Digit_6,     editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtHealthCardCardNbr_Digit_7,     editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtHealthCardCardNbr_Digit_8,     editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtHealthCardCardNbr_Digit_9,     editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtHealthCardCardNbr_Digit_10,    editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);

    }


    #endregion





    protected void DOBAllOrNoneCheck(object sender, ServerValidateEventArgs e)
    {
        e.IsValid = IsValidDate(ddlDOB_Day.SelectedValue, ddlDOB_Month.SelectedValue, ddlDOB_Year.SelectedValue);
    }

    protected void btnCancel_Click(object sender, EventArgs e)
    {
        Response.Redirect(UrlParamModifier.AddEdit(Request.RawUrl, "type", "view"));
    }
    protected void btnSubmit_Click(object sender, EventArgs e)
    {
        if (!ddlDOBValidateAllOrNoneSet.IsValid)
            return;

        if (GetUrlParamType() == UrlParamType.View)
        {
            Response.Redirect( UrlParamModifier.AddEdit(Request.RawUrl, "type", "edit") );
        }
        else if (GetUrlParamType() == UrlParamType.Edit)
        {
            if ((ddlConcessionCardExpiry_Year.SelectedValue  != "-1" && ddlConcessionCardExpiry_Month.SelectedValue == "-1") ||
                (ddlConcessionCardExpiry_Month.SelectedValue != "-1" && ddlConcessionCardExpiry_Year.SelectedValue  == "-1"))
            {
                SetErrorMessage("Concession Card Expiry Must Be Both Set or Both Unset.");
                return;
            }


            DateTime concessionCardExpiryDate = ddlConcessionCardExpiry_Year.SelectedValue == "-1" || ddlConcessionCardExpiry_Month.SelectedValue == "-1" ?
                                                DateTime.MinValue :
                                                new DateTime(Convert.ToInt32(ddlConcessionCardExpiry_Year.SelectedValue), Convert.ToInt32(ddlConcessionCardExpiry_Month.SelectedValue), 1);

            Patient patient = PatientDB.GetByID(Convert.ToInt32(this.lblId.Text));

            Hashtable offeringsHash = OfferingDB.GetHashtable(true, -1, null, true);
            PatientDB.AddACOfferings(ref offeringsHash, ref patient);


            int acInvOfferingID_New = patient.ACInvOffering == null ? -1 : patient.ACInvOffering.OfferingID;
            int acPatOfferingID_New = patient.ACPatOffering == null ? -1 : patient.ACPatOffering.OfferingID;

            if (patient.ACInvOffering == null || patient.ACPatOffering == null)
            {
                acInvOfferingID_New = Convert.ToInt32(ddlACInvOffering.SelectedValue);
                acPatOfferingID_New = Convert.ToInt32(ddlACInvOffering.SelectedValue);
            }
            else if (Convert.ToBoolean(Session["SiteIsAgedCare"]) && patient.ACInvOffering.OfferingID != Convert.ToInt32(ddlACInvOffering.SelectedValue))
            {
                int acInvOfferingID_Old = patient.ACInvOffering == null ? -1 : patient.ACInvOffering.OfferingID;
                int acPatOfferingID_Old = patient.ACPatOffering == null ? -1 : patient.ACPatOffering.OfferingID;

                acInvOfferingID_New = Convert.ToInt32(ddlACInvOffering.SelectedValue);
                acPatOfferingID_New = acPatOfferingID_Old;

                int acInvAcPtTypeID_New = ((Offering)offeringsHash[Convert.ToInt32(ddlACInvOffering.SelectedValue)]).AgedCarePatientType.ID;
                int acInvAcPtTypeID_Old = patient.ACInvOffering.AgedCarePatientType.ID;

	            //when updating:
	            //- if changing to LC/HC/LCF/HCUF    - change BOTH to that (to make sure second is always clearly the pt type)
	            //- if changing to MC/DVA/TAC/LCE/HCE
                //  - if prev_first is LC/HC/LCF/HCUF     - move prev_first to second, and set first as selected
                //  - if prev_first is MC/DVA/TAC/LCE/HCE - set first as selected (and leave second)

                if ((new List<int> { 2, 3, 4, 5 }).Contains(acInvAcPtTypeID_New))
                {
                    acPatOfferingID_New = acInvOfferingID_New;
                }
                else if ((new List<int> { 6, 7, 8, 9, 10 }).Contains(acInvAcPtTypeID_New))
                {
                    if ((new List<int> { 2, 3, 4, 5 }).Contains(acInvAcPtTypeID_Old))
                        acPatOfferingID_New = acInvOfferingID_Old;
                }
                else // (?)
                    ; //
            }

            PatientHistoryDB.Insert(patient.PatientID, patient.IsClinicPatient, patient.IsDeleted, patient.IsDeceased,
                                    patient.FlashingText, patient.FlashingTextAddedBy == null ? -1 : patient.FlashingTextAddedBy.StaffID, patient.FlashingTextLastModifiedDate, patient.PrivateHealthFund, patient.ConcessionCardNumber, patient.ConcessionCardExpiryDate, patient.IsDiabetic, patient.IsMemberDiabetesAustralia, patient.ACInvOffering == null ? -1 : patient.ACInvOffering.OfferingID, patient.ACPatOffering == null ? -1 : patient.ACPatOffering.OfferingID, patient.Login, patient.Pwd,
                                    patient.Person.Title.ID, patient.Person.Firstname, patient.Person.Middlename, patient.Person.Surname, patient.Person.Nickname, patient.Person.Gender, patient.Person.Dob, Convert.ToInt32(Session["StaffID"]));

            PersonDB.Update(patient.Person.PersonID, Convert.ToInt32(ddlTitle.SelectedValue), Utilities.FormatName(txtFirstname.Text), Utilities.FormatName(txtMiddlename.Text), Utilities.FormatName(txtSurname.Text), txtNickname.Text, ddlGender.SelectedValue, GetDOBFromForm(), DateTime.Now);
            PatientDB.Update(patient.PatientID, patient.Person.PersonID, patient.IsClinicPatient, chkIsDeceased.Checked, patient.FlashingText, patient.FlashingTextAddedBy == null ? -1 : patient.FlashingTextAddedBy.StaffID, patient.FlashingTextLastModifiedDate, txtPrivateHealthFund.Text, txtConcessionCardNbr.Text, concessionCardExpiryDate, chkIsDiabetic.Checked, chkIsMemberDiabetesAustralia.Checked, acInvOfferingID_New, acPatOfferingID_New, patient.Login, patient.Pwd);

            Response.Redirect( UrlParamModifier.AddEdit(Request.RawUrl, "type", "view") );
        }
        else if (GetUrlParamType() == UrlParamType.Add)
        {
            btnAdd("AddAndGoToViewScreen");
        }
        else
        {
            HideTableAndSetErrorMessage("", "Invalid URL Parameters");
        }
    }
    protected void btnSubmitAdd_Click(object sender, CommandEventArgs e)
    {
        btnAdd(e.CommandName);
    }
    protected void btnAdd(string nextScreen)
    {
        if (!ddlDOBValidateAllOrNoneSet.IsValid)
            return;

        int  person_id           = -1;
        int  patient_id          = -1;
        int  register_patient_id = -1;
        bool patient_added       = false;

        int ac_register_patient_id  = -1;

        int bedroom_id = -1;
        int address_id = -1;
        int phone_id1  = -1;
        int phone_id2  = -1;
        int phone_id3  = -1;
        int email_id   = -1;
        bool contacts_added = false;
        int healthcard_id = -1;
        bool healthcard_added = false;

        try
        {
            if (nextScreen != "AddAndGoToHealthCardScreen" && nextScreen != "AddAndGoToBookingScreen" && nextScreen != "AddAndGoToViewScreen" && nextScreen != "AddAndAddAonther")
                throw new CustomMessageException("unknown nextScreen value : " + nextScreen);

            if (nextScreen == "AddAndGoToHealthCardScreen" && (txtHealthCardCardName.Text.Trim().Length == 0 && txtHealthCardCardNbr.Text.Trim().Length == 0))
                throw new CustomMessageException("Can not go to add " + (Convert.ToBoolean(Session["SiteIsClinic"]) ? "EPC" : "Referral") + " info unless you have set healthcard information");

            if ((ddlConcessionCardExpiry_Year.SelectedValue  != "-1" && ddlConcessionCardExpiry_Month.SelectedValue == "-1") ||
                (ddlConcessionCardExpiry_Month.SelectedValue != "-1" && ddlConcessionCardExpiry_Year.SelectedValue  == "-1"))
                throw new CustomMessageException("Concession Card Expiry Must Be Both Set or Both Unset.");

            DateTime concessionCardExpiryDate = ddlConcessionCardExpiry_Year.SelectedValue == "-1" || ddlConcessionCardExpiry_Month.SelectedValue == "-1" ?
                                                DateTime.MinValue :
                                                new DateTime(Convert.ToInt32(ddlConcessionCardExpiry_Year.SelectedValue), Convert.ToInt32(ddlConcessionCardExpiry_Month.SelectedValue), 1);

            int acOfferingID = (Convert.ToBoolean(Session["SiteIsAgedCare"])) ? Convert.ToInt32(ddlACInvOffering.SelectedValue) : -1;

            Staff loggedInStaff = StaffDB.GetByID(Convert.ToInt32(Session["StaffID"]));
            person_id  = PersonDB.Insert(loggedInStaff.Person.PersonID, Convert.ToInt32(ddlTitle.SelectedValue), Utilities.FormatName(txtFirstname.Text), Utilities.FormatName(txtMiddlename.Text), Utilities.FormatName(txtSurname.Text), txtNickname.Text, ddlGender.SelectedValue, GetDOBFromForm());
            patient_id = PatientDB.Insert(person_id, Convert.ToBoolean(Session["SiteIsClinic"]), chkIsDeceased.Checked, "", -1, DateTime.MinValue, txtPrivateHealthFund.Text, txtConcessionCardNbr.Text, concessionCardExpiryDate, chkIsDiabetic.Checked, chkIsMemberDiabetesAustralia.Checked, acOfferingID, acOfferingID, "", "");
            if (!Convert.ToBoolean(Session["IsAdmin"]))
                register_patient_id = RegisterPatientDB.Insert(Convert.ToInt32(Session["OrgID"]), patient_id);
            patient_added = true;   // added this because was throwing a thread aborted exception after patient added before Response.Redirect



            Patient patient = PatientDB.GetByID(patient_id);


            // add contact info

            if (Convert.ToBoolean(Session["SiteIsAgedCare"]) && ddlOrganisationAC.SelectedValue != "-1")
                ac_register_patient_id = RegisterPatientDB.Insert(Convert.ToInt32(ddlOrganisationAC.SelectedValue), patient.PatientID);

            if (Utilities.GetAddressType().ToString() == "Contact")
            {
                if (Convert.ToBoolean(Session["SiteIsAgedCare"]) && txtACRoom.Text.Trim().Length > 0)
                    bedroom_id = ContactDB.Insert(patient.Person.EntityID,
                        166,
                        txtACRoomNote.Text.Trim(),
                        txtACRoom.Text.Trim(),
                        string.Empty,
                        -1,
                        -1,
                        -1,
                        Convert.ToInt32(Session["SiteID"]),
                        false,
                        false,
                        false);

                if (txtAddressAddrLine1.Text.Trim().Length > 0 || txtAddressAddrLine2.Text.Trim().Length > 0)
                    address_id = ContactDB.Insert(patient.Person.EntityID,
                        Convert.ToInt32(ddlAddressContactType.SelectedValue),
                        txtAddressFreeText.Text,
                        txtAddressAddrLine1.Text,
                        txtAddressAddrLine2.Text,
                        Convert.ToInt32(ddlAddressAddressChannel.SelectedValue),
                        //Convert.ToInt32(ddlAddressSuburb.SelectedValue),
                        Convert.ToInt32(suburbID.Value),
                        Convert.ToInt32(ddlAddressCountry.SelectedValue),
                        Convert.ToInt32(Session["SiteID"]),
                        chkIsBillingAddr.Checked,
                        chkIsShippingAddr.Checked,
                        chkIsIncOnDocs.Checked);

                if (txtPhoneNumber1.Text.Trim().Length > 0)
                    phone_id1 = ContactDB.Insert(patient.Person.EntityID,
                        Convert.ToInt32(ddlPhoneNumber1.SelectedValue),
                        txtPhoneNumber1FreeText.Text,
                        System.Text.RegularExpressions.Regex.Replace(txtPhoneNumber1.Text, "[^0-9]", ""),
                        string.Empty,
                        -1,
                        -1,
                        -1,
                        Convert.ToInt32(Session["SiteID"]),
                        false,
                        false,
                        false);

                if (txtPhoneNumber2.Text.Trim().Length > 0)
                    phone_id2 = ContactDB.Insert(patient.Person.EntityID,
                        Convert.ToInt32(ddlPhoneNumber2.SelectedValue),
                        txtPhoneNumber2FreeText.Text,
                        System.Text.RegularExpressions.Regex.Replace(txtPhoneNumber2.Text, "[^0-9]", ""),
                        string.Empty,
                        -1,
                        -1,
                        -1,
                        Convert.ToInt32(Session["SiteID"]),
                        false,
                        false,
                        false);

                if (txtPhoneNumber3.Text.Trim().Length > 0)
                    phone_id3 = ContactDB.Insert(patient.Person.EntityID,
                        Convert.ToInt32(ddlPhoneNumber3.SelectedValue),
                        txtPhoneNumber3FreeText.Text,
                        System.Text.RegularExpressions.Regex.Replace(txtPhoneNumber3.Text, "[^0-9]", ""),
                        string.Empty,
                        -1,
                        -1,
                        -1,
                        Convert.ToInt32(Session["SiteID"]),
                        false,
                        false,
                        false);

                if (txtEmailAddrLine1.Text.Trim().Length > 0)
                    email_id = ContactDB.Insert(patient.Person.EntityID,
                        Convert.ToInt32(ddlEmailContactType.SelectedValue),
                        "",
                        txtEmailAddrLine1.Text,
                        string.Empty,
                        -1,
                        -1,
                        -1,
                        Convert.ToInt32(Session["SiteID"]),
                        false,
                        false,
                        false);
            }
            else if (Utilities.GetAddressType().ToString() == "ContactAus")
            {
                if (Convert.ToBoolean(Session["SiteIsAgedCare"]) && txtACRoom.Text.Trim().Length > 0)
                    bedroom_id = ContactAusDB.Insert(patient.Person.EntityID,
                        166,
                        txtACRoomNote.Text.Trim(),
                        txtACRoom.Text.Trim(),
                        string.Empty,
                        string.Empty,
                        -1,
                        -1,
                        -1,
                        Convert.ToInt32(Session["SiteID"]),
                        false,
                        false,
                        false);

                if (txtAddressAddrLine1.Text.Trim().Length > 0 || txtAddressAddrLine2.Text.Trim().Length > 0)
                    address_id = ContactAusDB.Insert(patient.Person.EntityID,
                        Convert.ToInt32(ddlAddressContactType.SelectedValue),
                        txtAddressFreeText.Text,
                        txtAddressAddrLine1.Text,
                        txtAddressAddrLine2.Text,
                        txtStreet.Text,
                        Convert.ToInt32(ddlAddressAddressChannelType.SelectedValue),
                        //Convert.ToInt32(ddlAddressSuburb.SelectedValue),
                        Convert.ToInt32(suburbID.Value),
                        Convert.ToInt32(ddlAddressCountry.SelectedValue),
                        Convert.ToInt32(Session["SiteID"]),
                        chkIsBillingAddr.Checked,
                        chkIsShippingAddr.Checked,
                        chkIsIncOnDocs.Checked);

                if (txtPhoneNumber1.Text.Trim().Length > 0)
                    phone_id1 = ContactAusDB.Insert(patient.Person.EntityID,
                        Convert.ToInt32(ddlPhoneNumber1.SelectedValue),
                        txtPhoneNumber1FreeText.Text,
                        System.Text.RegularExpressions.Regex.Replace(txtPhoneNumber1.Text, "[^0-9]", ""),
                        string.Empty,
                        string.Empty,
                        -1,
                        -1,
                        -1,
                        Convert.ToInt32(Session["SiteID"]),
                        false,
                        false,
                        false);

                if (txtPhoneNumber2.Text.Trim().Length > 0)
                    phone_id2 = ContactAusDB.Insert(patient.Person.EntityID,
                        Convert.ToInt32(ddlPhoneNumber2.SelectedValue),
                        txtPhoneNumber2FreeText.Text,
                        System.Text.RegularExpressions.Regex.Replace(txtPhoneNumber2.Text, "[^0-9]", ""),
                        string.Empty,
                        string.Empty,
                        -1,
                        -1,
                        -1,
                        Convert.ToInt32(Session["SiteID"]),
                        false,
                        false,
                        false);

                if (txtPhoneNumber3.Text.Trim().Length > 0)
                    phone_id3 = ContactAusDB.Insert(patient.Person.EntityID,
                        Convert.ToInt32(ddlPhoneNumber3.SelectedValue),
                        txtPhoneNumber3FreeText.Text,
                        System.Text.RegularExpressions.Regex.Replace(txtPhoneNumber3.Text, "[^0-9]", ""),
                        string.Empty,
                        string.Empty,
                        -1,
                        -1,
                        -1,
                        Convert.ToInt32(Session["SiteID"]),
                        false,
                        false,
                        false);

                if (txtEmailAddrLine1.Text.Trim().Length > 0)
                    email_id = ContactAusDB.Insert(patient.Person.EntityID,
                        Convert.ToInt32(ddlEmailContactType.SelectedValue),
                        "",
                        txtEmailAddrLine1.Text,
                        string.Empty,
                        string.Empty,
                        -1,
                        -1,
                        -1,
                        Convert.ToInt32(Session["SiteID"]),
                        false,
                        false,
                        false);
            }
            else
            {
                throw new Exception("Unknown AddressType in config: " + Utilities.GetAddressType().ToString().ToString());
            }

            contacts_added = true;

            // add healthcard

            if (txtHealthCardCardName.Text.Trim().Length > 0 || txtHealthCardCardNbr.Text.Trim().Length > 0)
            {
                int organisation_id = Convert.ToInt32(ddlHealthCardOrganisation.SelectedValue);

                string cardNbr;
                if (organisation_id == -1)
                {
                    cardNbr =
                        txtHealthCardCardNbr_Digit_1.Text.PadLeft(1, ' ') + txtHealthCardCardNbr_Digit_2.Text.PadLeft(1, ' ') + txtHealthCardCardNbr_Digit_3.Text.PadLeft(1, ' ') + txtHealthCardCardNbr_Digit_4.Text.PadLeft(1, ' ') + txtHealthCardCardNbr_Digit_5.Text.PadLeft(1, ' ') +
                        txtHealthCardCardNbr_Digit_6.Text.PadLeft(1, ' ') + txtHealthCardCardNbr_Digit_7.Text.PadLeft(1, ' ') + txtHealthCardCardNbr_Digit_8.Text.PadLeft(1, ' ') + txtHealthCardCardNbr_Digit_9.Text.PadLeft(1, ' ') + txtHealthCardCardNbr_Digit_10.Text.PadLeft(1, ' ');
                }
                else if (organisation_id == -2)
                    cardNbr = Regex.Replace(txtHealthCardCardNbr.Text, @"[^a-zA-Z0-9]", "");
                else
                    throw new Exception("Unknown organisation id for healthcard card : " + organisation_id);


                if ((ddlHealthCardCardExpiry_Year.SelectedValue  != "-1" && ddlHealthCardCardExpiry_Month.SelectedValue == "-1") ||
                    (ddlHealthCardCardExpiry_Month.SelectedValue != "-1" && ddlHealthCardCardExpiry_Year.SelectedValue  == "-1"))
                    throw new Exception("Health card expiry date Must Be Both Set or Both Unset");

                DateTime expiryDate = ddlHealthCardCardExpiry_Year.SelectedValue == "-1" || ddlHealthCardCardExpiry_Month.SelectedValue == "-1" ?
                                      DateTime.MinValue :
                                      new DateTime(Convert.ToInt32(ddlHealthCardCardExpiry_Year.SelectedValue), Convert.ToInt32(ddlHealthCardCardExpiry_Month.SelectedValue), 1);

                string cardFamilyMemberNbr = (organisation_id == -1) ? ddlHealthCardCardFamilyMemberNbr.SelectedValue : string.Empty;
                healthcard_id = HealthCardDB.Insert(patient.PatientID, organisation_id, txtHealthCardCardName.Text.Trim(), cardNbr, cardFamilyMemberNbr, expiryDate, DateTime.MinValue, DateTime.MinValue, true, Convert.ToInt32(Session["StaffID"]));
            }

            healthcard_added = true;


            // remove session datatable of patient in search lists so it is regenereated
            Session.Remove("patientinfo_data"); 


            if (nextScreen == "AddAndGoToBookingScreen")
            {
                Response.Redirect("~/SelectOrganisations.aspx?patient=" + patient_id, false);
                return;
            }
            else if (nextScreen == "AddAndAddAonther")
            {
                Response.Redirect("~/AddEditPatient.aspx?type=add", false);
                return;
            }
            else if (nextScreen == "AddAndGoToHealthCardScreen" && healthcard_id > 0)
            {
                Response.Redirect("~/AddEditHealthCard.aspx?type=view&id=" + healthcard_id + "&card=" + (Convert.ToInt32(ddlHealthCardOrganisation.SelectedValue) == -1 ? "medicare" : "dva"), false);
                return;
            }
            else // if (nextScreen == "AddAndGoToViewScreen")
            {
                string url = Request.RawUrl;
                url = UrlParamModifier.AddEdit(url, "type", "view");
                url = UrlParamModifier.AddEdit(url, "id", patient_id.ToString());
                Response.Redirect(url, false);
                return;
            }

        }
        catch (CustomMessageException cmEx)
        {
            SetErrorMessage(cmEx.Message);
        }
        catch (Exception ex)
        {
            if (patient_added && contacts_added && healthcard_added)
            {

                if (nextScreen == "AddAndGoToBookingScreen")
                {
                    Response.Redirect("~/SelectOrganisations.aspx?patient=" + patient_id);
                    return;
                }
                else if (nextScreen == "AddAndGoToHealthCardScreen" && healthcard_id > 0)
                {
                    Response.Redirect("~/AddEditHealthCard.aspx?type=view&id=" + healthcard_id + "&card=" + (Convert.ToInt32(ddlHealthCardOrganisation.SelectedValue) == -1 ? "medicare" : "dva"));
                    return;
                }
                else // if (nextScreen == "AddAndGoToViewScreen")
                {
                    string url = Request.RawUrl;
                    url = UrlParamModifier.AddEdit(url, "type", "view");
                    url = UrlParamModifier.AddEdit(url, "id", patient_id.ToString());
                    Response.Redirect(url);
                    return;
                }

            }

            // roll back - backwards of creation order

            HealthCardDB.Delete(healthcard_id);

            if (Utilities.GetAddressType().ToString() == "Contact")
            {
                ContactDB.Delete(address_id);
                ContactDB.Delete(phone_id1);
                ContactDB.Delete(phone_id2);
                ContactDB.Delete(phone_id3);
                ContactDB.Delete(email_id);
                ContactDB.Delete(bedroom_id);
            }
            else if (Utilities.GetAddressType().ToString() == "ContactAus")
            {
                ContactAusDB.Delete(address_id);
                ContactAusDB.Delete(phone_id1);
                ContactAusDB.Delete(phone_id2);
                ContactAusDB.Delete(phone_id3);
                ContactAusDB.Delete(email_id);
                ContactAusDB.Delete(bedroom_id);
            }
            else
                throw new Exception("Unknown AddressType in config: " + Utilities.GetAddressType().ToString().ToString());

            RegisterPatientDB.Delete(ac_register_patient_id);

            RegisterPatientDB.Delete(register_patient_id);
            PatientDB.Delete(patient_id);
            PersonDB.Delete(person_id);

            HideTableAndSetErrorMessage("", ex.ToString());
        }


    }



    public DateTime GetDOBFromForm()
    {
        return GetDate(ddlDOB_Day.SelectedValue, ddlDOB_Month.SelectedValue, ddlDOB_Year.SelectedValue, "DOB");
    }
    public DateTime GetDate(string day, string month, string year, string fieldNme)
    {
        if (day == "-1" && month == "-1" && year == "-1")
            return DateTime.MinValue;

        else if (day != "-1" && month != "-1" && year != "-1")
            return new DateTime(Convert.ToInt32(year), Convert.ToInt32(month), Convert.ToInt32(day));

        else
            throw new Exception(fieldNme + " format is some selected and some not selected.");
    }
    public bool IsValidDate(string day, string month, string year)
    {
        bool invalid = ((day == "-1" || month == "-1" || year == "-1") && (day != "-1" || month != "-1" || year != "-1"));
        return !invalid;
    }


    #region GrdRegistration

    protected void GrdRegistration_Reset()
    {
        DataTable dt = Session["addeditpatient_regorg_data"] as DataTable;
        if (dt == null)
            return;

        bool tblEmpty = (dt.Rows.Count == 1 && dt.Rows[0][0] == DBNull.Value);
        if (tblEmpty)
        {
            int TotalColumns = GrdRegistration.Rows[0].Cells.Count;
            GrdRegistration.Rows[0].Cells.Clear();
            GrdRegistration.Rows[0].Cells.Add(new TableCell());
            GrdRegistration.Rows[0].Cells[0].ColumnSpan = TotalColumns;
            GrdRegistration.Rows[0].Cells[0].Text = "No Organisations Allocated Yet";
        }
    }

    protected void FillOrganisationRegistrationGrid()
    {
        if (!IsValidFormID())
        {
            HideTableAndSetErrorMessage("", "Invalid URL Parameters");
            return;
        }

        Patient patient = PatientDB.GetByID(GetFormID());
        if (patient == null)
        {
            HideTableAndSetErrorMessage(Utilities.IsDev() ? "No patient exists with this ID" : "");
            return;
        }


        DataTable dt = RegisterPatientDB.GetDataTable_OrganisationsOf(patient.PatientID);
        dt.DefaultView.Sort = "register_patient_id DESC"; // sort on most recently added org
        dt = dt.DefaultView.ToTable();

        Session["addeditpatient_regorg_data"] = dt;


        if (dt.Rows.Count > 0)
        {
            if (IsPostBack && Session["sortExpression"] != null && Session["sortExpression"].ToString().Length > 0)
            {
                DataView dataView = new DataView(dt);
                dataView.Sort = Session["sortExpression"].ToString();
                GrdRegistration.DataSource = dataView;
            }
            else
            {
                GrdRegistration.DataSource = dt;
            }


            try
            {
                GrdRegistration.DataBind();
            }
            catch (Exception ex)
            {
                SetErrorMessage(ex.ToString());
            }
        }
        else
        {
            dt.Rows.Add(dt.NewRow());
            GrdRegistration.DataSource = dt;
            GrdRegistration.DataBind();

            int TotalColumns = GrdRegistration.Rows[0].Cells.Count;
            GrdRegistration.Rows[0].Cells.Clear();
            GrdRegistration.Rows[0].Cells.Add(new TableCell());
            GrdRegistration.Rows[0].Cells[0].ColumnSpan = TotalColumns;
            GrdRegistration.Rows[0].Cells[0].Text = "No Organisations Allocated Yet";
        }

        SetOrgDdlList();
    }
    protected void GrdRegistration_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType != DataControlRowType.Pager)
        {
            //if (!Utilities.IsDev())
                e.Row.Cells[0].CssClass = "hiddencol";
        }
    }
    protected void GrdRegistration_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        Patient patient = PatientDB.GetByID(GetFormID());
        if (patient == null)
        {
            HideTableAndSetErrorMessage("");
            return;
        }

        bool incAgedCare = Convert.ToBoolean(Session["SiteIsAgedCare"]);
        bool incClinics  = Convert.ToBoolean(Session["SiteIsClinic"]);

        DataTable dt = Session["addeditpatient_regorg_data"] as DataTable;
        bool tblEmpty = (dt.Rows.Count == 1 && dt.Rows[0][0] == DBNull.Value);
        if (!tblEmpty && e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lblId = (Label)e.Row.FindControl("lblId");
            DataRow[] foundRows = dt.Select("register_patient_id=" + lblId.Text);
            DataRow thisRow = foundRows[0];


            DropDownList ddlOrganisation = (DropDownList)e.Row.FindControl("ddlOrganisation");
            if (ddlOrganisation != null)
            {
                Organisation[] incList_orig = RegisterPatientDB.GetOrganisationsOf(patient.PatientID);
                Organisation[] incList = Organisation.RemoveByID(incList_orig, Convert.ToInt32(thisRow["organisation_id"]));
                DataTable orgs = OrganisationDB.GetDataTable_AllNotInc(incList, true, !incClinics, !incAgedCare, true);
                orgs.DefaultView.Sort = "name ASC";
                foreach (DataRowView row in orgs.DefaultView)
                    if (row["name"].ToString().Trim().Length > 0)
                        ddlOrganisation.Items.Add(new ListItem(row["name"].ToString(), row["organisation_id"].ToString()));
                ddlOrganisation.SelectedValue = thisRow["organisation_id"].ToString();
            }

            HyperLink lnkBookings = (HyperLink)e.Row.FindControl("lnkBookings");
            if (lnkBookings != null)
            {
                bool SiteIsAgedCare = Convert.ToBoolean(Session["SiteIsAgedCare"]);
                bool SiteIsClinic   = Convert.ToBoolean(Session["SiteIsClinic"]);

                lnkBookings.NavigateUrl = string.Format("~/BookingsForClinic.aspx?orgs={0}&patient={1}", Convert.ToInt32(thisRow["organisation_id"]), patient.PatientID);

                lnkBookings.Visible = (SiteIsClinic   && Convert.ToInt32(thisRow["organisation_type_id"]) == 218) || 
                                      (SiteIsAgedCare && (new List<int> { 139, 367, 372 }).Contains(Convert.ToInt32(thisRow["organisation_type_id"])));
            }


            Utilities.AddConfirmationBox(e);
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
                Utilities.SetEditRowBackColour(e, System.Drawing.Color.LightGoldenrodYellow);
        }
        if (e.Row.RowType == DataControlRowType.Footer)
        {
            DropDownList ddlOrganisation = (DropDownList)e.Row.FindControl("ddlNewOrganisation");
            if (ddlOrganisation != null)
            {
                Organisation[] incList = RegisterPatientDB.GetOrganisationsOf(patient.PatientID);
                DataTable orgs = OrganisationDB.GetDataTable_AllNotInc(incList, true, !incClinics, !incAgedCare, true);
                orgs.DefaultView.Sort = "name ASC";

                foreach (DataRowView row in orgs.DefaultView)
                    ddlOrganisation.Items.Add(new ListItem(row["name"].ToString(), row["organisation_id"].ToString()));
            }
        }
    }
    protected void GrdRegistration_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        GrdRegistration.EditIndex = -1;
        FillOrganisationRegistrationGrid();
    }
    protected void GrdRegistration_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        Label lblId = (Label)GrdRegistration.Rows[e.RowIndex].FindControl("lblId");
        DropDownList ddlOrganisation = (DropDownList)GrdRegistration.Rows[e.RowIndex].FindControl("ddlOrganisation");

        Patient patient = PatientDB.GetByID(GetFormID());
        if (patient == null)
        {
            HideTableAndSetErrorMessage("");
            return;
        }

        RegisterPatientDB.Update(Convert.ToInt32(lblId.Text), Convert.ToInt32(ddlOrganisation.SelectedValue), patient.PatientID);

        GrdRegistration.EditIndex = -1;
        FillOrganisationRegistrationGrid();
    }
    protected void GrdRegistration_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        Label lblId = (Label)GrdRegistration.Rows[e.RowIndex].FindControl("lblId");

        RegisterPatient registerPatient = RegisterPatientDB.GetByID(Convert.ToInt32(lblId.Text));
        if (BookingDB.GetCountByPatientAndOrg(registerPatient.Patient.PatientID, registerPatient.Organisation.OrganisationID) > 0)
        {
            SetErrorMessage("Can not remove registration of '" + registerPatient.Patient.Person.FullnameWithoutMiddlename + "' to '" + registerPatient.Organisation.Name + "' because there exists a booking for this patient there.");
            return;
        }

        if (registerPatient.Organisation.IsAgedCare)
        {
            int agedCareOrgRegistrations = RegisterPatientDB.GetCountByPatientAndOrgTypeGroup(registerPatient.Patient.PatientID, "6");
            if (agedCareOrgRegistrations < 2)
            {
                SetErrorMessage("Can not remove registration of '" + registerPatient.Patient.Person.FullnameWithoutMiddlename + "' to '" + registerPatient.Organisation.Name + "' until another Fac/Wing/Unit has been added.");
                return;
            }
        }


        try
        {
            RegisterPatientDB.UpdateInactive(Convert.ToInt32(lblId.Text), false);
        }
        catch (ForeignKeyConstraintException fkcEx)
        {
            if (Utilities.IsDev())
                HideTableAndSetErrorMessage("Can not delete because other records depend on this : " + fkcEx.Message);
            else
                HideTableAndSetErrorMessage("Can not delete because other records depend on this");
        }

        FillOrganisationRegistrationGrid();
    }
    protected void GrdRegistration_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName.Equals("Insert"))
        {
            DropDownList ddlOrganisation = (DropDownList)GrdRegistration.FooterRow.FindControl("ddlNewOrganisation");

            Patient patient = PatientDB.GetByID(GetFormID());
            if (patient == null)
            {
                HideTableAndSetErrorMessage("");
                return;
            }

            try
            {
                RegisterPatientDB.Insert(Convert.ToInt32(ddlOrganisation.SelectedValue), patient.PatientID);
            }
            catch (UniqueConstraintException)
            {
                // happens when 2 forms allow adding
                // do nothing and let form re-update
            }

            FillOrganisationRegistrationGrid();
        }

        if (e.CommandName.Equals("_Delete") || e.CommandName.Equals("_UnDelete"))
        {
            int resiter_patient_id = Convert.ToInt32(e.CommandArgument);

            try
            {
                if (e.CommandName.Equals("_Delete"))
                {
                    RegisterPatient registerPatient = RegisterPatientDB.GetByID(resiter_patient_id);
                    if (BookingDB.GetCountByPatientAndOrg(registerPatient.Patient.PatientID, registerPatient.Organisation.OrganisationID) > 0)
                    {
                        SetErrorMessage("Can not remove registration of '" + registerPatient.Patient.Person.FullnameWithoutMiddlename + "' to '" + registerPatient.Organisation.Name + "' because there exists a booking for this patient there.");
                        return;
                    }


                    if (registerPatient.Organisation.IsAgedCare)
                    {
                        int agedCareOrgRegistrations = RegisterPatientDB.GetCountByPatientAndOrgTypeGroup(registerPatient.Patient.PatientID, "6");
                        if (agedCareOrgRegistrations < 2)
                        {
                            SetErrorMessage("Can not remove registration of '" + registerPatient.Patient.Person.FullnameWithoutMiddlename + "' to '" + registerPatient.Organisation.Name + "' until another Fac/Wing/Unit has been added.");
                            return;
                        }
                    }

                    RegisterPatientDB.UpdateInactive(resiter_patient_id);
                }
                else
                    RegisterPatientDB.UpdateActive(resiter_patient_id);
            }
            catch (ForeignKeyConstraintException fkcEx)
            {
                SetErrorMessage("Can not delete because other records depend on this" + (Utilities.IsDev() ? " : " + fkcEx.Message : "") );
            }

            FillOrganisationRegistrationGrid();
        }
    }
    protected void GrdRegistration_RowEditing(object sender, GridViewEditEventArgs e)
    {
        GrdRegistration.EditIndex = e.NewEditIndex;
        FillOrganisationRegistrationGrid();
    }
    protected void GridView_Sorting(object sender, GridViewSortEventArgs e)
    {
        // dont allow sorting if in edit mode
        if (GrdRegistration.EditIndex >= 0)
            return;

        Sort(e.SortExpression);
    }

    protected void Sort(string sortExpression, params string[] sortExpr)
    {
        DataTable dataTable = Session["addeditpatient_regorg_data"] as DataTable;

        if (dataTable != null)
        {
            if (Session["sortExpression"] == null)
                Session["sortExpression"] = "";

            DataView dataView = new DataView(dataTable);
            string[] sortData = Session["sortExpression"].ToString().Trim().Split(' ');

            string newSortExpr = (sortExpr.Length == 0) ?
                (sortExpression == sortData[0] && sortData[1] == "ASC") ? "DESC" : "ASC" :
                sortExpr[0];

            dataView.Sort = sortExpression + " " + newSortExpr;
            Session["sortExpression"] = sortExpression + " " + newSortExpr;

            GrdRegistration.DataSource = dataView;
            GrdRegistration.DataBind();
        }
    }

    protected void lnkRegisterPatient_Click(object sender, EventArgs e)
    {
        Patient patient = PatientDB.GetByID(GetFormID());
        if (patient == null)
        {
            HideTableAndSetErrorMessage("");
            return;
        }

        try
        {
            RegisterPatientDB.Insert(Convert.ToInt32(ddlOrganisation.SelectedValue), patient.PatientID);
        }
        catch (UniqueConstraintException)
        {
            // happens when 2 forms allow adding
            // do nothing and let form re-update
        }

        FillOrganisationRegistrationGrid();

    }
    protected void SetOrgDdlList()
    {
        bool incAgedCare = Convert.ToBoolean(Session["SiteIsAgedCare"]);
        bool incClinics  = Convert.ToBoolean(Session["SiteIsClinic"]);

        Patient patient = PatientDB.GetByID(GetFormID());
        if (patient == null)
        {
            HideTableAndSetErrorMessage("");
            return;
        }

        Organisation[] incList = RegisterPatientDB.GetOrganisationsOf(patient.PatientID);
        DataTable orgs = OrganisationDB.GetDataTable_AllNotInc(incList, true, !incClinics, !incAgedCare, true);
        orgs.DefaultView.Sort = "name ASC";

        ddlOrganisation.Items.Clear();
        foreach (DataRowView row in orgs.DefaultView)
            ddlOrganisation.Items.Add(new ListItem(row["name"].ToString(), row["organisation_id"].ToString()));
    }

    #endregion


    #region btnSuburbSelectionUpdate_Click

    protected void btnSuburbSelectionUpdate_Click(object sender, EventArgs e)
    {
        UpdateSuburbInfo(true);
    }

    protected void UpdateSuburbInfo(bool redirect)
    {
        return;

        int newSuburbID = Convert.ToInt32(suburbID.Value);

        if (newSuburbID == -1)
        {
            lblSuburbText.Text = "--";
        }
        else
        {
            Suburb suburb = SuburbDB.GetByID(newSuburbID);
            lblSuburbText.Text = suburb.Name + ", " + suburb.State + "(" + suburb.Postcode + ")";
        }

        if (redirect)
        {
            string url = Request.RawUrl;
            url = UrlParamModifier.Update(newSuburbID != -1, url, "suburb", newSuburbID == -1 ? "" : newSuburbID.ToString());
            Response.Redirect(url);
        }
    }

    #endregion

    #region HideTableAndSetErrorMessage, SetErrorMessage, HideErrorMessag

    private void HideTableAndSetErrorMessage(string errMsg = "", string details = "")
    {
        maintable.Visible = false;
        lnkNotes.Visible = false;
        lblFlashingText.Visible = false;
        lnkFlashingText.Visible = false;
        btnSubmit.Visible = false; 
        
        SetErrorMessage(errMsg, details);
    }
    private void SetErrorMessage(string errMsg = "", string details = "")
    {
        if (errMsg.Contains(Environment.NewLine))
            errMsg = errMsg.Replace(Environment.NewLine, "<br />");

        // double escape so shows up literally on webpage for 'alert' message
        string detailsToDisplay = (details.Length == 0 ? "" : " <a href=\"#\" onclick=\"alert('" + details.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("'", "\\'").Replace("\"", "\\'") + "'); return false;\">Details</a>");

        lblErrorMessage.Visible = true;
        if (errMsg != null && errMsg.Length > 0)
            lblErrorMessage.Text = errMsg + detailsToDisplay + "<br />";
        else
            lblErrorMessage.Text = "An error has occurred. Plase contact the system administrator. " + detailsToDisplay + "<br />";
    }
    private void HideErrorMessage()
    {
        lblErrorMessage.Visible = false;
        lblErrorMessage.Text = "";
    }

    #endregion

    protected void btnDeleteUndeletePatient_Command(object sender, CommandEventArgs e)
    {
        if (e.CommandName == "Delete" || e.CommandName == "UnDelete")
        {
            if (e.CommandName == "Delete")
            {
                PatientDB.UpdateInactive(GetFormID(), Convert.ToInt32(Session["StaffID"]));
            }
            if (e.CommandName == "UnDelete")
            {
                PatientDB.UpdateActive(GetFormID(), Convert.ToInt32(Session["StaffID"]));
            }

            Patient patient = PatientDB.GetByID(GetFormID());
            lblDeleteUndeletePatientText.Text    = patient.IsDeleted ? "Un-Delete Patient" : "Delete Patient";
            btnDeleteUndeletePatient.CommandName = patient.IsDeleted ? "UnDelete"          : "Delete";
            btnDeleteUndeletePatient.Text        = patient.IsDeleted ? "Un-Delete" : "Delete";

            changeHistoryLinknRow.Visible        = true;
        }
    }
    protected void btnUpdateScannedDocumentsCount_Click(object sender, EventArgs e)
    {
        UpdateScannedDocumentsCount();
    }

    protected void UpdateScannedDocumentsCount()
    {
        try
        {
            Patient patient = PatientDB.GetByID(GetFormID());
            if (patient == null)
                throw new Exception("Invalid patient id");

            // set it first without hover comments so there is 'some' link if the network is unavailable
            string scannedDocsPopup = "";
            string allFeaturesScannedDocuments = "dialogWidth:500px;dialogHeight:500px;center:yes;resizable:no; scroll:no";
            string jsScannedDocuments = "javascript:window.showModalDialog('/PatientScannedFileUploads.aspx?patient=" + patient.PatientID + "', '', '" + allFeaturesScannedDocuments + "');btnUpdateScannedDocumentsCount.click();return false;";
            string linkScannedDocuments = "<a href=\"#\" onclick=\"" + jsScannedDocuments + "\" title=\"" + scannedDocsPopup + "\">Scanned Documents</a>";
            this.lnkScannedDocuments.Text = linkScannedDocuments;
            this.lnkScannedDocumentsCount.ToolTip = scannedDocsPopup;
            this.spanHoverForQuickViewTip.Visible = false;
            this.lnkScannedDocumentsCount.Text = scannedDocsPopup;

            // now try re-set it all if network retrieved info
            System.IO.FileInfo[] scannedDocs = patient.GetScannedDocs();
            scannedDocsPopup = string.Empty;
            foreach (System.IO.FileInfo fi in scannedDocs)
                scannedDocsPopup += (scannedDocsPopup.Length == 0 ? "" : "\r\n") + fi.Name;
            allFeaturesScannedDocuments = "dialogWidth:500px;dialogHeight:500px;center:yes;resizable:no; scroll:no";
            jsScannedDocuments = "javascript:window.showModalDialog('/PatientScannedFileUploads.aspx?patient=" + patient.PatientID + "', '', '" + allFeaturesScannedDocuments + "');btnUpdateScannedDocumentsCount.click();return false;";
            linkScannedDocuments = "<a href=\"#\" onclick=\"" + jsScannedDocuments + "\" title=\"" + scannedDocsPopup + "\">Scanned Documents</a>";
            this.lnkScannedDocuments.Text = linkScannedDocuments;
            this.lnkScannedDocumentsCount.ToolTip = scannedDocsPopup;
            this.spanHoverForQuickViewTip.Visible = scannedDocs.Length > 0;
            this.lnkScannedDocumentsCount.Text = scannedDocs.Length.ToString();
        }
        catch (CustomMessageException cmEx)
        {
            SetErrorMessage(cmEx.Message);
        }
        catch (System.ComponentModel.Win32Exception)
        {
            // don't need to set any message - it just wont show the current files
            //SetErrorMessage("Connection to network files currently unavailable.");
        }
        catch (Exception ex)
        {
            SetErrorMessage("", ex.ToString());
        }
    }

}
