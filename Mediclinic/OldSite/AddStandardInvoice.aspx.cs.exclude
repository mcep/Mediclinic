using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Collections;
using System.Text.RegularExpressions;

public partial class AddStandardInvoice : System.Web.UI.Page
{

    #region Page_Load

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {

            HideErrorMessage();
            this.Label1.Text = string.Empty;


            if (!IsPostBack)
            {
                Session.Remove("data_selected");
                Session.Remove("sortExpression_Selected");
                Session.Remove("sortExpression_Offering");

                SetUrlFieldsAndHeading();

                invoiceItemsControl.InvoiceType = Booking.InvoiceType.None;
                invoiceItemsControl.SubmitButtonText = "Create Invoice";
                invoiceItemsControl.FillOfferingGrid();
                invoiceItemsControl.FillSelectedGrid();
                invoiceItemsControl.LabelSetPrivateInvoiceVisible = false;
                invoiceItemsControl.ButtonCancelVisible = false;
            }
            else
            {
                ResetPatientName();
                ResetOrgName();
            }

            invoiceItemsControl.UserControlSubmitClicked += new EventHandler(InvoiceItemsControl_SubmitButtonClicked);

        }
        catch (CustomMessageException ex)
        {
            if (IsPostBack) SetErrorMessage(ex.Message);
            else HideTableAndSetErrorMessage(ex.Message);
        }
        catch (Exception ex)
        {
            if (IsPostBack) SetErrorMessage("", ex.ToString());
            else HideTableAndSetErrorMessage("", ex.ToString());
        }
    }

    #endregion

    #region SetUrlFieldsAndHeading

    protected void SetUrlFieldsAndHeading()
    {
        lblHeading.Text = "Create A Standard Invoice";

        try
        {
            string patient_id = Request.QueryString["patient"];
            if (patient_id != null && patient_id != "-1")
            {
                if (!Regex.IsMatch(patient_id, @"^\d+$"))
                    throw new CustomMessageException();

                Patient patient = PatientDB.GetByID(Convert.ToInt32(patient_id));
                if (patient == null)
                    throw new CustomMessageException();

                txtUpdatePatientID.Text = patient.PatientID.ToString();
                txtUpdatePatientName.Text = patient.Person.FullnameWithoutMiddlename;
            }

            string org_id = Request.QueryString["org"];
            if (org_id != null && org_id != "-1")
            {
                if (!Regex.IsMatch(org_id, @"^\d+$"))
                    throw new CustomMessageException();

                Organisation org = OrganisationDB.GetByID(Convert.ToInt32(org_id));
                if (org == null)
                    throw new CustomMessageException();

                txtUpdateOrganisationID.Text = org.OrganisationID.ToString();
                txtUpdateOrganisationName.Text = org.Name;
            }


            if (txtUpdatePatientID.Text.Length > 0 && txtUpdateOrganisationID.Text.Length > 0)
            {
                lblHeading.Text = "Create A Standard Invoice : " + txtUpdatePatientName.Text + " at " + txtUpdateOrganisationName.Text;
                patient_row.Attributes["class"] = "hiddencol";
                org_row.Attributes["class"] = "hiddencol";
            }
            if (txtUpdatePatientID.Text.Length > 0)
            {
                lblHeading.Text = "Create A Standard Invoice : " + txtUpdatePatientName.Text;
                patient_row.Attributes["class"] = "hiddencol";
            }
            if (txtUpdateOrganisationID.Text.Length > 0)
            {
                lblHeading.Text = "Create A Standard Invoice : " + txtUpdateOrganisationName.Text;
                org_row.Attributes["class"] = "hiddencol";
            }

        }
        catch (CustomMessageException)
        {
            SetErrorMessage();
        }
    }

    #endregion

    #region InvoiceItemsControl_SubmitButtonClicked

    private void InvoiceItemsControl_SubmitButtonClicked(object sender, EventArgs e)
    {
        try
        {
            if (txtUpdateOrganisationID.Text.Length == 0)
                throw new CustomMessageException("Please select an organisation.");

            Organisation org = OrganisationDB.GetByID(Convert.ToInt32(txtUpdateOrganisationID.Text));
            if (org == null)
                throw new Exception("Unknown organisation selected. Pelase contact your system administrator.");


            // keep id's to delete if exception and need to roll back
            int invID  = -2;
            ArrayList invLineIDs = new ArrayList();

            // used to check update stock and check warning level emails sent
            ArrayList invoiceLines = new ArrayList();


            try
            {
                DataTable dt_selected_list = this.invoiceItemsControl.GetSelectedList();

                decimal total = 0;
                for (int i = 0; i < dt_selected_list.Rows.Count; i++)
                    total += Convert.ToDecimal(dt_selected_list.Rows[i]["total_line_price"]);

                int patientID = txtUpdatePatientID.Text.Length      == 0 ? -1 : Convert.ToInt32(txtUpdatePatientID.Text);

                invID = InvoiceDB.Insert(108, -1, 0, patientID, org.OrganisationID, "", "", Convert.ToInt32(Session["StaffID"]), Convert.ToInt32(Session["SiteID"]), total, (decimal)0.00, false, false, false);
                for (int i = 0; i < dt_selected_list.Rows.Count; i++)
                {

                    int invoiceLineID = InvoiceLineDB.Insert(invID, -1, Convert.ToInt32(dt_selected_list.Rows[i]["offering_id"]), Convert.ToInt32(dt_selected_list.Rows[i]["quantity"]), Convert.ToDecimal(dt_selected_list.Rows[i]["total_line_price"]), Convert.ToDecimal(0.00), "");
                    invLineIDs.Add(invoiceLineID);
                    invoiceLines.Add(new InvoiceLine(invoiceLineID, invID, -1, Convert.ToInt32(dt_selected_list.Rows[i]["offering_id"]), Convert.ToInt32(dt_selected_list.Rows[i]["quantity"]), Convert.ToDecimal(dt_selected_list.Rows[i]["total_line_price"]), Convert.ToDecimal(0.00), ""));
                }

                Session.Remove("data_selected");


                // successfully completed, so update and check warning level for stocks

                Stock[] stockList = StockDB.GetByOrg(org.OrganisationID);
                string warningEmail = SystemVariableDB.GetByDescr("StockWarningNotificationEmailAddress").Value;
                foreach (InvoiceLine invoiceLine in invoiceLines)
                {
                    for (int i = 0; i < stockList.Length; i++)
                    {
                        if (invoiceLine.Offering.OfferingID == stockList[i].Offering.OfferingID && stockList[i].Quantity > 0)
                        {
                            int prevQty = stockList[i].Quantity;
                            int postQty = stockList[i].Quantity - (int)invoiceLine.Quantity;
                            if (postQty < 0) postQty = 0;

                            if (warningEmail.Length > 0 && stockList[i].WarningAmount >= 0 && stockList[i].WarningAmount < prevQty && stockList[i].WarningAmount >= postQty)
                            {
                                try
                                {
                                    Emailer.SimpleEmail(
                                        warningEmail,
                                        "Stock Warning Level Reached For " + stockList[i].Offering.Name + " at " + org.Name,
                                        "This email is to notify you that the stock warning level of <b>" + stockList[i].WarningAmount + "</b> items that was set for <b>" + stockList[i].Offering.Name + "</b> at <b>" + org.Name + "</b> has been reached and you may need to re-stock.<br /><br />Best regards,<br />Mediclinic",
                                        true,
                                        null,
                                        null
                                        );
                                }
                                catch (Exception ex)
                                {
                                    Logger.LogException(ex, true);
                                }
                            }

                            StockDB.UpdateQuantity(stockList[i].StockID, postQty);
                            stockList[i].Quantity = postQty;
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                // roll back...
                foreach (int invLineID in invLineIDs)
                    InvoiceLineDB.Delete(invLineID);
                InvoiceDB.Delete(invID);

                throw;
            }

            Response.Redirect("~/ViewInvoice.aspx?invoice_id=" + invID + "&is_popup=0");
            //Response.Redirect("~/InvoiceInfo.aspx?start_date=" + DateTime.Today.ToString("yyyy_MM_dd") + "&end_date=" + DateTime.Today.AddDays(1).ToString("yyyy_MM_dd") + "&inc_medicare=0&inc_dva=0&inc_private=1");
        }
        catch (CustomMessageException cmEx)
        {
            SetErrorMessage( cmEx.Message);
            return;
        }
        catch (Exception ex)
        {
            SetErrorMessage("", ex.ToString());
            return;
        }

    }

    #endregion

    #region ResetPatientName, ResetOrgName, btnUpdatePatient_Click, btnUpdateOrganisation_Click

    protected void ResetPatientName()
    {
        if (txtUpdatePatientID.Text.Length == 0)
            txtUpdatePatientName.Text = "";
        else
        {
            Patient patient = PatientDB.GetByID(Convert.ToInt32(txtUpdatePatientID.Text));
            txtUpdatePatientName.Text = patient.Person.FullnameWithoutMiddlename;
        }
    }

    protected void ResetOrgName()
    {
        if (txtUpdateOrganisationID.Text.Length == 0)
            txtUpdateOrganisationName.Text = "";
        else
        {
            Organisation org = OrganisationDB.GetByID(Convert.ToInt32(txtUpdateOrganisationID.Text));
            txtUpdateOrganisationName.Text = org.Name;
        }
    }

    protected void btnUpdatePatient_Click(object sender, EventArgs e)
    {
        if (txtUpdatePatientID.Text.Length > 0)
            this.lblPatientName.Text = txtUpdatePatientID.Text;
        else
            this.lblPatientName.Text = "--";
    }

    protected void btnUpdateOrganisation_Click(object sender, EventArgs e)
    {
        if (txtUpdateOrganisationID.Text.Length > 0)
            this.lblOrganisationName.Text = txtUpdateOrganisationID.Text;
        else
            this.lblOrganisationName.Text = "--";
    }

    #endregion

    #region SetErrorMessage, HideErrorMessag

    private void HideTableAndSetErrorMessage(string errMsg = "", string details = "")
    {
        SetErrorMessage(errMsg, details);
    }
    private void SetErrorMessage(string errMsg = "", string details = "")
    {
        if (errMsg.Contains(Environment.NewLine))
            errMsg = errMsg.Replace(Environment.NewLine, "<br />");

        // double escape so shows up literally on webpage for 'alert' message
        string detailsToDisplay = (details.Length == 0 ? "" : " <a href=\"#\" onclick=\"alert('" + details.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("'", "\\'").Replace("\"", "\\'") + "'); return false;\">Details</a>");

        lblErrorMessage.Visible = true;
        if (errMsg != null && errMsg.Length > 0)
            lblErrorMessage.Text = errMsg + detailsToDisplay + "<br />";
        else
            lblErrorMessage.Text = "An error has occurred. Plase contact the system administrator. " + detailsToDisplay + "<br />";
    }
    private void HideErrorMessage()
    {
        lblErrorMessage.Visible = false;
        lblErrorMessage.Text = "";
        spnErrorMessageLineBreak.Visible = false;
    }

    #endregion

}
