using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Configuration;
using System.Text.RegularExpressions;
using System.Collections;
using System.Web.UI.HtmlControls;

public partial class ViewInvoice : System.Web.UI.Page
{

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {

            HideErrorMessage();

            if (GetFormIsPopup())
                Utilities.UpdatePageHeader(Page.Master, true, true);
            btnClose.Visible = GetFormIsPopup();

            if (!IsPostBack)
            {
                FillInvoicesList();
            }

            if (!Utilities.IsDev())
            {
                this.Label1.Visible = false;
            }

        }
        catch (CustomMessageException ex)
        {
            if (IsPostBack) SetErrorMessage(ex.Message);
            else HideTableAndSetErrorMessage(ex.Message);
        }
        catch (Exception ex)
        {
            if (IsPostBack) SetErrorMessage("", ex.ToString());
            else HideTableAndSetErrorMessage("", ex.ToString());
        }
    }

    #region IsValidFormParam(), GetFormParam()

    private bool IsValidFormBooking()
    {
        string id = Request.QueryString["booking_id"];
        return id != null && Regex.IsMatch(id, @"^\d+$");
    }
    private Booking GetFormBooking()
    {
        if (!IsValidFormBooking())
            throw new Exception("Invalid booking id");

        int id = Convert.ToInt32(Request.QueryString["booking_id"]);
        Booking booking = BookingDB.GetByID(id);
        return booking;
    }

    private bool IsValidFormInvoice()
    {
        string id = Request.QueryString["invoice_id"];
        return id != null && Regex.IsMatch(id, @"^\d+$");
    }
    private Invoice GetFormInvoice()
    {
        if (!IsValidFormInvoice())
            throw new Exception("Invalid invoice id");

        int id = Convert.ToInt32(Request.QueryString["invoice_id"]);
        Invoice invoice = InvoiceDB.GetByID(id);
        return invoice;
    }

    private bool GetFormIsPopup()
    {
        return Request.QueryString["is_popup"] == null || Request.QueryString["is_popup"].ToString() == "1";
    }

    #endregion


    protected void FillInvoicesList()
    {
        try
        {
            bool isStakeholder   = Session["IsStakeholder"] != null && Convert.ToBoolean(Session["IsStakeholder"]);
            bool isMasterAdmin   = Session["IsMasterAdmin"] != null && Convert.ToBoolean(Session["IsMasterAdmin"]);
            bool isAdmin         = Session["IsAdmin"]       != null && Convert.ToBoolean(Session["IsAdmin"]);
            bool isPrincipal     = Session["IsPrincipal"]   != null && Convert.ToBoolean(Session["IsPrincipal"]);
            bool isProvider      = Session["IsProvider"]    != null && Convert.ToBoolean(Session["IsProvider"]);

            int loggedInStaffID  = Session["StaffID"] == null ? -1 : Convert.ToInt32(Session["StaffID"]);


            if (IsValidFormBooking())
            {
                Booking booking = GetFormBooking();
                if (booking == null)
                    throw new CustomMessageException("Invalid Booking");

                bool canSeeInvoiceInfo = isStakeholder || isMasterAdmin || isAdmin || isPrincipal || (booking.Provider != null && loggedInStaffID == booking.Provider.StaffID && booking.DateStart > DateTime.Today.AddMonths(-2));
                if (!canSeeInvoiceInfo)
                    throw new CustomMessageException("You don't have access to see this invoice.");

                DataTable dt_invoices = InvoiceDB.GetDataTable_ByBookingID(booking.BookingID, true);
                FillInvoicesList(dt_invoices);
            }
            else if (IsValidFormInvoice())
            {
                Invoice invoice = GetFormInvoice();
                if (invoice == null)
                    throw new CustomMessageException("Invalid Invoice");

                bool canSeeInvoiceInfo = invoice.Booking != null ?
                    isStakeholder || isMasterAdmin || isAdmin || isPrincipal || (invoice.Booking != null && invoice.Booking.Provider != null && loggedInStaffID == invoice.Booking.Provider.StaffID && invoice.Booking.DateStart > DateTime.Today.AddMonths(-2))
                    :
                    isStakeholder || isMasterAdmin || isAdmin || isPrincipal || (loggedInStaffID == invoice.Staff.StaffID && invoice.InvoiceDateAdded > DateTime.Today.AddMonths(-2));
                if (!canSeeInvoiceInfo)
                    throw new CustomMessageException("You don't have access to see this invoice.");


                if (invoice.PayerOrganisation != null && invoice.PayerOrganisation.OrganisationID == -1)
                    heading.InnerText = invoice.IsReversed ? "View *Reversed* Medicare Invoice" : "View Medicare Invoice";
                else if (invoice.PayerOrganisation != null && invoice.PayerOrganisation.OrganisationID == -2)
                    heading.InnerText = invoice.IsReversed ? "View *Reversed* DVA Invoice" : "View DVA Invoice";
                else if (invoice.PayerOrganisation != null)
                {
                    string orgTypeDescr = invoice.PayerOrganisation.OrganisationType.OrganisationTypeID == 218 ? "Clinic" : "Facility";
                    heading.InnerText = invoice.IsReversed ? "View *Reversed* " + orgTypeDescr + "Payable Invoice" : "View " + orgTypeDescr + "Payable Invoice";
                }
                else if (invoice.PayerOrganisation == null && invoice.PayerPatient != null)
                    heading.InnerText = invoice.IsReversed ? "View *Reversed* PT Payable Invoice" : "View PT Payable Invoice";


                DataTable dt_invoices = InvoiceDB.GetDataTable_ByID(invoice.InvoiceID);
                FillInvoicesList(dt_invoices);
            }
            else
                throw new CustomMessageException();
        }
        catch (CustomMessageException cmEx)
        {
            HideTableAndSetErrorMessage(cmEx.Message);
        }
    }
    protected void FillInvoicesList(DataTable dt_invoices)
    {
        Invoice[] invoices   = new Invoice[dt_invoices.Rows.Count];
        int[]     invoiceIDs = new int[dt_invoices.Rows.Count];


        int countShowing = 0;
        dt_invoices.Columns.Add("message_reversed_wiped", typeof(string));
        dt_invoices.Columns.Add("td_name",                typeof(string)); // for use of td 'name' tag to hide all reversed or hide all rejected
        dt_invoices.Columns.Add("style_display",          typeof(string)); // to set initially reversed and/or rejected as hidden
        dt_invoices.Columns.Add("inv_debtor",             typeof(string));
        dt_invoices.Columns.Add("inv_total_due",          typeof(decimal));
        for (int i = 0; i < dt_invoices.Rows.Count; i++)
        {
            Invoice invoice = InvoiceDB.LoadAll(dt_invoices.Rows[i]);

            invoiceIDs[i] = invoice.InvoiceID;
            invoices[i]   = invoice;

            if (invoice.ReversedBy != null)
            {
                dt_invoices.Rows[i]["message_reversed_wiped"] = "Reversed";
                dt_invoices.Rows[i]["td_name"]                = "td_reversed";
                dt_invoices.Rows[i]["style_display"]          = "none";
            }
            else if (invoice.PayerOrganisation != null && (invoice.PayerOrganisation.OrganisationID == -1 || invoice.PayerOrganisation.OrganisationID == -2) && invoice.Total > 0 && invoice.CreditNotesTotal >= invoice.Total)
            {
                dt_invoices.Rows[i]["message_reversed_wiped"] = "Rejected";
                dt_invoices.Rows[i]["td_name"]                = "td_rejected";
                dt_invoices.Rows[i]["style_display"]          = "none";
            }
            else
            {
                countShowing++;
            }

            if (invoice.PayerOrganisation != null)
                dt_invoices.Rows[i]["inv_debtor"] = invoice.PayerOrganisation.Name;
            else if (invoice.PayerPatient != null)
                dt_invoices.Rows[i]["inv_debtor"] = invoice.PayerPatient.Person.FullnameWithoutMiddlename;
            else
                dt_invoices.Rows[i]["inv_debtor"] = invoice.Booking                != null && 
                                                    invoice.Booking.Patient        != null && 
                                                    invoice.Booking.Patient.Person != null    ? invoice.Booking.Patient.Person.FullnameWithoutMiddlename : string.Empty; // empty for invoices without bookings

            dt_invoices.Rows[i]["inv_total_due"] = invoice.TotalDue.ToString();
        }


        // single db call to get invoicelines into hashtable lookup by invoice
        Hashtable invoiceLinesHash = InvoiceLineDB.GetBulkInvoiceLinesByInvoiceID(invoices);

        dt_invoices.Columns.Add("inv_lines_text", typeof(string));
        for (int i = 0; i < dt_invoices.Rows.Count; i++)
        {
            Invoice invoice = InvoiceDB.LoadAll(dt_invoices.Rows[i]);
            InvoiceLine[] invLines = (InvoiceLine[])invoiceLinesHash[invoice.InvoiceID];

            bool isDVA = invoice.PayerOrganisation != null && invoice.PayerOrganisation.OrganisationID == -2;

            string output = "<ul>";
            foreach (InvoiceLine invLine in invLines)
            {
                string link = "<a title=\"Edit\" onclick=\"javascript:window.showModalDialog('ViewInvoiceUpdateAreaTreated.aspx?inv_line=" + invLine.InvoiceLineID+ "', '', 'dialogWidth:600px;dialogHeight:175px;center:yes;resizable:no; scroll:no');window.location.href=window.location.href;return false;\" href=\"#\">Edit</a>";
                string areaTreated = (isDVA ? "<br />Area Treated: " + (invLine.AreaTreated.Length == 0 ? "[EMPTY]" : invLine.AreaTreated) + " &nbsp;&nbsp;" + link : "");

                output += "<li>" + (invLine.Offering == null ? "" : invLine.Offering.Name) + " x " + ((invLine.Quantity % 1) == 0 ? Convert.ToInt32(invLine.Quantity) : invLine.Quantity) + " = " + invLine.Price + (invLine.Patient.Person == null ? "" : " [" + invLine.Patient.Person.FullnameWithoutMiddlename + "]") + areaTreated + "</li>";
            }
            output += "</ul>";

            dt_invoices.Rows[i]["inv_lines_text"] = output;

            if (countShowing == 0)
                dt_invoices.Rows[i]["style_display"] = "";
        }


        //get approximate page width...
        // 194 = row titles
        // average row = 340 px (about 220-440)
        // add 70px for good measure
        int pageWidth = 194 + 340 * (countShowing == 0 ? 1 : countShowing) + 120;
        Page.ClientScript.RegisterStartupScript(this.GetType(), "resize_window", "<script language=javascript>window.resizeTo(  (" + pageWidth + "+ window.outerWidth - window.innerWidth) < screen.width ? (" + pageWidth + " + window.outerWidth - window.innerWidth) : screen.width , window.outerHeight);</script>");






        if (dt_invoices.Rows.Count <= 1)
        {
            divToggleShowReversedRejected.Visible = false;
        }
        else if (countShowing == 0)
        {
            chkShowReversed.Checked = true;
            chkShowRejected.Checked = true;
        }


        // now databind
        Repeater1.DataSource  = dt_invoices; Repeater1.DataBind();
        Repeater2.DataSource  = dt_invoices; Repeater2.DataBind();
        Repeater3.DataSource  = dt_invoices; Repeater3.DataBind();
        Repeater4.DataSource  = dt_invoices; Repeater4.DataBind();
        Repeater5.DataSource  = dt_invoices; Repeater5.DataBind();
        Repeater6.DataSource  = dt_invoices; Repeater6.DataBind();
        Repeater7.DataSource  = dt_invoices; Repeater7.DataBind();
        Repeater8.DataSource  = dt_invoices; Repeater8.DataBind();
        Repeater9.DataSource  = dt_invoices; Repeater9.DataBind();
        Repeater10.DataSource = dt_invoices; Repeater10.DataBind();
        Repeater11.DataSource = dt_invoices; Repeater11.DataBind();
        Repeater12.DataSource = dt_invoices; Repeater12.DataBind();
        Repeater13.DataSource = dt_invoices; Repeater13.DataBind();
        Repeater14.DataSource = dt_invoices; Repeater14.DataBind();
        Repeater15.DataSource = dt_invoices; Repeater15.DataBind();
        Repeater16.DataSource = dt_invoices; Repeater16.DataBind();
        Repeater17.DataSource = dt_invoices; Repeater17.DataBind();


        // non booking invoices (ie standard invoices) will not have a booking
        Booking booking = invoices[0].Booking;
        if (booking != null)
        {
            string patientText = string.Empty;
            if (booking != null && booking.Patient != null)
                patientText = booking.Patient.Person.FullnameWithoutMiddlename;
            else if (invoices[0].PayerPatient != null)
                patientText = invoices[0].PayerPatient.Person.FullnameWithoutMiddlename;
            else
                patientText = "< No patient >";

            // show booking info
            lblBooking_Org.Text                 = booking.Organisation.Name;
            lblBooking_Provider.Text            = booking.Provider.Person.FullnameWithoutMiddlename;
            lblBooking_Patient.Text             = patientText; // booking.Patient.Person.FullnameWithoutMiddlename;
            lblBooking_Offering.Text            = booking.Offering == null ? "< No service >" : booking.Offering.Name;
            lblBooking_BookingStatus.Text       = booking.BookingStatus.Descr;
            lblBooking_Time.Text                = booking.DateStart.Date.ToString("dd MMM yyyy") + " - " + booking.DateStart.ToString("hh:mm") + "-" + booking.DateEnd.ToString("hh:mm");
            lblBooking_PatientMissedAppt.Text   = booking.IsPatientMissedAppt ? "Yes" : "No";
            lblBooking_ProviderMissedAppt.Text  = booking.IsProviderMissedAppt ? "Yes" : "No";
            lblBooking_Emergency.Text           = booking.IsEmergency ? "Yes" : "No";
            lblBooking_Notes.Text               = Note.GetPopupLinkText(15, booking.EntityID, booking.NoteCount > 0, true, 980, 430, "images/notes-bw-24.jpg", "images/notes-24.png");
        }
        else
        {
            booking_space.Visible                  = false;
            booking_title.Visible                  = false;
            booking_offering.Visible               = false;
            booking_patient.Visible                = false;
            booking_provider.Visible               = false;
            booking_org.Visible                    = false;
            booking_status.Visible                 = false;
            booking_apptmt_time.Visible            = false;
            booking_patiemt_missed_apptmt.Visible  = false;
            booking_provider_missed_apptmt.Visible = false;
            booking_isemergency.Visible            = false;
            booking_notes.Visible                  = false;
        }
    }

    protected void Repeater15_ItemCreated(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {

            Staff loggedInStaff = StaffDB.GetByID(Convert.ToInt32(Session["StaffID"]));

            DataRowView dr = (DataRowView)e.Item.DataItem;
            if (dr == null || dr.Row == null)
                return;
            DataRow row = dr.Row;
            Invoice invoice = InvoiceDB.LoadAll(row);


            // get controls
            Repeater           lstReceipts                      = (Repeater)e.Item.FindControl("lstReceipts");
            HtmlGenericControl div_receipts_list                = (HtmlGenericControl)e.Item.FindControl("div_receipts_list");
            HtmlGenericControl span_receipts_trailing_space_row = (HtmlGenericControl)e.Item.FindControl("span_receipts_trailing_space_row");
            Label              lnkAddReceipt                    = (Label)e.Item.FindControl("lnkAddReceipt");
            LinkButton         showHideReceiptsList             = (LinkButton)e.Item.FindControl("showHideReceiptsList");


            // get receipts
            DataTable tblReciepts = ReceiptDB.GetDataTableByInvoice(invoice.InvoiceID);
            lstReceipts.Visible   = tblReciepts.Rows.Count >  0;
            span_receipts_trailing_space_row.Visible = tblReciepts.Rows.Count > 0;
            if (tblReciepts.Rows.Count > 0)
            {
                tblReciepts.Columns.Add("receipt_url",         typeof(string));
                tblReciepts.Columns.Add("show_status",         typeof(string));
                tblReciepts.Columns.Add("status",              typeof(string));
                tblReciepts.Columns.Add("show_reconcile_link", typeof(string));
                tblReciepts.Columns.Add("reconcile_link",      typeof(string));
                tblReciepts.Columns.Add("show_reverse_link",   typeof(string));
                for (int i = 0; i < tblReciepts.Rows.Count; i++)
                {
                    Receipt receipt = ReceiptDB.LoadAll(tblReciepts.Rows[i]);

                    tblReciepts.Rows[i]["receipt_url"] = receipt.GetViewPopupLink();

                    bool isReconciledOrReversed = receipt.IsReconciled || receipt.IsReversed;
                    tblReciepts.Rows[i]["status"]              =  receipt.IsReconciled    ? "Reconciled" : "Reversed";
                    tblReciepts.Rows[i]["show_status"]         =  isReconciledOrReversed  ? "1" : "0";
                    tblReciepts.Rows[i]["reconcile_link"]      =  receipt.GetReconcilePopupLink("window.location.href = window.location.href;");
                    tblReciepts.Rows[i]["show_reconcile_link"] = !isReconciledOrReversed && (loggedInStaff.IsStakeholder || loggedInStaff.IsMasterAdmin || loggedInStaff.IsAdmin || loggedInStaff.IsPrincipal) ? "1" : "0";
                    tblReciepts.Rows[i]["show_reverse_link"]   = !isReconciledOrReversed  ? "1" : "0";
                }

                lstReceipts.DataSource = tblReciepts;
                lstReceipts.DataBind();
            }

            if (!invoice.IsPaID) // can add items
                lnkAddReceipt.Text = Receipt.GetAddReceiptPopupLink(invoice.InvoiceID, "window.location.href = window.location.href;");
            else
                lnkAddReceipt.Text = tblReciepts.Rows.Count > 0 ? string.Empty : "No Payments";
            //span_add_receipts_row.Style["text-align"] = (tblReciepts.Rows.Count > 0) ? "center" : null;  // if have table, center add link, else left align
            lnkAddReceipt.Visible = lnkAddReceipt.Text.Length > 0;
            showHideReceiptsList.OnClientClick = "javascript:show_hide_byname('div_receipts_list_" + invoice.InvoiceID + "'); return false;";
            showHideReceiptsList.Visible = tblReciepts.Rows.Count > 0;
            div_receipts_list.Attributes["name"] = "div_receipts_list_" + invoice.InvoiceID;

        }
    }
    protected void lstReceipts_ItemCreated(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            DataRowView dr = (DataRowView)e.Item.DataItem;
            if (dr == null || dr.Row == null)
                return;
            DataRow row = dr.Row;


            Label       lnkViewReceipt     = (Label)e.Item.FindControl("lnkViewReceipt");
            Label       lblReceiptDate     = (Label)e.Item.FindControl("lblReceiptDate");
            Label       lblPaymentType     = (Label)e.Item.FindControl("lblPaymentType");
            Label       lblReceiptTotal    = (Label)e.Item.FindControl("lblReceiptTotal");
            Label       lblReceiptAmountReconciled = (Label)e.Item.FindControl("lblReceiptAmountReconciled");
            Label       lblStatus          = (Label)e.Item.FindControl("lblStatus");
            Label       lnkReconcile       = (Label)e.Item.FindControl("lnkReconcile");
            LinkButton  lnkReverse         = (LinkButton)e.Item.FindControl("lnkReverse");
            HiddenField lblHiddenReceiptID = (HiddenField)e.Item.FindControl("lblHiddenReceiptID");


            lnkViewReceipt.Text = row["receipt_url"].ToString();
            lblReceiptDate.Text = Convert.ToDateTime(row["receipt_date_added"]).ToString("dd-MM-yyyy");
            lblPaymentType.Text = row["descr"].ToString();
            lblReceiptTotal.Text = row["total"].ToString();
            lblReceiptAmountReconciled.Text = row["amount_reconciled"].ToString();

            lblStatus.Text = row["status"].ToString();
            lblStatus.Visible = row["show_status"].ToString() == "1";

            lnkReconcile.Text = row["reconcile_link"].ToString();
            lnkReconcile.Visible = row["show_reconcile_link"].ToString() == "1";

            lnkReverse.CommandArgument = row["receipt_id"].ToString();
            lnkReverse.Visible = row["show_reverse_link"].ToString() == "1";
            lnkReverse.OnClientClick = "javascript:if (!confirm('Are you sure you want to reverse this record?')) return false;";
            lblHiddenReceiptID.Value = row["receipt_id"].ToString();
        }
    }

    protected void Repeater16_ItemCreated(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            DataRowView dr = (DataRowView)e.Item.DataItem;
            if (dr == null || dr.Row == null)
                return;
            DataRow row = dr.Row;
            Invoice invoice = InvoiceDB.LoadAll(row);


            // get controls
            Repeater           lstCreditNotes         = (Repeater)e.Item.FindControl("lstCreditNotes");
            HtmlGenericControl div_credit_notes_list  = (HtmlGenericControl)e.Item.FindControl("div_credit_notes_list");
            HtmlGenericControl span_credit_notes_trailing_space_row = (HtmlGenericControl)e.Item.FindControl("span_credit_notes_trailing_space_row");
            Label              lnkAddCreditNote       = (Label)e.Item.FindControl("lnkAddCreditNote");
            LinkButton         showHideCreditNoteList = (LinkButton)e.Item.FindControl("showHideCreditNoteList");


            // get credit notes
            DataTable tblCreditNotes = CreditNoteDB.GetDataTableByInvoice(invoice.InvoiceID);
            lstCreditNotes.Visible = tblCreditNotes.Rows.Count > 0;
            span_credit_notes_trailing_space_row.Visible = tblCreditNotes.Rows.Count > 0;
            if (tblCreditNotes.Rows.Count > 0)
            {
                tblCreditNotes.Columns.Add("credit_note_url", typeof(string));
                tblCreditNotes.Columns.Add("show_status", typeof(string));
                tblCreditNotes.Columns.Add("status", typeof(string));
                tblCreditNotes.Columns.Add("show_reverse_link", typeof(string));
                tblCreditNotes.Columns.Add("show_status_column", typeof(string));
                for (int i = 0; i < tblCreditNotes.Rows.Count; i++)
                {
                    CreditNote creditNote = CreditNoteDB.Load(tblCreditNotes.Rows[i]);
                    tblCreditNotes.Rows[i]["credit_note_url"]    = creditNote.GetViewPopupLink();

                    tblCreditNotes.Rows[i]["show_status"]        =  creditNote.IsReversed ? "1" : "0";
                    tblCreditNotes.Rows[i]["show_reverse_link"]  = !creditNote.IsReversed && !invoice.IsReversed ? "1" : "0";
                    tblCreditNotes.Rows[i]["show_status_column"] = !invoice.IsReversed ? "1" : "0";
                }

                lstCreditNotes.DataSource = tblCreditNotes;
                lstCreditNotes.DataBind();
            }

            if (!invoice.IsPaID) // can add items
                lnkAddCreditNote.Text = CreditNote.GetAddCreditNotePopupLink(invoice.InvoiceID, "window.location.href = window.location.href;");
            else
                lnkAddCreditNote.Text = tblCreditNotes.Rows.Count > 0 ? string.Empty : "No Adjustment Notes";
            //span_add_credit_notes_row.Style["text-align"] = (tblCreditNotes.Rows.Count > 0) ? "center" : null;  // if have table, center add link, else left align
            lnkAddCreditNote.Visible = lnkAddCreditNote.Text.Length > 0;
            showHideCreditNoteList.OnClientClick = "javascript:show_hide_byname('div_credit_notes_list_" + invoice.InvoiceID + "'); return false;";
            showHideCreditNoteList.Visible = tblCreditNotes.Rows.Count > 0;
            div_credit_notes_list.Attributes["name"] = "div_credit_notes_list_" + invoice.InvoiceID;
        }
    }
    protected void lstCreditNotes_ItemCommand(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            DataRowView dr = (DataRowView)e.Item.DataItem;
            if (dr == null || dr.Row == null)
                return;
            DataRow row = dr.Row;


            Label         lnkViewCreditNote     = (Label)e.Item.FindControl("lnkViewCreditNote");
            Label         lblCreditNoteDate     = (Label)e.Item.FindControl("lblCreditNoteDate");
            Label         lblCreditNoteTotal    = (Label)e.Item.FindControl("lblCreditNoteTotal");
            HtmlTableCell tdStatusColumn        = (HtmlTableCell)e.Item.FindControl("tdStatusColumn");
            Label         lblStatus             = (Label)e.Item.FindControl("lblStatus");
            LinkButton    lnkReverse            = (LinkButton)e.Item.FindControl("lnkReverse");
            HiddenField   lblHiddenCreditNoteID = (HiddenField)e.Item.FindControl("lblHiddenCreditNoteID");


            lnkViewCreditNote.Text = row["credit_note_url"].ToString();
            lblCreditNoteDate.Text = Convert.ToDateTime(row["credit_note_date_added"]).ToString("dd-MM-yyyy");
            lblCreditNoteTotal.Text = row["total"].ToString();

            tdStatusColumn.Visible = row["show_status_column"].ToString() == "1";
            lblStatus.Visible = row["show_status"].ToString() == "1";

            lnkReverse.CommandArgument = row["creditnote_id"].ToString();
            lnkReverse.Visible = row["show_reverse_link"].ToString() == "1";
            lnkReverse.OnClientClick = "javascript:if (!confirm('Are you sure you want to reverse this record?')) return false;";
            lblHiddenCreditNoteID.Value = row["creditnote_id"].ToString();
        }
    }

    protected void Repeater17_ItemCreated(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            DataRowView dr = (DataRowView)e.Item.DataItem;
            if (dr == null || dr.Row == null)
                return;
            DataRow row = dr.Row;
            Invoice invoice = InvoiceDB.LoadAll(row);


            // get controls
            Repeater           lstRefunds                      = (Repeater)e.Item.FindControl("lstRefunds");
            HtmlGenericControl div_refunds_list                = (HtmlGenericControl)e.Item.FindControl("div_refunds_list");
            HtmlGenericControl span_refunds_trailing_space_row = (HtmlGenericControl)e.Item.FindControl("span_refunds_trailing_space_row");
            Label              lnkAddRefund                    = (Label)e.Item.FindControl("lnkAddRefund");
            LinkButton         showHideRefundsList             = (LinkButton)e.Item.FindControl("showHideRefundsList");


            // get refunds
            DataTable tblRefunds = RefundDB.GetDataTableByInvoice(invoice.InvoiceID);
            lstRefunds.Visible = tblRefunds.Rows.Count > 0;
            span_refunds_trailing_space_row.Visible = tblRefunds.Rows.Count > 0;
            if (tblRefunds.Rows.Count > 0)
            {
                tblRefunds.Columns.Add("refund_url", typeof(string));
                for (int i = 0; i < tblRefunds.Rows.Count; i++)
                {
                    Refund refund = RefundDB.LoadAll(tblRefunds.Rows[i]);
                    tblRefunds.Rows[i]["refund_url"] = refund.GetViewPopupLink();
                }

                lstRefunds.DataSource = tblRefunds;
                lstRefunds.DataBind();
            }

            lnkAddRefund.Visible = tblRefunds.Rows.Count == 0;
            //if (!invoice.IsPaID) // can add items
            if (tblRefunds.Rows.Count == 0) // can add items
                lnkAddRefund.Text = Refund.GetAddPopupLink(invoice.InvoiceID, "window.location.href = window.location.href;");
            else
                lnkAddRefund.Text = tblRefunds.Rows.Count > 0 ? string.Empty : "No Refunds";
            //span_add_refunds_row.Style["text-align"] = (tblRefunds.Rows.Count > 0) ? "center" : null;  // if have table, center add link, else left align
            lnkAddRefund.Visible = lnkAddRefund.Text.Length > 0 && invoice.ReceiptsTotal > 0;
            showHideRefundsList.OnClientClick = "javascript:show_hide_byname('div_refunds_list_" + invoice.InvoiceID + "'); return false;";
            showHideRefundsList.Visible = tblRefunds.Rows.Count > 0;
            div_refunds_list.Attributes["name"] = "div_refunds_list_" + invoice.InvoiceID;
        }
    }
    protected void lstRefunds_ItemCreated(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            DataRowView dr = (DataRowView)e.Item.DataItem;
            if (dr == null || dr.Row == null)
                return;
            DataRow row = dr.Row;


            Label lnkViewRefund   = (Label)e.Item.FindControl("lnkViewRefund");
            Label lblRefundDate   = (Label)e.Item.FindControl("lblRefundDate");
            Label lblRefundTotal  = (Label)e.Item.FindControl("lblRefundTotal");
            Label lblRefundReason = (Label)e.Item.FindControl("lblRefundReason");


            lnkViewRefund.Text = row["refund_url"].ToString();
            lblRefundDate.Text = Convert.ToDateTime(row["refund_date_added"]).ToString("dd-MM-yyyy");
            lblRefundTotal.Text = row["total"].ToString();
            lblRefundReason.Text = row["descr"].ToString();
        }
    }

    protected void ReverseReceipt_Command(object sender, CommandEventArgs e)
    {
        try
        {

            // for some reason, it doesn't keep the command argument when set in 
            // the code behind in a nested repeater, so set it in a hidden control and its fine

            //int receiptID = Convert.ToInt32(e.CommandArgument);

            int receiptID = -1;
            foreach (Control c in ((Control)sender).Parent.Controls)
                if (c.ID == "lblHiddenReceiptID")
                    receiptID = Convert.ToInt32(((HiddenField)c).Value);


            Receipt receipt = ReceiptDB.GetByID(receiptID);
            if (receipt == null)
                throw new CustomMessageException("Invalid receipt - does not exist");
            if (receipt.IsReversed)
                throw new CustomMessageException("Receipt already reversed");
            if (receipt.IsReconciled)
                throw new CustomMessageException("Can not reverse a receipt that has been reconciled");

            ReceiptDB.Reverse(receipt.ReceiptID, Convert.ToInt32(Session["StaffID"]));

            FillInvoicesList();
        }
        catch (CustomMessageException cmEx)
        {
            SetErrorMessage(cmEx.Message);
        }
        catch (Exception ex)
        {
            SetErrorMessage("", ex.ToString());
        }
    }
    protected void ReverseCreditNote_Command(object sender, CommandEventArgs e)
    {
        try
        {

            // for some reason, it doesn't keep the command argument when set in 
            // the code behind in a nested repeater, so set it in a hidden control and its fine

            //int creditNoteID = Convert.ToInt32(e.CommandArgument);

            int creditNoteID = -1;
            foreach (Control c in ((Control)sender).Parent.Controls)
                if (c.ID == "lblHiddenCreditNoteID")
                    creditNoteID = Convert.ToInt32(((HiddenField)c).Value);


            CreditNote creditNote = CreditNoteDB.GetByID(creditNoteID);
            if (creditNote == null)
                throw new CustomMessageException("Adjustment note - does not exist");
            if (creditNote.IsReversed)
                throw new CustomMessageException("Adjustment note already reversed");

            CreditNoteDB.Reverse(creditNote.CreditNoteID, Convert.ToInt32(Session["StaffID"]));

            FillInvoicesList();
        }
        catch (CustomMessageException cmEx)
        {
            SetErrorMessage(cmEx.Message);
        }
        catch (Exception ex)
        {
            SetErrorMessage("", ex.ToString());
        }
    }

    protected void lnkPrint_Command(object sender, CommandEventArgs e)
    {
        int invoiceID = Convert.ToInt32(e.CommandArgument);
        Invoice invoice = InvoiceDB.GetByID(invoiceID);
        Letter.GenerateInvoicesToPrint(new int[] { invoiceID }, Response, invoice.Site.IsClinic, invoice.Booking != null);
    }
    protected void lnkEmail_Command(object sender, CommandEventArgs e)
    {
        int invoiceID = Convert.ToInt32(e.CommandArgument);
        Invoice invoice = InvoiceDB.GetByID(invoiceID);

        try
        {
            Letter.GenerateInvoiceToEmail(invoiceID, invoice.Site.IsClinic);
            SetErrorMessage("Invoice Sent");
        }
        catch (CustomMessageException ex)
        {
            SetErrorMessage(ex.Message);
        }
    }


    #region HideTableAndSetErrorMessage, SetErrorMessage, HideErrorMessag

    private void HideTableAndSetErrorMessage(string errMsg = "", string details = "")
    {
        maintable.Visible = false;
        SetErrorMessage(errMsg, details);
    }
    private void SetErrorMessage(string errMsg = "", string details = "")
    {
        if (errMsg.Contains(Environment.NewLine))
            errMsg = errMsg.Replace(Environment.NewLine, "<br />");

        // double escape so shows up literally on webpage for 'alert' message
        string detailsToDisplay = (details.Length == 0 ? "" : " <a href=\"#\" onclick=\"alert('" + details.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("'", "\\'").Replace("\"", "\\'") + "'); return false;\">Details</a>");

        lblErrorMessage.Visible = true;
        if (errMsg != null && errMsg.Length > 0)
            lblErrorMessage.Text = errMsg + detailsToDisplay + "<br />";
        else
            lblErrorMessage.Text = "An error has occurred. Plase contact the system administrator. " + detailsToDisplay + "<br />";
    }
    private void HideErrorMessage()
    {
        lblErrorMessage.Visible = false;
        lblErrorMessage.Text = "";
    }

    #endregion

}
