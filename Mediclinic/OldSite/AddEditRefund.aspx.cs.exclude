using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Configuration;
using System.Text.RegularExpressions;

public partial class AddEditRefund : System.Web.UI.Page
{

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {

            HideErrorMessage();
            Utilities.UpdatePageHeader(Page.Master, true, true);

            if (!IsPostBack)
            {
                SetupGUI();

                UrlParamType urlParamType = GetUrlParamType();
                if ((urlParamType == UrlParamType.Edit || urlParamType == UrlParamType.View) && IsValidFormID())
                    FillEditViewForm(urlParamType == UrlParamType.Edit);
                else if (GetUrlParamType() == UrlParamType.Add && IsValidFormID())
                    FillEmptyAddForm();
                else
                    HideTableAndSetErrorMessage("", "Invalid URL Parameters");
            }

        }
        catch (CustomMessageException ex)
        {
            if (IsPostBack) SetErrorMessage(ex.Message);
            else HideTableAndSetErrorMessage(ex.Message);
        }
        catch (Exception ex)
        {
            if (IsPostBack) SetErrorMessage("", ex.ToString());
            else HideTableAndSetErrorMessage("", ex.ToString());
        }
    }


    #region GetUrlParamCard(), GetUrlParamType(), IsValidFormID(), GetFormID()

    private bool IsValidFormID()
    {
        string id = Request.QueryString["id"];
        return id != null && Regex.IsMatch(id, @"^\d+$");
    }
    private int GetFormID()
    {
        if (!IsValidFormID())
            throw new Exception("Invalid url id");

        string id = Request.QueryString["id"];
        return Convert.ToInt32(id);
    }

    private enum UrlParamType { Add, Edit, View, None };
    private UrlParamType GetUrlParamType()
    {
        string type = Request.QueryString["type"];
        if (type != null && type.ToLower() == "add")
            return UrlParamType.Add;
        //else if (type != null && type.ToLower() == "edit")
        //    return UrlParamType.Edit;
        else if (type != null && type.ToLower() == "view")
            return UrlParamType.View;
        else
            return UrlParamType.None;
    }

    #endregion

    #region SetupGUI()

    public void SetupGUI()
    {
        DataTable refundReasons = DBBase.GetGenericDataTable("RefundReason", "refund_reason_id", "descr");
        ddlRefundReason.DataSource = refundReasons;
        ddlRefundReason.DataBind();

        bool editable = GetUrlParamType() == UrlParamType.Add || GetUrlParamType() == UrlParamType.Edit;
        Utilities.SetEditControlBackColour(txtTotal,        editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(ddlRefundReason, editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
        Utilities.SetEditControlBackColour(txtComment,      editable, System.Drawing.Color.LightGoldenrodYellow, System.Drawing.Color.Empty);
    }

    #endregion


    private void FillEditViewForm(bool isEditMode)
    {
        Heading.InnerText = isEditMode ? "Edit Refund" : "View Refund";

        Refund refund = RefundDB.GetByID(GetFormID());
        if (refund == null)
        {
            HideTableAndSetErrorMessage("Invalid Refund ID");
            return;
        }


        lblId.Text             = refund.RefundID.ToString();
        lblInvoiceId.Text      = refund.Invoice.InvoiceID.ToString();
        lblRefundDate.Text     = refund.RefundDateAdded.ToString("d MMM, yyyy");
        lblAddedBy.Text        = refund.Staff.Person.FullnameWithoutMiddlename;
        lblTotal.Font.Bold     = !isEditMode;


        if (isEditMode)
        {
            txtTotal.Text                 = refund.Total.ToString();
            ddlRefundReason.SelectedValue = refund.RefundReason.ID.ToString();
            lblAmountReceipted.Text       = (InvoiceDB.GetByID(refund.Invoice.InvoiceID).ReceiptsTotal).ToString();
            lblTotal.Visible              = false;
            lblReason.Visible             = false;
            lblComment.Visible            = false;
        }
        else
        {
            lblTotal.Text              = refund.Total.ToString();
            lblReason.Text             = refund.RefundReason.Descr;
            lblComment.Text            = refund.Comment;
            amountReceiptedRow.Visible = false;
            txtTotal.Visible           = false;
            ddlRefundReason.Visible    = false;
            txtComment.Visible         = false;
        }



        if (isEditMode)
        {
            btnSubmit.Text = "Update Details";
        }
        else // is view mode
        {
            btnSubmit.Visible = false;
            btnCancel.Text = "Close";
        }
    }

    private void FillEmptyAddForm()
    {
        Heading.InnerText = "Add Refund";

        idRow.Visible = false;

        Invoice invoice = InvoiceDB.GetByID(GetFormID());
        if (invoice == null)
        {
            HideTableAndSetErrorMessage("Invalid invoice ID");
            return;
        }

        lblInvoiceId.Text         = invoice.InvoiceID.ToString();
        lblAmountReceipted.Text   = invoice.ReceiptsTotal.ToString();
        txtTotal.Text             = invoice.ReceiptsTotal.ToString();
        refundDateRow.Visible     = false;
        lblReason.Visible         = false;
        addedByRow.Visible        = false;

        btnSubmit.Text = "Add Refund";

        if (!invoice.IsPaID)
            btnSubmit.OnClientClick = "javascript:if (!confirm('Refunding an unpaid invoice will automaitcally credit note it to set it as paid. Are you sure you want continue with the refund?')) return false;";
        btnCancel.Visible = true;
    }


    protected void btnCancel_Click(object sender, EventArgs e)
    {
        if (GetUrlParamType() == UrlParamType.Edit)
        {
            Response.Redirect(UrlParamModifier.AddEdit(Request.RawUrl, "type", "view"));
            return;
        }

        // close this window
        Page.ClientScript.RegisterStartupScript(this.GetType(), "close", "<script language=javascript>window.returnValue=false;self.close();</script>");
    }
    protected void btnSubmit_Click(object sender, EventArgs e)
    {

        if (GetUrlParamType() == UrlParamType.View)
        {
            Response.Redirect(UrlParamModifier.AddEdit(Request.RawUrl, "type", "edit"));
        }
        //else if (GetUrlParamType() == UrlParamType.Edit)
        //{
        //    if (!IsValidFormID())
        //    {
        //        HideTableAndSetErrorMessage();
        //        return;
        //    }
        //    Receipt receipt = ReceiptDB.GetByID(GetFormID());
        //    if (receipt == null)
        //    {
        //        HideTableAndSetErrorMessage("Invalid receipt ID");
        //        return;
        //    }

        //    ReceiptDB.Update(receipt.ReceiptID, Convert.ToInt32(ddlPaymentType.SelectedValue), pos_machine_id, Convert.ToDecimal(txtTotal.Text), Convert.ToDecimal(txtAmountReconciled.Text), chkFailedToClear.Checked, receipt.IsOverpaid, GetBankProcessedDateFromForm());

        //    Response.Redirect(UrlParamModifier.AddEdit(Request.RawUrl, "type", "view_only"));


        //    // close this window
        //    //Page.ClientScript.RegisterStartupScript(this.GetType(), "close", "<script language=javascript>window.returnValue=false;self.close();</script>");
        //}
        else if (GetUrlParamType() == UrlParamType.Add)
        {
            if (!IsValidFormID())
            {
                HideTableAndSetErrorMessage();
                return;
            }
            Invoice invoice = InvoiceDB.GetByID(GetFormID());
            if (invoice == null)
            {
                HideTableAndSetErrorMessage("Invalid invoice ID");
                return;
            }

            decimal thisRefundAmount = Convert.ToDecimal(txtTotal.Text);
            if (thisRefundAmount > invoice.ReceiptsTotal)
            {
                SetErrorMessage("Can not be more than the amount receipted.");
                return;
            }


            if (!invoice.IsPaID)
            {
                int credit_note_id = CreditNoteDB.Insert(invoice.InvoiceID, invoice.TotalDue, "Auto credit noted to set inv as paid so can refund.", Convert.ToInt32(Session["StaffID"]));
                InvoiceDB.UpdateIsPaid(invoice.InvoiceID, true);
            }

            int refund_id = RefundDB.Insert(invoice.InvoiceID, thisRefundAmount, Convert.ToInt32(ddlRefundReason.SelectedValue), txtComment.Text, Convert.ToInt32(Session["StaffID"]));
            InvoiceDB.UpdateIsRefund(invoice.InvoiceID, true);


            // close this window
            Page.ClientScript.RegisterStartupScript(this.GetType(), "close", "<script language=javascript>window.returnValue=false;self.close();</script>");
        }
        else
        {
            HideTableAndSetErrorMessage("", "Invalid URL Parameters");
        }
    }


    #region HideTableAndSetErrorMessage, SetErrorMessage, HideErrorMessag

    private void HideTableAndSetErrorMessage(string errMsg = "", string details = "")
    {
        maintable.Visible = false;
        SetErrorMessage(errMsg, details);
    }
    private void SetErrorMessage(string errMsg = "", string details = "")
    {
        if (errMsg.Contains(Environment.NewLine))
            errMsg = errMsg.Replace(Environment.NewLine, "<br />");

        // double escape so shows up literally on webpage for 'alert' message
        string detailsToDisplay = (details.Length == 0 ? "" : " <a href=\"#\" onclick=\"alert('" + details.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("'", "\\'").Replace("\"", "\\'") + "'); return false;\">Details</a>");

        lblErrorMessage.Visible = true;
        if (errMsg != null && errMsg.Length > 0)
            lblErrorMessage.Text = errMsg + detailsToDisplay + "<br />";
        else
            lblErrorMessage.Text = "An error has occurred. Plase contact the system administrator. " + detailsToDisplay + "<br />";
    }
    private void HideErrorMessage()
    {
        lblErrorMessage.Visible = false;
        lblErrorMessage.Text = "";
    }

    #endregion

}
