using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Configuration;
using System.Collections;

public partial class StaffPositionInfo : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {

            if (!IsPostBack)
                Utilities.SetNoCache(Response);
            HideErrorMessage();
            this.iconKeyControl.ShowBookingIcon = false;

            if (!IsPostBack)
            {
                PagePermissions.EnforcePermissions_RequireAll(Session, Response, false, false, true, false, false, true);
                Session.Remove("staffposition_sortexpression");
                Session.Remove("staffposition_data");
                FillGrid();
            }

            if (!Utilities.IsDev())
                this.Label1.Visible = false;

            this.GrdStaffPosition.EnableViewState = true;

        }
        catch (CustomMessageException ex)
        {
            if (IsPostBack) SetErrorMessage(ex.Message);
            else HideTableAndSetErrorMessage(ex.Message);
        }
        catch (Exception ex)
        {
            if (IsPostBack) SetErrorMessage("", ex.ToString());
            else HideTableAndSetErrorMessage("", ex.ToString());
        }
    }


    #region GrdStaffPosition

    protected void FillGrid()
    {
        DataTable dt = StaffPositionDB.GetDataTable();
        Session["staffposition_data"] = dt;

        if (dt.Rows.Count > 0)
        {
            if (IsPostBack && Session["staffposition_sortexpression"] != null && Session["staffposition_sortexpression"].ToString().Length > 0)
            {
                DataView dataView = new DataView(dt);
                dataView.Sort = Session["staffposition_sortexpression"].ToString();
                GrdStaffPosition.DataSource = dataView;
            }
            else
            {
                GrdStaffPosition.DataSource = dt;
            }


            try
            {
                GrdStaffPosition.DataBind();
            }
            catch (Exception ex)
            {
                Label1.Text = ex.ToString();
            }
        }
        else
        {
            dt.Rows.Add(dt.NewRow());
            GrdStaffPosition.DataSource = dt;
            GrdStaffPosition.DataBind();

            int TotalColumns = GrdStaffPosition.Rows[0].Cells.Count;
            GrdStaffPosition.Rows[0].Cells.Clear();
            GrdStaffPosition.Rows[0].Cells.Add(new TableCell());
            GrdStaffPosition.Rows[0].Cells[0].ColumnSpan = TotalColumns;
            GrdStaffPosition.Rows[0].Cells[0].Text = "No Record Found";
        }
    }
    protected void GrdStaffPosition_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (!Utilities.IsDev() && e.Row.RowType != DataControlRowType.Pager)
            e.Row.Cells[0].CssClass = "hiddencol";
    }
    protected void GrdStaffPosition_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            Utilities.AddConfirmationBox(e);
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
                Utilities.SetEditRowBackColour(e, System.Drawing.Color.LightGoldenrodYellow);
        }
    }
    protected void GrdStaffPosition_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        GrdStaffPosition.EditIndex = -1;
        FillGrid();
    }
    protected void GrdStaffPosition_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        Label lblId = (Label)GrdStaffPosition.Rows[e.RowIndex].FindControl("lblId");
        TextBox txtDescr = (TextBox)GrdStaffPosition.Rows[e.RowIndex].FindControl("txtDescr");

        StaffPositionDB.Update(Convert.ToInt32(lblId.Text), txtDescr.Text);

        GrdStaffPosition.EditIndex = -1;
        FillGrid();
    }
    protected void GrdStaffPosition_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        Label lblId = (Label)GrdStaffPosition.Rows[e.RowIndex].FindControl("lblId");

        try
        {
            //StaffPositionDB.Delete(Convert.ToInt32(lblId.Text));
        }
        catch (ForeignKeyConstraintException fkcEx)
        {
            if (Utilities.IsDev())
                SetErrorMessage("Can not delete because other records depend on this : " + fkcEx.Message);
            else
                SetErrorMessage("Can not delete because other records depend on this");
        }

        FillGrid();
    }
    protected void GrdStaffPosition_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName.Equals("Insert"))
        {
            DropDownList ddlParent = (DropDownList)GrdStaffPosition.FooterRow.FindControl("ddlNewParent");
            TextBox txtDescr = (TextBox)GrdStaffPosition.FooterRow.FindControl("txtNewDescr");

            StaffPositionDB.Insert(txtDescr.Text);

            FillGrid();
        }
    }
    protected void GrdStaffPosition_RowEditing(object sender, GridViewEditEventArgs e)
    {
        GrdStaffPosition.EditIndex = e.NewEditIndex;
        FillGrid();
    }
    protected void GridView_Sorting(object sender, GridViewSortEventArgs e)
    {
        // dont allow sorting if in edit mode
        if (GrdStaffPosition.EditIndex >= 0)
            return;

        Sort(e.SortExpression);
    }

    protected void Sort(string sortExpression, params string[] sortExpr)
    {
        DataTable dataTable = Session["staffposition_data"] as DataTable;

        if (dataTable != null)
        {
            if (Session["staffposition_sortexpression"] == null)
                Session["staffposition_sortexpression"] = "";

            DataView dataView = new DataView(dataTable);
            string[] sortData = Session["staffposition_sortexpression"].ToString().Trim().Split(' ');

            string newSortExpr = (sortExpr.Length == 0) ?
                (sortExpression == sortData[0] && sortData[1] == "ASC") ? "DESC" : "ASC" :
                sortExpr[0];

            dataView.Sort = sortExpression + " " + newSortExpr;
            Session["staffposition_sortexpression"] = sortExpression + " " + newSortExpr;

            GrdStaffPosition.DataSource = dataView;
            GrdStaffPosition.DataBind();
        }
    }

    #endregion

    #region SetErrorMessage, HideErrorMessag

    private void HideTableAndSetErrorMessage(string errMsg = "", string details = "")
    {
        SetErrorMessage(errMsg, details);
    }
    private void SetErrorMessage(string errMsg = "", string details = "")
    {
        if (errMsg.Contains(Environment.NewLine))
            errMsg = errMsg.Replace(Environment.NewLine, "<br />");

        // double escape so shows up literally on webpage for 'alert' message
        string detailsToDisplay = (details.Length == 0 ? "" : " <a href=\"#\" onclick=\"alert('" + details.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("'", "\\'").Replace("\"", "\\'") + "'); return false;\">Details</a>");

        lblErrorMessage.Visible = true;
        if (errMsg != null && errMsg.Length > 0)
            lblErrorMessage.Text = errMsg + detailsToDisplay + "<br />";
        else
            lblErrorMessage.Text = "An error has occurred. Plase contact the system administrator. " + detailsToDisplay + "<br />";
    }
    private void HideErrorMessage()
    {
        lblErrorMessage.Visible = false;
        lblErrorMessage.Text = "";
    }

    #endregion

}
