using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Configuration;
using System.Text.RegularExpressions;
using System.Collections;
using System.IO;

public partial class BookingCreateInvoice : System.Web.UI.Page
{

    /*
        services - nonfindocline
        products - get every product from offering table
                   but dont get discontinued (not expunged)

        =>  if medicare inv - cant add any other items

        => if dva - can add more
              and can only add non-dva and non-medicare
              => only show items that have dva code

     */


    #region Page_Load

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
            Utilities.SetNoCache(Response);
        Utilities.UpdatePageHeader(Page.Master, true, true);
        HideErrorMessage();

        if (!IsPostBack)
        {
            Session.Remove("data_selected");
            Session.Remove("sortExpression_Selected");
            Session.Remove("sortExpression_Offering");

            Session.Remove("downloadFile_Contents");
            Session.Remove("downloadFile_DocName");
        }


        try
        {
            Booking booking = GetFormBooking();
            if (booking == null)
                throw new CustomMessageException("Invalid booking");
            if (booking.BookingStatus.ID != 0)
                throw new CustomMessageException("Booking already set as : " + BookingDB.GetStatusByID(booking.BookingStatus.ID).Descr);

            Booking.InvoiceType invType = (GetFormIsCancelation() || GetFormIsPrivateInv()) ? Booking.InvoiceType.None : GetInvoiceType();
            if (invType == Booking.InvoiceType.Medicare)
                Heading.Text = "Medicare Invoice";
            else if (invType == Booking.InvoiceType.DVA)
                Heading.Text = "DVA Invoice";
            else if (invType == Booking.InvoiceType.NoneFromCombinedYearlyThreshholdReached)
                Heading.Text = "PT Payable Invoice" + " - <font color=\"red\">Year Limit reached</font>";
            else if (invType == Booking.InvoiceType.NoneFromOfferingYearlyThreshholdReached)
                Heading.Text = "PT Payable Invoice" + " - <font color=\"red\">Year Limit reached for this service</font>";
            else if (invType == Booking.InvoiceType.NoneFromExpired)
                Heading.Text = "PT Payable Invoice" + " - <font color=\"red\">EPC Expired</font>";
            else if (invType == Booking.InvoiceType.None)
                Heading.Text = "PT Payable Invoice";
            else
                throw new CustomMessageException("Unknown Invoice Type");


            DataTable dt_selected_list = Session["data_selected"] as DataTable;
            if (dt_selected_list != null)
            {
                int r = dt_selected_list.Rows.Count;
            }

            invoiceItemsControl.InvoiceType = invType;
            invoiceItemsControl.SubmitButtonText = "Complete";
            invoiceItemsControl.Booking = booking;
            invoiceItemsControl.FillOfferingGrid();
            invoiceItemsControl.FillSelectedGrid();

            if (invType != Booking.InvoiceType.Medicare)
                invoiceItemsControl.LabelSetPrivateInvoiceVisible = false;


            if (invType != Booking.InvoiceType.Medicare && invType != Booking.InvoiceType.DVA)
            {
                chkGenerateSystemLetters.Visible = false;
            }
            else
            {
                PatientReferrer[] patientReferrers = PatientReferrerDB.GetActiveEPCPatientReferrersOf(booking.Patient.PatientID);

                if (patientReferrers.Length > 0)
                {
                    bool referrerHasEmailSetup;
                    if (Utilities.GetAddressType().ToString() == "Contact")
                        referrerHasEmailSetup = Contact.RemoveInvalidEmailAddresses(ContactDB.GetByEntityID(-1, patientReferrers[patientReferrers.Length - 1].RegisterReferrer.Organisation.EntityID, 27)).Length > 0;
                    else if (Utilities.GetAddressType().ToString() == "ContactAus")
                        referrerHasEmailSetup = ContactAus.RemoveInvalidEmailAddresses(ContactAusDB.GetByEntityID(-1, patientReferrers[patientReferrers.Length - 1].RegisterReferrer.Organisation.EntityID, 27)).Length > 0;
                    else
                        throw new Exception("Unknown AddressType in config: " + Utilities.GetAddressType().ToString().ToString());

                    chkGenerateSystemLetters.Visible = !patientReferrers[patientReferrers.Length - 1].RegisterReferrer.BatchSendAllPatientsTreatmentNotes && !referrerHasEmailSetup;
                }
                else // old crap from BEST can have an EPC with no fucking referring doctor
                {
                    chkGenerateSystemLetters.Visible = false;
                }
            }


            SetupGUI(booking, invType);
        }
        catch (CustomMessageException cmEx)
        {
            HideElementsAndSetErrorMessage(cmEx.Message);
            return;
        }
        catch (Exception ex)
        {
            HideElementsAndSetErrorMessage("", ex.ToString());
            return;
        }


        invoiceItemsControl.UserControlSubmitClicked             += new EventHandler(InvoiceItemsControl_SubmitButtonClicked);
        invoiceItemsControl.UserControlMakePrivateInvoiceClicked += new EventHandler(InvoiceItemsControl_MakePrivateInvoiceLinkClicked);

        if (!Utilities.IsDev())
            this.Label1.Visible = false;
    }

    #endregion

    #region GetUrlParamType()

    private bool IsValidFormBooking()
    {
        string id = Request.QueryString["booking"];
        return id != null && Regex.IsMatch(id, @"^\d+$");
    }
    private Booking GetFormBooking()
    {
        if (!IsValidFormBooking())
            throw new Exception("Invalid url booking");
        return BookingDB.GetByID(Convert.ToInt32(Request.QueryString["booking"]));
    }

    private bool GetFormIsPrivateInv()
    {
        string id = Request.QueryString["is_private"];
        return id != null && id == "1";
    }
    private bool GetFormIsCancelation()
    {
        string type = Request.QueryString["type"];
        return type != null && type == "cancel";
    }

    #endregion

    #region SetupGUI()

    protected void SetupGUI(Booking booking, Booking.InvoiceType invType)
    {
        string screen_id = "15";
        string allFeatures = "dialogWidth:980px;dialogHeight:430px;center:yes;resizable:no; scroll:no";
        string js = "javascript:window.showModalDialog('" + "NoteInfo.aspx?id=" + booking.EntityID.ToString() + "&screen=" + screen_id + "', '', '" + allFeatures + "');document.getElementById('btnUpdateNotesIcon').click();return false;";
        this.lnkNotes.Attributes.Add("onclick", js);
        lnkNotes.ImageUrl = booking.NoteCount > 0 ? "~/images/notes-48.png" : "~/images/notes-bw-48.jpg";

        lblNotesMessage.Visible = false;
        PatientReferrer[] patientReferrers = PatientReferrerDB.GetActiveEPCPatientReferrersOf(booking.Patient.PatientID);
        if (patientReferrers.Length > 0 && patientReferrers[patientReferrers.Length-1].RegisterReferrer.ReportEveryVisitToReferrer)  // [if only for epc-invoiced bookings, add:]   && (invType == Booking.InvoiceType.Medicare || invType == Booking.InvoiceType.DVA)
        {
            lblNotesMessage.Visible = true;
            lblNotesMessage.Text = "** DETAILED NOTES MANDATORY FOR GP **";
            lblNotesMessage.Font.Bold = true;
            lblNotesMessage.ForeColor = System.Drawing.Color.Red;
            lblNotesMessage.Font.Size = FontUnit.Large;
        }
    }

    protected void btnUpdateNotesIcon_Click(object sender, EventArgs e)
    {
        Booking booking = GetFormBooking();
        lnkNotes.ImageUrl = NoteDB.HasNotes(booking.EntityID) ? "~/images/notes-48.png" : "~/images/notes-bw-48.jpg";
    }

    #endregion

    #region InvoiceItemsControl_SubmitButtonClicked

    private void InvoiceItemsControl_SubmitButtonClicked(object sender, EventArgs e)
    {
        bool showDownloadPopup = false;

        try
        {
            ///////////////
            // validation
            ///////////////

            Booking booking = GetFormBooking();
            if (booking == null)
                throw new CustomMessageException("Invalid booking");
            if (booking.BookingStatus.ID != 0)
                throw new CustomMessageException("Booking already set as : " + BookingDB.GetStatusByID(booking.BookingStatus.ID).Descr);
            if (InvoiceDB.GetCountByBookingID(booking.BookingID) > 0) // shouldnt get here since should have been set as completed and thrown in error above
                throw new CustomMessageException("Booking already has an invoice");


            ///////////////////
            // create invoice
            ///////////////////


            // keep id's to delete if exception and need to roll back
            int hcInvID    = -2;
            int nonHcInvID = -2;
            ArrayList  invLineIDs = new ArrayList();
            HealthCard hc = HealthCardDB.GetActiveByPatientID(booking.Patient.PatientID);
            HealthCardEPCRemaining[] epcsRemaining = hc == null ? new HealthCardEPCRemaining[] { } : HealthCardEPCRemainingDB.GetByHealthCardID(hc.HealthCardID, booking.Offering.Field.ID);
            HealthCardEPCRemaining[] epcsRemainingOriginal = HealthCardEPCRemaining.CloneList(epcsRemaining);

            // used to check update stock and check warning level emails sent
            ArrayList invoiceLines = new ArrayList();


            try
            {
                DataTable dt_selected_list = invoiceItemsControl.GetSelectedList();

                bool isCancelation = GetFormIsCancelation();
                Booking.InvoiceType invType = isCancelation || GetFormIsPrivateInv() ? Booking.InvoiceType.None : GetInvoiceType();
                int orgID = Booking.GetInvoiceTypeOrgID(invType);  // "org id"  -- clinic inv:  medicare, dva, or null for non medicare/dva (ie patient) booking ... 

                // [107='Clinic Invoice', 363='Aged Care Invoice', 108='Standard Invoice']
                int docType = booking.Organisation.OrganisationType.OrganisationTypeID == 218 ? 107 : 363;

                bool invoiceGapPayments = Convert.ToInt32(SystemVariableDB.GetByDescr("InvoiceGapPayments").Value) == 1;

                decimal ptTotal     = 0;
                decimal hcTotal     = 0;
                int     ptItemCount = 0;
                int     hcItemCount = 0;
                for (int i = 0; i < dt_selected_list.Rows.Count; i++)
                {
                    decimal total_hc_price = Convert.ToDecimal(dt_selected_list.Rows[i]["total_hc_price"]);
                    decimal total_pt_price = Convert.ToDecimal(dt_selected_list.Rows[i]["total_pt_price"]);
                    bool    totalZero = total_hc_price + total_pt_price == 0;
                    bool    hcPaid    = Convert.ToBoolean(dt_selected_list.Rows[i]["hc_paid"]);

                    if (total_hc_price > 0 || (totalZero && hcPaid))
                    {
                        hcTotal += total_hc_price;
                        hcItemCount++;
                    }
                    if (total_pt_price > 0 || (totalZero && !hcPaid))
                    {
                        ptTotal += total_pt_price;
                        ptItemCount++;
                    }
                }


                // add healthcare invoice 
                if (hcItemCount > 0)
                {
                    hcInvID = InvoiceDB.Insert(docType, booking.BookingID, orgID, -1, 0, "", "", Convert.ToInt32(Session["StaffID"]), Convert.ToInt32(Session["SiteID"]), hcTotal, (decimal)0.00, false, false, false);
                    
                    //if (Convert.ToInt32(SystemVariableDB.GetByDescr("AutoMedicareClaiming").Value) == 1)
                    //    MedicareClaimNbrDB.InsertIntoInvoice(hcInvID, DateTime.Now.Date);

                    for (int i = 0; i < dt_selected_list.Rows.Count; i++)
                    {
                        decimal total_hc_price = Convert.ToDecimal(dt_selected_list.Rows[i]["total_hc_price"]);
                        decimal total_pt_price = Convert.ToDecimal(dt_selected_list.Rows[i]["total_pt_price"]);
                        bool    totalZero      = total_hc_price + total_pt_price == 0;
                        bool    hcPaid         = Convert.ToBoolean(dt_selected_list.Rows[i]["hc_paid"]);
                        string  areaTreated    = dt_selected_list.Rows[i]["area_treated"].ToString().Trim();


                        if (total_hc_price > 0 || (totalZero && hcPaid))
                        {
                            int invoiceLineID = InvoiceLineDB.Insert(hcInvID, booking.Patient.PatientID, Convert.ToInt32(dt_selected_list.Rows[i]["offering_id"]), Convert.ToInt32(dt_selected_list.Rows[i]["quantity"]), Convert.ToDecimal(dt_selected_list.Rows[i]["total_hc_price"]), Convert.ToDecimal(0.00), areaTreated);
                            invLineIDs.Add(invoiceLineID);
                            invoiceLines.Add(new InvoiceLine(invoiceLineID, hcInvID, booking.Patient.PatientID, Convert.ToInt32(dt_selected_list.Rows[i]["offering_id"]), Convert.ToInt32(dt_selected_list.Rows[i]["quantity"]), Convert.ToDecimal(dt_selected_list.Rows[i]["total_hc_price"]), Convert.ToDecimal(0.00), areaTreated));

                            // update their epcs remaining
                            if (invType == Booking.InvoiceType.Medicare)
                            {
                                Offering offering = OfferingDB.GetByID(Convert.ToInt32(dt_selected_list.Rows[i]["offering_id"]));
                                for (int j = 0; j < epcsRemaining.Length; j++)
                                {
                                    if (epcsRemaining[j].Field.ID == offering.Field.ID)
                                    {
                                        epcsRemaining[j].NumServicesRemaining -= 1;
                                        HealthCardEPCRemainingDB.UpdateNumServicesRemaining(epcsRemaining[j].HealthCardEpcRemainingID, epcsRemaining[j].NumServicesRemaining);
                                    }
                                }
                            }

                        }
                    }
                }


                // add non-healthcare invoice
                if (ptItemCount > 0)
                {
                    nonHcInvID = InvoiceDB.Insert(docType, booking.BookingID, 0, booking.Patient.PatientID, 0, "", "", Convert.ToInt32(Session["StaffID"]), Convert.ToInt32(Session["SiteID"]), ptTotal, (decimal)0.00, false, false, false);
                    for (int i = 0; i < dt_selected_list.Rows.Count; i++)
                    {
                        decimal total_hc_price = Convert.ToDecimal(dt_selected_list.Rows[i]["total_hc_price"]);
                        decimal total_pt_price = Convert.ToDecimal(dt_selected_list.Rows[i]["total_pt_price"]);
                        bool    totalZero      = total_hc_price + total_pt_price == 0;
                        bool    hcPaid         = Convert.ToBoolean(dt_selected_list.Rows[i]["hc_paid"]);
                        string  areaTreated    = dt_selected_list.Rows[i]["area_treated"].ToString().Trim();

                        if (total_pt_price > 0 || (totalZero && !hcPaid))
                        {
                            int invoiceLineID = InvoiceLineDB.Insert(nonHcInvID, booking.Patient.PatientID, Convert.ToInt32(dt_selected_list.Rows[i]["offering_id"]), Convert.ToInt32(dt_selected_list.Rows[i]["quantity"]), Convert.ToDecimal(dt_selected_list.Rows[i]["total_pt_price"]), Convert.ToDecimal(0.00), areaTreated);
                            invLineIDs.Add(invoiceLineID);
                            invoiceLines.Add(new InvoiceLine(invoiceLineID, nonHcInvID, booking.Patient.PatientID, Convert.ToInt32(dt_selected_list.Rows[i]["offering_id"]), Convert.ToInt32(dt_selected_list.Rows[i]["quantity"]), Convert.ToDecimal(dt_selected_list.Rows[i]["total_pt_price"]), Convert.ToDecimal(0.00), areaTreated));
                        }
                   }
               }



                // set booking as completed (or cancelled)
                booking.BookingStatus.ID = GetFormIsCancelation() ? 188 : 187;
                BookingDB.UpdateSetBookingStatusID(booking.BookingID, booking.BookingStatus.ID);





                if (!isCancelation)
                {
                    // send referrer letters
                    //
                    // NB: FIRST/LAST letters ONLY FOR MEDICARE - DVA doesn't need letters
                    // Treatment letters for anyone with epc though -- even for private invoices
                    PatientReferrer[] patientReferrers = PatientReferrerDB.GetActiveEPCPatientReferrersOf(booking.Patient.PatientID);
                    if (patientReferrers.Length == 0 && (invType == Booking.InvoiceType.Medicare || invType == Booking.InvoiceType.DVA))
                    {
                        // Marcus: let it create the invoice for medicare/dva and they will pick it up in the HINX sending rejection
                        ; //throw new CustomMessageException("Medicare/DVA invoice requires a referrering doctor - none found for this patient.");
                    }
                    else if (patientReferrers.Length > 0)
                    {
                        bool needToGenerateFirstLetter = false;
                        bool needToGenerateLastLetter = false;
                        bool needToGenerateTreatmentLetter = patientReferrers[patientReferrers.Length-1].RegisterReferrer.ReportEveryVisitToReferrer; // send treatment letter whether privately paid or not

                        if (invType == Booking.InvoiceType.Medicare)  // create first/last letters only if medicare
                        {
                            int nPodTreatmentsThisEPC = (int)InvoiceDB.GetMedicareCountByPatientAndDateRange(booking.Patient.PatientID, hc.DateReferralSigned.Date, DateTime.Now, -1, booking.Offering.Field.ID);
                            needToGenerateFirstLetter = (nPodTreatmentsThisEPC == 1);
                            needToGenerateLastLetter = (epcsRemaining[0].NumServicesRemaining == 0);
                        }

                        // if already generating first or last letter, don't generate treatement letter also
                        if (needToGenerateFirstLetter || needToGenerateLastLetter)
                            needToGenerateTreatmentLetter = false;


                        // TODO: Send Letter By Email

                        // ordereed by shippping/billing addr desc, so if any set, that will be the first one

                        string[] emails;
                        if (Utilities.GetAddressType().ToString() == "Contact")
                            emails = Contact.RemoveInvalidEmailAddresses(ContactDB.GetByEntityID(-1, patientReferrers[patientReferrers.Length - 1].RegisterReferrer.Organisation.EntityID, 27)).Select(r => r.AddrLine1).ToArray();
                        else if (Utilities.GetAddressType().ToString() == "ContactAus")
                            emails = ContactAus.RemoveInvalidEmailAddresses(ContactAusDB.GetByEntityID(-1, patientReferrers[patientReferrers.Length - 1].RegisterReferrer.Organisation.EntityID, 27)).Select(r => r.AddrLine1).ToArray();
                        else
                            throw new Exception("Unknown AddressType in config: " + Utilities.GetAddressType().ToString().ToString());


                        bool generateSystemLetters = !patientReferrers[patientReferrers.Length-1].RegisterReferrer.BatchSendAllPatientsTreatmentNotes && (emails.Length > 0 || chkGenerateSystemLetters.Checked);
                        int letterPrintHistorySendMethodID = emails.Length == 0 ? 1 : 2;

                        if (generateSystemLetters)
                        {
                            Letter.FileContents[] fileContentsList = booking.GetSystemLettersList(emails.Length > 0 ? Letter.FileFormat.PDF : Letter.FileFormat.Word, booking.Patient, hc, booking.Offering.Field.ID, patientReferrers[patientReferrers.Length - 1].RegisterReferrer.Referrer, true, needToGenerateFirstLetter, needToGenerateLastLetter, needToGenerateTreatmentLetter, Convert.ToInt32(Session["SiteID"]), Convert.ToInt32(Session["StaffID"]), letterPrintHistorySendMethodID);
                            if (fileContentsList != null && fileContentsList.Length > 0)
                            {
                                if (emails.Length > 0)
                                {
                                    Letter.EmailSystemLetter((string)Session["SiteName"], emails[0], fileContentsList);
                                }
                                else
                                {
                                    Letter.FileContents fileContents = Letter.FileContents.Merge(fileContentsList, "Treatment Letters.pdf"); // change here to create as pdf
                                    Session["downloadFile_Contents"] = fileContents.Contents;
                                    Session["downloadFile_DocName"] = fileContents.DocName;
                                    showDownloadPopup = true;
                                }
                            }
                        }

                        BookingDB.UpdateSetGeneratedSystemLetters(booking.BookingID, needToGenerateFirstLetter, needToGenerateLastLetter, generateSystemLetters);


                        /*
                        if (showEPCTreatmentDownloadPopup && !showStandardTreatmentDownloadPopup)
                        {
                            Session["downloadFile_Contents"] = fileContentsEPCTreatment.Contents;
                            Session["downloadFile_DocName"]  = fileContentsEPCTreatment.DocName;
                            showDownloadPopup = true;
                        }
                        else if (!showEPCTreatmentDownloadPopup && showStandardTreatmentDownloadPopup)
                        {
                            Session["downloadFile_Contents"] = fileContentsStandardTreatment.Contents;
                            Session["downloadFile_DocName"]  = fileContentsStandardTreatment.DocName;
                            showDownloadPopup = true;
                        }
                        else if (showEPCTreatmentDownloadPopup && showStandardTreatmentDownloadPopup)
                        {
                            // merge

                            string tmpLettersDirectory = Letter.GetTempLettersDirectory();
                            if (!Directory.Exists(tmpLettersDirectory))
                                throw new CustomMessageException("Temp letters directory doesn't exist");

                            string tmpFileName_EPCTreatment = FileHelper.GetTempFileName(tmpLettersDirectory + fileContentsEPCTreatment.DocName);
                            File.WriteAllBytes(tmpFileName_EPCTreatment, fileContentsEPCTreatment.Contents);
                            string tmpFileName_StandardTreatment = FileHelper.GetTempFileName(tmpLettersDirectory + fileContentsStandardTreatment.DocName);
                            File.WriteAllBytes(tmpFileName_StandardTreatment, fileContentsStandardTreatment.Contents);

                            string tmpFinalFileName = Letter.MergeMultipleDocuments(new string[] { tmpFileName_EPCTreatment, tmpFileName_StandardTreatment }, tmpLettersDirectory + Path.GetFileName(fileContentsEPCTreatment.DocName));
                            byte[] fileContents = System.IO.File.ReadAllBytes(tmpFinalFileName);

                            File.Delete(tmpFileName_EPCTreatment);
                            File.Delete(tmpFileName_StandardTreatment);
                            File.Delete(tmpFinalFileName);

                            Session["downloadFile_Contents"] = fileContents;
                            Session["downloadFile_DocName"] = fileContentsEPCTreatment.DocName;
                            showDownloadPopup = true;
                        }
                        */

                    }
                }

                // clear in memory (ie session) list
                Session.Remove("data_selected");



                // successfully completed, so update and check warning level for stocks

                Stock[] stockList = StockDB.GetByOrg(booking.Organisation.OrganisationID);
                string warningEmail = SystemVariableDB.GetByDescr("StockWarningNotificationEmailAddress").Value;
                foreach (InvoiceLine invoiceLine in invoiceLines)
                {
                    for (int i = 0; i < stockList.Length; i++)
                    {
                        if (invoiceLine.Offering.OfferingID == stockList[i].Offering.OfferingID && stockList[i].Quantity > 0)
                        {
                            int prevQty = stockList[i].Quantity;
                            int postQty = stockList[i].Quantity - (int)invoiceLine.Quantity;
                            if (postQty < 0) postQty = 0;

                            if (warningEmail.Length > 0 && stockList[i].WarningAmount >= 0 && stockList[i].WarningAmount < prevQty && stockList[i].WarningAmount >= postQty)
                            {
                                try
                                {
                                    Emailer.SimpleEmail(
                                        warningEmail,
                                        "Stock Warning Level Reached For " + stockList[i].Offering.Name + " at " + booking.Organisation.Name,
                                        "This email is to notify you that the stock warning level of <b>" + stockList[i].WarningAmount + "</b> items that was set for <b>" + stockList[i].Offering.Name + "</b> at <b>" + booking.Organisation.Name + "</b> has been reached and you may need to re-stock.<br /><br />Best regards,<br />Mediclinic",
                                        true,
                                        null,
                                        null
                                        );
                                }
                                catch (Exception ex)
                                {
                                    Logger.LogException(ex, true);
                                }
                            }

                            StockDB.UpdateQuantity(stockList[i].StockID, postQty);
                            stockList[i].Quantity = postQty;
                        }
                    }
                }


                if (nonHcInvID > 0)  // go to pay screen - but pass in "showDownloadPopup" somehow .. and close window with same as below script...
                {
                    System.Drawing.Size size = Receipt.GetPopupWindowAddSize();
                    size = new System.Drawing.Size(size.Width + 15, size.Height + 60);
                    Response.Redirect("~/AddReceiptsAndCreditNotes.aspx?id=" + nonHcInvID + "&returnValue=" + (showDownloadPopup ? "true" : "false") + "&window_size=" + size.Width + "_" + size.Height, false);
                    return;
                }

            }
            catch (Exception ex)
            {
                if (ex is CustomMessageException == false)
                    Logger.LogException(ex);

                // roll back...
                BookingDB.UpdateSetBookingStatusID(booking.BookingID, 0);
                BookingDB.UpdateSetGeneratedSystemLetters(booking.BookingID, booking.NeedToGenerateFirstLetter, booking.NeedToGenerateLastLetter, booking.HasGeneratedSystemLetters);
                foreach (int invLineID in invLineIDs)
                    InvoiceLineDB.Delete(invLineID);
                InvoiceDB.Delete(hcInvID);
                InvoiceDB.Delete(nonHcInvID);
                for (int j = 0; j < epcsRemainingOriginal.Length; j++)
                    HealthCardEPCRemainingDB.UpdateNumServicesRemaining(epcsRemainingOriginal[j].HealthCardEpcRemainingID, epcsRemainingOriginal[j].NumServicesRemaining);

                throw;
            }


            // close this window
            Page.ClientScript.RegisterStartupScript(this.GetType(), "close", "<script language=javascript>window.returnValue=" + (showDownloadPopup ? "true" : "false") + ";self.close();</script>");

        }
        catch (CustomMessageException cmEx)
        {
            SetErrorMessage(cmEx.Message);
            return;
        }
        catch (System.Data.SqlClient.SqlException sqlEx)
        {
            if (sqlEx.Message.StartsWith("No claim numbers left") || sqlEx.Message.StartsWith("Error: Claim number already in use"))
                SetErrorMessage(sqlEx.Message);
            else
                SetErrorMessage(Utilities.IsDev() ? sqlEx.ToString() : "");
            return;
        }
        catch (Exception ex)
        {
            SetErrorMessage("", ex.ToString());
            return;
        }
    }

    #endregion

    #region InvoiceItemsControl_MakePrivateInvoiceLinkClicked

    private void InvoiceItemsControl_MakePrivateInvoiceLinkClicked(object sender, EventArgs e)
    {
        string newURL = UrlParamModifier.AddEdit(Request.RawUrl, "is_private", "1");
        Response.Redirect(newURL);
        return;
    }

    #endregion

    #region GetInvoiceType()

    private Booking.InvoiceType GetInvoiceType()
    {
        Booking booking = GetFormBooking();
        if (booking == null)
            throw new CustomMessageException("Invalid booking");

        return booking.GetInvoiceType();
    }

    #endregion

    #region SetErrorMessage, HideErrorMessag

    private void HideElementsAndSetErrorMessage(string errMsg = "", string details = "")
    {
        invoiceItemsControl.HideElementsForError();
        chkGenerateSystemLetters.Visible = false;
        lnkNotes.Visible = false;
        SetErrorMessage(errMsg, details);
    }
    private void SetErrorMessage(string errMsg = "", string details = "")
    {
        if (errMsg.Contains(Environment.NewLine))
            errMsg = errMsg.Replace(Environment.NewLine, "<br />");

        // double escape so shows up literally on webpage for 'alert' message
        string detailsToDisplay = (details.Length == 0 ? "" : " <a href=\"#\" onclick=\"alert('" + details.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("'", "\\'").Replace("\"", "\\'") + "'); return false;\">Details</a>");

        lblErrorMessage.Visible = true;
        if (errMsg != null && errMsg.Length > 0)
            lblErrorMessage.Text = errMsg + detailsToDisplay + "<br />";
        else
            lblErrorMessage.Text = "An error has occurred. Plase contact the system administrator. " + detailsToDisplay + "<br />";
    }
    private void HideErrorMessage()
    {
        invoiceItemsControl.SpanTotalVisible                 = true;
        invoiceItemsControl.SpanButtonsVisible               = true;
        invoiceItemsControl.SpanErrorClosePageButtonsVisible = false;

        lblErrorMessage.Visible = false;
        lblErrorMessage.Text = "";
    }

    #endregion

}
